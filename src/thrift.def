namespace cpp ndw


typedef i16 Coord_Value

struct Coord
{
	10: Coord_Value X
	20: Coord_Value Y
	30: Coord_Value Z
}


enum Event_Type 
{
	FleetCodeError = 0
	FleetCodeExecError
	PlanetCodeError
	PlanetCodeExecError
	Upgraded
	ShipMade
	PlanetHarvested
	FleetWin
	FleetDraw
	FleetsGather
	PlanetColonized
	FleetLose
	FleetDrop
	PlanetLose
	PlanetWin
	CannonMade
	FightAvoided
	PlayerLog
	Count
}

typedef i32 Event_ID

struct Event 
{
	10: Event_ID id
	20: i32 time
	30: Event_Type type
	40: string comment
	50: i32 value
	60: i32 value2
	70: bool viewed
}


struct CodeData
{
	10: string blocklyCode
	20: i32 blocklyCodeDate
	30: string code
	40: i32 codeDate
	50: string lastError
}


typedef i32 Alliance_ID
const Alliance_ID Alliance_NoId = 0
typedef i32 Player_ID
const Player_ID Player_NoId = 0

struct Alliance
{
	10: Alliance_ID id
	20: Player_ID masterID
	30: string name
	40: string description
	50: string masterLogin
}

struct Skill
{
	10: string name
	20: i32 level
	30: i32 cost
	40: bool canUpdate
	50: string effectMessage
	60: string nextLevelMessage
}

typedef list<Skill> Player_SkillTab

struct Player
{
	10: Player_ID id
	20: string login
	30: string password
	40: CodeData fleetsCode
	50: CodeData planetsCode
	70: map<string, i32> tutoDisplayed
	80: Coord mainPlanet
	90: i64 score = 0
	100: Alliance_ID allianceID
	110: i64 experience = 0
	120: i64 skillpoints = 0
	130: Player_SkillTab skilltab
	160: string allianceName
	170: i32 unreadMessagesCount
}


enum Ressource
{
	Metal = 0
	Carbon
	Loicium
	Count
}

struct RessourceSet
{
	1: list<i32> tab
}

enum PlanetTask_Enum
{
	UpgradeBuilding = 0
	MakeShip
	MakeCannon
	Count
}

struct PlanetTask
{
	1: PlanetTask_Enum type = 0
	2: i32 value
	3: i32 value2
	4: i32 lauchTime
	5: i32 duration
	6: RessourceSet startCos
	7: bool expired
}

enum Building_Enum
{
	CommandCenter = 0
	MetalMine
	CarbonMine
	LoiciumFilter
	Factory
	Laboratory
	CarbonicCentral
	SolarCentral
	GeothermicCentral
	Count
}

struct Building
{
	10: i32 index
	20: RessourceSet price
	30: double coef
}

enum Ship_Enum
{
	Mosquito = 0
	Hornet
	Vulture
	Dragon
	Behemoth
	Azathoth
	Queen
	Cargo
	LargeCargo
	Count
}


struct Ship
{
	10: i32 index
	20: RessourceSet price
	30: i32 life
	40: i32 power
}

enum Cannon_Enum
{
	Cannon1 = 0
	Cannon2
	Cannon3
	Cannon4
	Cannon5
	Cannon6
	Count
}


struct Cannon
{
	10: i32 index
	20: RessourceSet price
	30: i32 life
	40: i32 power
}


enum FleetTask_Enum
{
	Move = 0
	Harvest
	Colonize
	Count
}

struct FleetTask
{
	1: FleetTask_Enum type
	2: i32 lauchTime
	3: i32 duration
	4: Coord position
	5: bool expired
}

typedef list<i32> BuildingTab
typedef list<i32> Fleet_ShipTab

struct Planet
{
	10: string name
	20: Coord coord
	30: Player_ID playerId
	40: BuildingTab buildingList
	50: list<PlanetTask> taskQueue
	60: RessourceSet ressourceSet
	70: list<Event> eventList
	80: list<i32> cannonTab
	90: Fleet_ShipTab hangar
	100: string playerLogin
	110: Alliance_ID allianceID
}


typedef i64 Fleet_ID

struct Fleet
{
	10: Fleet_ID id
	20: Player_ID playerId
	30: Coord coord
	40: Coord origin
	50: string name
	60: Fleet_ShipTab shipList
	70: RessourceSet ressourceSet
	80: list<FleetTask> taskQueue
	90: list<Event> eventList
	100: string playerLogin
	110: Alliance_ID allianceID
}


enum FleetAction_Type
{
	Nothing = 0
	Move
	Harvest
	Colonize
}


struct FleetAction
{
	1: FleetAction_Type action
	2: Coord target
}

typedef list<FleetAction> FleetActionList


struct FleetFightInfo
{
	10: Fleet before
	20: Fleet after
}


struct FleetReport
{
	10: bool isDead
	20: bool hasFight
	30: i32 experience
	40: set<i32> enemySet
	50: FleetFightInfo fightInfo
	60: bool wantEscape
	70: double escapeProba
}


struct PlanetFightInfo
{
	10: Planet before
	20: Planet after
}


struct PlanetReport
{
	10: bool isDead
	20: bool hasFight
	30: i32 experience
	40: set<i32> enemySet
	50: PlanetFightInfo fightInfo
}

struct FightReport
{
	10: list<FleetReport> fleetList
	20: bool hasPlanet
	30: optional PlanetReport planet
}


const i32 Universe_MapSizeX = 100
const i32 Universe_MapSizeY = 100
const i32 Universe_MapSizeZ = 100

typedef map<Player_ID, Player> Universe_PlayerMap
typedef map<Coord, Planet> Universe_PlanetMap
typedef map<i32, FightReport> ReportMap

struct Universe
{
	1: Universe_PlayerMap playerMap
	2: Universe_PlanetMap planetMap
	3: map<Fleet_ID, Fleet> fleetMap
	4: ReportMap reportMap
	5: Player_ID nextPlayerID
	6: Fleet_ID nextFleetID
	7: i32 time
}

struct OptionalPlayer
{
	1: optional Player player
}

struct TimeInfo
{
	10: double roundDuration
	20: double univTime
}


enum Sort_Type
{
	Name
	X
	Y
	Z
	M
	C
	L
}


struct FleetList
{
	10: list<Fleet> fleetList
	20: list<Planet> planetList
	30: i32 fleetCount
}


struct PlanetList
{
	10: list<Planet> planetList
	20: i32 planetCount
}

typedef i32 Message_ID
struct Message
{
	10: Message_ID id
	20: Player_ID sender
	30: Player_ID recipient
	40: i32 time
	50: string subject
	60: string message
	70: string senderLogin
}

struct FriendshipRequests
{
	10: list<Player> sent
	20: list<Player> received
}


service EngineServer
{
	void start()
	void stop()
	bool addPlayer(10: string login, 20: string password)
	FleetList getPlayerFleets(10: Player_ID pid, 20: i32 beginIndex, 30: i32 endIndex, 40: Sort_Type sortType, 50: bool asc)
	PlanetList getPlayerPlanets(10: Player_ID pid, 20: i32 beginIndex, 30: i32 endIndex, 40: Sort_Type sortType, 50: bool asc)
	void setPlayerFleetCode(10: Player_ID pid, 20: string code)
	void setPlayerPlanetCode(10: Player_ID pid, 20: string code)
	void setPlayerFleetBlocklyCode(10: Player_ID pid, 20: string code)
	void setPlayerPlanetBlocklyCode(10: Player_ID pid, 20: string code)
	CodeData getPlayerFleetCode(10: Player_ID pid)
	CodeData getPlayerPlanetCode(10: Player_ID pid)
	list<Player> getPlayers()
	Player getPlayer(10: Player_ID pid)
	list<Planet> getPlanet(10: Coord coord)
	Fleet getFleet(10: Fleet_ID fid)
	OptionalPlayer logPlayer(10: string login, 20: string password)
	void incrementTutoDisplayed(10: Player_ID pid, 20: string tutoName)
	FightReport getFightReport(10: i32 id)
	TimeInfo getTimeInfo()
	bool eraseAccount(10: Player_ID pid, 20: string password)
	list<Event> getPlayerEvents(10: Player_ID pid)
	bool buySkill(10: Player_ID pid, 20: i16 skillID)

	list<Building> getBuildingsInfo()
	list<Cannon> getCannonsInfo()
	list<Ship> getShipsInfo()

	void addMessage(10: Player_ID sender, 20: Player_ID recipient, 30: string suject, 40: string message)
	list<Message> getMessages(10: Player_ID recipient)
	void eraseMesage(10: Message_ID mid)

	void addFriendshipRequest(10: Player_ID playerA, 20: Player_ID playerB)
	void acceptFriendshipRequest(10: Player_ID playerA, 20: Player_ID playerB, 30: bool accept)
	void closeFriendship(10: Player_ID playerA, 20: Player_ID playerB)
	list<Player> getFriends(10: Player_ID player)
	FriendshipRequests getFriendshipRequest(10: Player_ID player)

	Alliance_ID addAlliance(10: Player_ID pid, 20: string name, 30: string description)
	Alliance getAlliance(10: Alliance_ID aid)
	void updateAlliance(10: Alliance alliance)
	void transfertAlliance(10: Alliance_ID aid, 20: Player_ID pid)
	void eraseAlliance(10: Alliance_ID aid)
	void joinAlliance(10: Player_ID pid, 20: Alliance_ID aid)
	void quitAlliance(10: Player_ID pid)
}
