#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Event_Type:
  FleetCodeError = 0
  FleetCodeExecError = 1
  PlanetCodeError = 2
  PlanetCodeExecError = 3
  Upgraded = 4
  ShipMade = 5
  PlanetHarvested = 6
  FleetWin = 7
  FleetDraw = 8
  FleetsGather = 9
  PlanetColonized = 10
  FleetLose = 11
  FleetDrop = 12
  PlanetLose = 13
  PlanetWin = 14
  CannonMade = 15
  FightAvoided = 16
  PlayerLog = 17
  Count = 18

  _VALUES_TO_NAMES = {
    0: "FleetCodeError",
    1: "FleetCodeExecError",
    2: "PlanetCodeError",
    3: "PlanetCodeExecError",
    4: "Upgraded",
    5: "ShipMade",
    6: "PlanetHarvested",
    7: "FleetWin",
    8: "FleetDraw",
    9: "FleetsGather",
    10: "PlanetColonized",
    11: "FleetLose",
    12: "FleetDrop",
    13: "PlanetLose",
    14: "PlanetWin",
    15: "CannonMade",
    16: "FightAvoided",
    17: "PlayerLog",
    18: "Count",
  }

  _NAMES_TO_VALUES = {
    "FleetCodeError": 0,
    "FleetCodeExecError": 1,
    "PlanetCodeError": 2,
    "PlanetCodeExecError": 3,
    "Upgraded": 4,
    "ShipMade": 5,
    "PlanetHarvested": 6,
    "FleetWin": 7,
    "FleetDraw": 8,
    "FleetsGather": 9,
    "PlanetColonized": 10,
    "FleetLose": 11,
    "FleetDrop": 12,
    "PlanetLose": 13,
    "PlanetWin": 14,
    "CannonMade": 15,
    "FightAvoided": 16,
    "PlayerLog": 17,
    "Count": 18,
  }

class Ressource:
  Metal = 0
  Carbon = 1
  Loicium = 2
  Count = 3

  _VALUES_TO_NAMES = {
    0: "Metal",
    1: "Carbon",
    2: "Loicium",
    3: "Count",
  }

  _NAMES_TO_VALUES = {
    "Metal": 0,
    "Carbon": 1,
    "Loicium": 2,
    "Count": 3,
  }

class PlanetTask_Enum:
  UpgradeBuilding = 0
  MakeShip = 1
  MakeCannon = 2
  Count = 3

  _VALUES_TO_NAMES = {
    0: "UpgradeBuilding",
    1: "MakeShip",
    2: "MakeCannon",
    3: "Count",
  }

  _NAMES_TO_VALUES = {
    "UpgradeBuilding": 0,
    "MakeShip": 1,
    "MakeCannon": 2,
    "Count": 3,
  }

class Building_Enum:
  CommandCenter = 0
  MetalMine = 1
  CarbonMine = 2
  LoiciumFilter = 3
  Factory = 4
  Laboratory = 5
  CarbonicCentral = 6
  SolarCentral = 7
  GeothermicCentral = 8
  Count = 9

  _VALUES_TO_NAMES = {
    0: "CommandCenter",
    1: "MetalMine",
    2: "CarbonMine",
    3: "LoiciumFilter",
    4: "Factory",
    5: "Laboratory",
    6: "CarbonicCentral",
    7: "SolarCentral",
    8: "GeothermicCentral",
    9: "Count",
  }

  _NAMES_TO_VALUES = {
    "CommandCenter": 0,
    "MetalMine": 1,
    "CarbonMine": 2,
    "LoiciumFilter": 3,
    "Factory": 4,
    "Laboratory": 5,
    "CarbonicCentral": 6,
    "SolarCentral": 7,
    "GeothermicCentral": 8,
    "Count": 9,
  }

class Ship_Enum:
  Mosquito = 0
  Hornet = 1
  Vulture = 2
  Dragon = 3
  Behemoth = 4
  Azathoth = 5
  Queen = 6
  Cargo = 7
  LargeCargo = 8
  Count = 9

  _VALUES_TO_NAMES = {
    0: "Mosquito",
    1: "Hornet",
    2: "Vulture",
    3: "Dragon",
    4: "Behemoth",
    5: "Azathoth",
    6: "Queen",
    7: "Cargo",
    8: "LargeCargo",
    9: "Count",
  }

  _NAMES_TO_VALUES = {
    "Mosquito": 0,
    "Hornet": 1,
    "Vulture": 2,
    "Dragon": 3,
    "Behemoth": 4,
    "Azathoth": 5,
    "Queen": 6,
    "Cargo": 7,
    "LargeCargo": 8,
    "Count": 9,
  }

class Cannon_Enum:
  Cannon1 = 0
  Cannon2 = 1
  Cannon3 = 2
  Cannon4 = 3
  Cannon5 = 4
  Cannon6 = 5
  Count = 6

  _VALUES_TO_NAMES = {
    0: "Cannon1",
    1: "Cannon2",
    2: "Cannon3",
    3: "Cannon4",
    4: "Cannon5",
    5: "Cannon6",
    6: "Count",
  }

  _NAMES_TO_VALUES = {
    "Cannon1": 0,
    "Cannon2": 1,
    "Cannon3": 2,
    "Cannon4": 3,
    "Cannon5": 4,
    "Cannon6": 5,
    "Count": 6,
  }

class FleetTask_Enum:
  Move = 0
  Harvest = 1
  Colonize = 2
  Count = 3

  _VALUES_TO_NAMES = {
    0: "Move",
    1: "Harvest",
    2: "Colonize",
    3: "Count",
  }

  _NAMES_TO_VALUES = {
    "Move": 0,
    "Harvest": 1,
    "Colonize": 2,
    "Count": 3,
  }

class FleetAction_Type:
  Nothing = 0
  Move = 1
  Harvest = 2
  Colonize = 3

  _VALUES_TO_NAMES = {
    0: "Nothing",
    1: "Move",
    2: "Harvest",
    3: "Colonize",
  }

  _NAMES_TO_VALUES = {
    "Nothing": 0,
    "Move": 1,
    "Harvest": 2,
    "Colonize": 3,
  }

class Sort_Type:
  Name = 0
  X = 1
  Y = 2
  Z = 3
  M = 4
  C = 5
  L = 6

  _VALUES_TO_NAMES = {
    0: "Name",
    1: "X",
    2: "Y",
    3: "Z",
    4: "M",
    5: "C",
    6: "L",
  }

  _NAMES_TO_VALUES = {
    "Name": 0,
    "X": 1,
    "Y": 2,
    "Z": 3,
    "M": 4,
    "C": 5,
    "L": 6,
  }


class Coord:
  """
  Attributes:
   - X
   - Y
   - Z
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I16, 'X', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I16, 'Y', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I16, 'Z', None, None, ), # 30
  )

  def __init__(self, X=None, Y=None, Z=None,):
    self.X = X
    self.Y = Y
    self.Z = Z

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I16:
          self.X = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I16:
          self.Y = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I16:
          self.Z = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Coord')
    if self.X is not None:
      oprot.writeFieldBegin('X', TType.I16, 10)
      oprot.writeI16(self.X)
      oprot.writeFieldEnd()
    if self.Y is not None:
      oprot.writeFieldBegin('Y', TType.I16, 20)
      oprot.writeI16(self.Y)
      oprot.writeFieldEnd()
    if self.Z is not None:
      oprot.writeFieldBegin('Z', TType.I16, 30)
      oprot.writeI16(self.Z)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Event:
  """
  Attributes:
   - id
   - time
   - type
   - comment
   - value
   - value2
   - viewed
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'id', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I32, 'time', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I32, 'type', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRING, 'comment', None, None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.I32, 'value', None, None, ), # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    (60, TType.I32, 'value2', None, None, ), # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    (70, TType.BOOL, 'viewed', None, None, ), # 70
  )

  def __init__(self, id=None, time=None, type=None, comment=None, value=None, value2=None, viewed=None,):
    self.id = id
    self.time = time
    self.type = type
    self.comment = comment
    self.value = value
    self.value2 = value2
    self.viewed = viewed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.comment = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.value = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.I32:
          self.value2 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.BOOL:
          self.viewed = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Event')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 10)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I32, 20)
      oprot.writeI32(self.time)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 30)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 40)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.I32, 50)
      oprot.writeI32(self.value)
      oprot.writeFieldEnd()
    if self.value2 is not None:
      oprot.writeFieldBegin('value2', TType.I32, 60)
      oprot.writeI32(self.value2)
      oprot.writeFieldEnd()
    if self.viewed is not None:
      oprot.writeFieldBegin('viewed', TType.BOOL, 70)
      oprot.writeBool(self.viewed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CodeData:
  """
  Attributes:
   - blocklyCode
   - blocklyCodeDate
   - code
   - codeDate
   - lastError
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'blocklyCode', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I32, 'blocklyCodeDate', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRING, 'code', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I32, 'codeDate', None, None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRING, 'lastError', None, None, ), # 50
  )

  def __init__(self, blocklyCode=None, blocklyCodeDate=None, code=None, codeDate=None, lastError=None,):
    self.blocklyCode = blocklyCode
    self.blocklyCodeDate = blocklyCodeDate
    self.code = code
    self.codeDate = codeDate
    self.lastError = lastError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.blocklyCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.blocklyCodeDate = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I32:
          self.codeDate = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.lastError = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CodeData')
    if self.blocklyCode is not None:
      oprot.writeFieldBegin('blocklyCode', TType.STRING, 10)
      oprot.writeString(self.blocklyCode)
      oprot.writeFieldEnd()
    if self.blocklyCodeDate is not None:
      oprot.writeFieldBegin('blocklyCodeDate', TType.I32, 20)
      oprot.writeI32(self.blocklyCodeDate)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 30)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.codeDate is not None:
      oprot.writeFieldBegin('codeDate', TType.I32, 40)
      oprot.writeI32(self.codeDate)
      oprot.writeFieldEnd()
    if self.lastError is not None:
      oprot.writeFieldBegin('lastError', TType.STRING, 50)
      oprot.writeString(self.lastError)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Alliance:
  """
  Attributes:
   - id
   - masterID
   - name
   - description
   - masterLogin
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'id', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I32, 'masterID', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRING, 'name', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRING, 'description', None, None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRING, 'masterLogin', None, None, ), # 50
  )

  def __init__(self, id=None, masterID=None, name=None, description=None, masterLogin=None,):
    self.id = id
    self.masterID = masterID
    self.name = name
    self.description = description
    self.masterLogin = masterLogin

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.masterID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.masterLogin = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Alliance')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 10)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.masterID is not None:
      oprot.writeFieldBegin('masterID', TType.I32, 20)
      oprot.writeI32(self.masterID)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 30)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 40)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.masterLogin is not None:
      oprot.writeFieldBegin('masterLogin', TType.STRING, 50)
      oprot.writeString(self.masterLogin)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Skill:
  """
  Attributes:
   - name
   - level
   - cost
   - canUpdate
   - effectMessage
   - nextLevelMessage
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'name', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I32, 'level', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I32, 'cost', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.BOOL, 'canUpdate', None, None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRING, 'effectMessage', None, None, ), # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    (60, TType.STRING, 'nextLevelMessage', None, None, ), # 60
  )

  def __init__(self, name=None, level=None, cost=None, canUpdate=None, effectMessage=None, nextLevelMessage=None,):
    self.name = name
    self.level = level
    self.cost = cost
    self.canUpdate = canUpdate
    self.effectMessage = effectMessage
    self.nextLevelMessage = nextLevelMessage

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.cost = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.BOOL:
          self.canUpdate = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.effectMessage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.STRING:
          self.nextLevelMessage = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Skill')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 10)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 20)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.cost is not None:
      oprot.writeFieldBegin('cost', TType.I32, 30)
      oprot.writeI32(self.cost)
      oprot.writeFieldEnd()
    if self.canUpdate is not None:
      oprot.writeFieldBegin('canUpdate', TType.BOOL, 40)
      oprot.writeBool(self.canUpdate)
      oprot.writeFieldEnd()
    if self.effectMessage is not None:
      oprot.writeFieldBegin('effectMessage', TType.STRING, 50)
      oprot.writeString(self.effectMessage)
      oprot.writeFieldEnd()
    if self.nextLevelMessage is not None:
      oprot.writeFieldBegin('nextLevelMessage', TType.STRING, 60)
      oprot.writeString(self.nextLevelMessage)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Player:
  """
  Attributes:
   - id
   - login
   - password
   - fleetsCode
   - planetsCode
   - tutoDisplayed
   - mainPlanet
   - score
   - allianceID
   - experience
   - skillpoints
   - skilltab
   - allianceName
   - unreadMessagesCount
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'id', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'login', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRING, 'password', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRUCT, 'fleetsCode', (CodeData, CodeData.thrift_spec), None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRUCT, 'planetsCode', (CodeData, CodeData.thrift_spec), None, ), # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    (70, TType.MAP, 'tutoDisplayed', (TType.STRING,None,TType.I32,None), None, ), # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    (80, TType.STRUCT, 'mainPlanet', (Coord, Coord.thrift_spec), None, ), # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    (90, TType.I64, 'score', None, 0, ), # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    (100, TType.I32, 'allianceID', None, None, ), # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    (110, TType.I32, 'experience', None, 0, ), # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    (120, TType.I32, 'skillpoints', None, 0, ), # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    None, # 127
    None, # 128
    None, # 129
    (130, TType.LIST, 'skilltab', (TType.STRUCT,(Skill, Skill.thrift_spec)), None, ), # 130
    None, # 131
    None, # 132
    None, # 133
    None, # 134
    None, # 135
    None, # 136
    None, # 137
    None, # 138
    None, # 139
    None, # 140
    None, # 141
    None, # 142
    None, # 143
    None, # 144
    None, # 145
    None, # 146
    None, # 147
    None, # 148
    None, # 149
    None, # 150
    None, # 151
    None, # 152
    None, # 153
    None, # 154
    None, # 155
    None, # 156
    None, # 157
    None, # 158
    None, # 159
    (160, TType.STRING, 'allianceName', None, None, ), # 160
    None, # 161
    None, # 162
    None, # 163
    None, # 164
    None, # 165
    None, # 166
    None, # 167
    None, # 168
    None, # 169
    (170, TType.I32, 'unreadMessagesCount', None, None, ), # 170
  )

  def __init__(self, id=None, login=None, password=None, fleetsCode=None, planetsCode=None, tutoDisplayed=None, mainPlanet=None, score=thrift_spec[90][4], allianceID=None, experience=thrift_spec[110][4], skillpoints=thrift_spec[120][4], skilltab=None, allianceName=None, unreadMessagesCount=None,):
    self.id = id
    self.login = login
    self.password = password
    self.fleetsCode = fleetsCode
    self.planetsCode = planetsCode
    self.tutoDisplayed = tutoDisplayed
    self.mainPlanet = mainPlanet
    self.score = score
    self.allianceID = allianceID
    self.experience = experience
    self.skillpoints = skillpoints
    self.skilltab = skilltab
    self.allianceName = allianceName
    self.unreadMessagesCount = unreadMessagesCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.login = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRUCT:
          self.fleetsCode = CodeData()
          self.fleetsCode.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRUCT:
          self.planetsCode = CodeData()
          self.planetsCode.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.MAP:
          self.tutoDisplayed = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readI32();
            self.tutoDisplayed[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 80:
        if ftype == TType.STRUCT:
          self.mainPlanet = Coord()
          self.mainPlanet.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 90:
        if ftype == TType.I64:
          self.score = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 100:
        if ftype == TType.I32:
          self.allianceID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 110:
        if ftype == TType.I32:
          self.experience = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 120:
        if ftype == TType.I32:
          self.skillpoints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 130:
        if ftype == TType.LIST:
          self.skilltab = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = Skill()
            _elem12.read(iprot)
            self.skilltab.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 160:
        if ftype == TType.STRING:
          self.allianceName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 170:
        if ftype == TType.I32:
          self.unreadMessagesCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Player')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 10)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.login is not None:
      oprot.writeFieldBegin('login', TType.STRING, 20)
      oprot.writeString(self.login)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 30)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.fleetsCode is not None:
      oprot.writeFieldBegin('fleetsCode', TType.STRUCT, 40)
      self.fleetsCode.write(oprot)
      oprot.writeFieldEnd()
    if self.planetsCode is not None:
      oprot.writeFieldBegin('planetsCode', TType.STRUCT, 50)
      self.planetsCode.write(oprot)
      oprot.writeFieldEnd()
    if self.tutoDisplayed is not None:
      oprot.writeFieldBegin('tutoDisplayed', TType.MAP, 70)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.tutoDisplayed))
      for kiter13,viter14 in self.tutoDisplayed.items():
        oprot.writeString(kiter13)
        oprot.writeI32(viter14)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.mainPlanet is not None:
      oprot.writeFieldBegin('mainPlanet', TType.STRUCT, 80)
      self.mainPlanet.write(oprot)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.I64, 90)
      oprot.writeI64(self.score)
      oprot.writeFieldEnd()
    if self.allianceID is not None:
      oprot.writeFieldBegin('allianceID', TType.I32, 100)
      oprot.writeI32(self.allianceID)
      oprot.writeFieldEnd()
    if self.experience is not None:
      oprot.writeFieldBegin('experience', TType.I32, 110)
      oprot.writeI32(self.experience)
      oprot.writeFieldEnd()
    if self.skillpoints is not None:
      oprot.writeFieldBegin('skillpoints', TType.I32, 120)
      oprot.writeI32(self.skillpoints)
      oprot.writeFieldEnd()
    if self.skilltab is not None:
      oprot.writeFieldBegin('skilltab', TType.LIST, 130)
      oprot.writeListBegin(TType.STRUCT, len(self.skilltab))
      for iter15 in self.skilltab:
        iter15.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.allianceName is not None:
      oprot.writeFieldBegin('allianceName', TType.STRING, 160)
      oprot.writeString(self.allianceName)
      oprot.writeFieldEnd()
    if self.unreadMessagesCount is not None:
      oprot.writeFieldBegin('unreadMessagesCount', TType.I32, 170)
      oprot.writeI32(self.unreadMessagesCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RessourceSet:
  """
  Attributes:
   - tab
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'tab', (TType.I32,None), None, ), # 1
  )

  def __init__(self, tab=None,):
    self.tab = tab

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.tab = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in xrange(_size16):
            _elem21 = iprot.readI32();
            self.tab.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RessourceSet')
    if self.tab is not None:
      oprot.writeFieldBegin('tab', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.tab))
      for iter22 in self.tab:
        oprot.writeI32(iter22)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlanetTask:
  """
  Attributes:
   - type
   - value
   - value2
   - lauchTime
   - duration
   - startCos
   - expired
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None,     0, ), # 1
    (2, TType.I32, 'value', None, None, ), # 2
    (3, TType.I32, 'value2', None, None, ), # 3
    (4, TType.I32, 'lauchTime', None, None, ), # 4
    (5, TType.I32, 'duration', None, None, ), # 5
    (6, TType.STRUCT, 'startCos', (RessourceSet, RessourceSet.thrift_spec), None, ), # 6
    (7, TType.BOOL, 'expired', None, None, ), # 7
  )

  def __init__(self, type=thrift_spec[1][4], value=None, value2=None, lauchTime=None, duration=None, startCos=None, expired=None,):
    self.type = type
    self.value = value
    self.value2 = value2
    self.lauchTime = lauchTime
    self.duration = duration
    self.startCos = startCos
    self.expired = expired

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.value = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.value2 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.lauchTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.duration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.startCos = RessourceSet()
          self.startCos.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.expired = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlanetTask')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.I32, 2)
      oprot.writeI32(self.value)
      oprot.writeFieldEnd()
    if self.value2 is not None:
      oprot.writeFieldBegin('value2', TType.I32, 3)
      oprot.writeI32(self.value2)
      oprot.writeFieldEnd()
    if self.lauchTime is not None:
      oprot.writeFieldBegin('lauchTime', TType.I32, 4)
      oprot.writeI32(self.lauchTime)
      oprot.writeFieldEnd()
    if self.duration is not None:
      oprot.writeFieldBegin('duration', TType.I32, 5)
      oprot.writeI32(self.duration)
      oprot.writeFieldEnd()
    if self.startCos is not None:
      oprot.writeFieldBegin('startCos', TType.STRUCT, 6)
      self.startCos.write(oprot)
      oprot.writeFieldEnd()
    if self.expired is not None:
      oprot.writeFieldBegin('expired', TType.BOOL, 7)
      oprot.writeBool(self.expired)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Building:
  """
  Attributes:
   - index
   - price
   - coef
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'index', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'price', (RessourceSet, RessourceSet.thrift_spec), None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.DOUBLE, 'coef', None, None, ), # 30
  )

  def __init__(self, index=None, price=None, coef=None,):
    self.index = index
    self.price = price
    self.coef = coef

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I32:
          self.index = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.price = RessourceSet()
          self.price.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.DOUBLE:
          self.coef = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Building')
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I32, 10)
      oprot.writeI32(self.index)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.STRUCT, 20)
      self.price.write(oprot)
      oprot.writeFieldEnd()
    if self.coef is not None:
      oprot.writeFieldBegin('coef', TType.DOUBLE, 30)
      oprot.writeDouble(self.coef)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Ship:
  """
  Attributes:
   - index
   - price
   - life
   - power
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'index', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'price', (RessourceSet, RessourceSet.thrift_spec), None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I32, 'life', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I32, 'power', None, None, ), # 40
  )

  def __init__(self, index=None, price=None, life=None, power=None,):
    self.index = index
    self.price = price
    self.life = life
    self.power = power

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I32:
          self.index = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.price = RessourceSet()
          self.price.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.life = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I32:
          self.power = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Ship')
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I32, 10)
      oprot.writeI32(self.index)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.STRUCT, 20)
      self.price.write(oprot)
      oprot.writeFieldEnd()
    if self.life is not None:
      oprot.writeFieldBegin('life', TType.I32, 30)
      oprot.writeI32(self.life)
      oprot.writeFieldEnd()
    if self.power is not None:
      oprot.writeFieldBegin('power', TType.I32, 40)
      oprot.writeI32(self.power)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Cannon:
  """
  Attributes:
   - index
   - price
   - life
   - power
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'index', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'price', (RessourceSet, RessourceSet.thrift_spec), None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I32, 'life', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I32, 'power', None, None, ), # 40
  )

  def __init__(self, index=None, price=None, life=None, power=None,):
    self.index = index
    self.price = price
    self.life = life
    self.power = power

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I32:
          self.index = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.price = RessourceSet()
          self.price.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.life = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I32:
          self.power = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Cannon')
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I32, 10)
      oprot.writeI32(self.index)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.STRUCT, 20)
      self.price.write(oprot)
      oprot.writeFieldEnd()
    if self.life is not None:
      oprot.writeFieldBegin('life', TType.I32, 30)
      oprot.writeI32(self.life)
      oprot.writeFieldEnd()
    if self.power is not None:
      oprot.writeFieldBegin('power', TType.I32, 40)
      oprot.writeI32(self.power)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FleetTask:
  """
  Attributes:
   - type
   - lauchTime
   - duration
   - position
   - expired
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'lauchTime', None, None, ), # 2
    (3, TType.I32, 'duration', None, None, ), # 3
    (4, TType.STRUCT, 'position', (Coord, Coord.thrift_spec), None, ), # 4
    (5, TType.BOOL, 'expired', None, None, ), # 5
  )

  def __init__(self, type=None, lauchTime=None, duration=None, position=None, expired=None,):
    self.type = type
    self.lauchTime = lauchTime
    self.duration = duration
    self.position = position
    self.expired = expired

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.lauchTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.duration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.position = Coord()
          self.position.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.expired = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FleetTask')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.lauchTime is not None:
      oprot.writeFieldBegin('lauchTime', TType.I32, 2)
      oprot.writeI32(self.lauchTime)
      oprot.writeFieldEnd()
    if self.duration is not None:
      oprot.writeFieldBegin('duration', TType.I32, 3)
      oprot.writeI32(self.duration)
      oprot.writeFieldEnd()
    if self.position is not None:
      oprot.writeFieldBegin('position', TType.STRUCT, 4)
      self.position.write(oprot)
      oprot.writeFieldEnd()
    if self.expired is not None:
      oprot.writeFieldBegin('expired', TType.BOOL, 5)
      oprot.writeBool(self.expired)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Planet:
  """
  Attributes:
   - name
   - coord
   - playerId
   - buildingList
   - taskQueue
   - ressourceSet
   - eventList
   - cannonTab
   - playerLogin
   - hangar
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'name', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'coord', (Coord, Coord.thrift_spec), None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I32, 'playerId', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.LIST, 'buildingList', (TType.I32,None), None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.LIST, 'taskQueue', (TType.STRUCT,(PlanetTask, PlanetTask.thrift_spec)), None, ), # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    (60, TType.STRUCT, 'ressourceSet', (RessourceSet, RessourceSet.thrift_spec), None, ), # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    (70, TType.LIST, 'eventList', (TType.STRUCT,(Event, Event.thrift_spec)), None, ), # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    (80, TType.LIST, 'cannonTab', (TType.I32,None), None, ), # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    (90, TType.STRING, 'playerLogin', None, None, ), # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    (100, TType.LIST, 'hangar', (TType.I32,None), None, ), # 100
  )

  def __init__(self, name=None, coord=None, playerId=None, buildingList=None, taskQueue=None, ressourceSet=None, eventList=None, cannonTab=None, playerLogin=None, hangar=None,):
    self.name = name
    self.coord = coord
    self.playerId = playerId
    self.buildingList = buildingList
    self.taskQueue = taskQueue
    self.ressourceSet = ressourceSet
    self.eventList = eventList
    self.cannonTab = cannonTab
    self.playerLogin = playerLogin
    self.hangar = hangar

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.coord = Coord()
          self.coord.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.playerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.LIST:
          self.buildingList = []
          (_etype26, _size23) = iprot.readListBegin()
          for _i27 in xrange(_size23):
            _elem28 = iprot.readI32();
            self.buildingList.append(_elem28)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.LIST:
          self.taskQueue = []
          (_etype32, _size29) = iprot.readListBegin()
          for _i33 in xrange(_size29):
            _elem34 = PlanetTask()
            _elem34.read(iprot)
            self.taskQueue.append(_elem34)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.STRUCT:
          self.ressourceSet = RessourceSet()
          self.ressourceSet.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.LIST:
          self.eventList = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = Event()
            _elem40.read(iprot)
            self.eventList.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 80:
        if ftype == TType.LIST:
          self.cannonTab = []
          (_etype44, _size41) = iprot.readListBegin()
          for _i45 in xrange(_size41):
            _elem46 = iprot.readI32();
            self.cannonTab.append(_elem46)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 90:
        if ftype == TType.STRING:
          self.playerLogin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 100:
        if ftype == TType.LIST:
          self.hangar = []
          (_etype50, _size47) = iprot.readListBegin()
          for _i51 in xrange(_size47):
            _elem52 = iprot.readI32();
            self.hangar.append(_elem52)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Planet')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 10)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.coord is not None:
      oprot.writeFieldBegin('coord', TType.STRUCT, 20)
      self.coord.write(oprot)
      oprot.writeFieldEnd()
    if self.playerId is not None:
      oprot.writeFieldBegin('playerId', TType.I32, 30)
      oprot.writeI32(self.playerId)
      oprot.writeFieldEnd()
    if self.buildingList is not None:
      oprot.writeFieldBegin('buildingList', TType.LIST, 40)
      oprot.writeListBegin(TType.I32, len(self.buildingList))
      for iter53 in self.buildingList:
        oprot.writeI32(iter53)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.taskQueue is not None:
      oprot.writeFieldBegin('taskQueue', TType.LIST, 50)
      oprot.writeListBegin(TType.STRUCT, len(self.taskQueue))
      for iter54 in self.taskQueue:
        iter54.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ressourceSet is not None:
      oprot.writeFieldBegin('ressourceSet', TType.STRUCT, 60)
      self.ressourceSet.write(oprot)
      oprot.writeFieldEnd()
    if self.eventList is not None:
      oprot.writeFieldBegin('eventList', TType.LIST, 70)
      oprot.writeListBegin(TType.STRUCT, len(self.eventList))
      for iter55 in self.eventList:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cannonTab is not None:
      oprot.writeFieldBegin('cannonTab', TType.LIST, 80)
      oprot.writeListBegin(TType.I32, len(self.cannonTab))
      for iter56 in self.cannonTab:
        oprot.writeI32(iter56)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.playerLogin is not None:
      oprot.writeFieldBegin('playerLogin', TType.STRING, 90)
      oprot.writeString(self.playerLogin)
      oprot.writeFieldEnd()
    if self.hangar is not None:
      oprot.writeFieldBegin('hangar', TType.LIST, 100)
      oprot.writeListBegin(TType.I32, len(self.hangar))
      for iter57 in self.hangar:
        oprot.writeI32(iter57)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Fleet:
  """
  Attributes:
   - id
   - playerId
   - coord
   - origin
   - name
   - shipList
   - ressourceSet
   - taskQueue
   - eventList
   - playerLogin
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I64, 'id', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I32, 'playerId', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRUCT, 'coord', (Coord, Coord.thrift_spec), None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRUCT, 'origin', (Coord, Coord.thrift_spec), None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRING, 'name', None, None, ), # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    (60, TType.LIST, 'shipList', (TType.I32,None), None, ), # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    (70, TType.STRUCT, 'ressourceSet', (RessourceSet, RessourceSet.thrift_spec), None, ), # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    (80, TType.LIST, 'taskQueue', (TType.STRUCT,(FleetTask, FleetTask.thrift_spec)), None, ), # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    (90, TType.LIST, 'eventList', (TType.STRUCT,(Event, Event.thrift_spec)), None, ), # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    (100, TType.STRING, 'playerLogin', None, None, ), # 100
  )

  def __init__(self, id=None, playerId=None, coord=None, origin=None, name=None, shipList=None, ressourceSet=None, taskQueue=None, eventList=None, playerLogin=None,):
    self.id = id
    self.playerId = playerId
    self.coord = coord
    self.origin = origin
    self.name = name
    self.shipList = shipList
    self.ressourceSet = ressourceSet
    self.taskQueue = taskQueue
    self.eventList = eventList
    self.playerLogin = playerLogin

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.playerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRUCT:
          self.coord = Coord()
          self.coord.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRUCT:
          self.origin = Coord()
          self.origin.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.LIST:
          self.shipList = []
          (_etype61, _size58) = iprot.readListBegin()
          for _i62 in xrange(_size58):
            _elem63 = iprot.readI32();
            self.shipList.append(_elem63)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.STRUCT:
          self.ressourceSet = RessourceSet()
          self.ressourceSet.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 80:
        if ftype == TType.LIST:
          self.taskQueue = []
          (_etype67, _size64) = iprot.readListBegin()
          for _i68 in xrange(_size64):
            _elem69 = FleetTask()
            _elem69.read(iprot)
            self.taskQueue.append(_elem69)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 90:
        if ftype == TType.LIST:
          self.eventList = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = Event()
            _elem75.read(iprot)
            self.eventList.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 100:
        if ftype == TType.STRING:
          self.playerLogin = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Fleet')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 10)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.playerId is not None:
      oprot.writeFieldBegin('playerId', TType.I32, 20)
      oprot.writeI32(self.playerId)
      oprot.writeFieldEnd()
    if self.coord is not None:
      oprot.writeFieldBegin('coord', TType.STRUCT, 30)
      self.coord.write(oprot)
      oprot.writeFieldEnd()
    if self.origin is not None:
      oprot.writeFieldBegin('origin', TType.STRUCT, 40)
      self.origin.write(oprot)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 50)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.shipList is not None:
      oprot.writeFieldBegin('shipList', TType.LIST, 60)
      oprot.writeListBegin(TType.I32, len(self.shipList))
      for iter76 in self.shipList:
        oprot.writeI32(iter76)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ressourceSet is not None:
      oprot.writeFieldBegin('ressourceSet', TType.STRUCT, 70)
      self.ressourceSet.write(oprot)
      oprot.writeFieldEnd()
    if self.taskQueue is not None:
      oprot.writeFieldBegin('taskQueue', TType.LIST, 80)
      oprot.writeListBegin(TType.STRUCT, len(self.taskQueue))
      for iter77 in self.taskQueue:
        iter77.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.eventList is not None:
      oprot.writeFieldBegin('eventList', TType.LIST, 90)
      oprot.writeListBegin(TType.STRUCT, len(self.eventList))
      for iter78 in self.eventList:
        iter78.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.playerLogin is not None:
      oprot.writeFieldBegin('playerLogin', TType.STRING, 100)
      oprot.writeString(self.playerLogin)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FleetAction:
  """
  Attributes:
   - action
   - target
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'action', None, None, ), # 1
    (2, TType.STRUCT, 'target', (Coord, Coord.thrift_spec), None, ), # 2
  )

  def __init__(self, action=None, target=None,):
    self.action = action
    self.target = target

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.action = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.target = Coord()
          self.target.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FleetAction')
    if self.action is not None:
      oprot.writeFieldBegin('action', TType.I32, 1)
      oprot.writeI32(self.action)
      oprot.writeFieldEnd()
    if self.target is not None:
      oprot.writeFieldBegin('target', TType.STRUCT, 2)
      self.target.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FleetFightInfo:
  """
  Attributes:
   - before
   - after
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'before', (Fleet, Fleet.thrift_spec), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'after', (Fleet, Fleet.thrift_spec), None, ), # 20
  )

  def __init__(self, before=None, after=None,):
    self.before = before
    self.after = after

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRUCT:
          self.before = Fleet()
          self.before.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.after = Fleet()
          self.after.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FleetFightInfo')
    if self.before is not None:
      oprot.writeFieldBegin('before', TType.STRUCT, 10)
      self.before.write(oprot)
      oprot.writeFieldEnd()
    if self.after is not None:
      oprot.writeFieldBegin('after', TType.STRUCT, 20)
      self.after.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FleetReport:
  """
  Attributes:
   - isDead
   - hasFight
   - experience
   - enemySet
   - fightInfo
   - wantEscape
   - escapeProba
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.BOOL, 'isDead', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.BOOL, 'hasFight', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I32, 'experience', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.SET, 'enemySet', (TType.I32,None), None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRUCT, 'fightInfo', (FleetFightInfo, FleetFightInfo.thrift_spec), None, ), # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    (60, TType.BOOL, 'wantEscape', None, None, ), # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    (70, TType.DOUBLE, 'escapeProba', None, None, ), # 70
  )

  def __init__(self, isDead=None, hasFight=None, experience=None, enemySet=None, fightInfo=None, wantEscape=None, escapeProba=None,):
    self.isDead = isDead
    self.hasFight = hasFight
    self.experience = experience
    self.enemySet = enemySet
    self.fightInfo = fightInfo
    self.wantEscape = wantEscape
    self.escapeProba = escapeProba

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.BOOL:
          self.isDead = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.BOOL:
          self.hasFight = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.experience = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.SET:
          self.enemySet = set()
          (_etype82, _size79) = iprot.readSetBegin()
          for _i83 in xrange(_size79):
            _elem84 = iprot.readI32();
            self.enemySet.add(_elem84)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRUCT:
          self.fightInfo = FleetFightInfo()
          self.fightInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.BOOL:
          self.wantEscape = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.DOUBLE:
          self.escapeProba = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FleetReport')
    if self.isDead is not None:
      oprot.writeFieldBegin('isDead', TType.BOOL, 10)
      oprot.writeBool(self.isDead)
      oprot.writeFieldEnd()
    if self.hasFight is not None:
      oprot.writeFieldBegin('hasFight', TType.BOOL, 20)
      oprot.writeBool(self.hasFight)
      oprot.writeFieldEnd()
    if self.experience is not None:
      oprot.writeFieldBegin('experience', TType.I32, 30)
      oprot.writeI32(self.experience)
      oprot.writeFieldEnd()
    if self.enemySet is not None:
      oprot.writeFieldBegin('enemySet', TType.SET, 40)
      oprot.writeSetBegin(TType.I32, len(self.enemySet))
      for iter85 in self.enemySet:
        oprot.writeI32(iter85)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.fightInfo is not None:
      oprot.writeFieldBegin('fightInfo', TType.STRUCT, 50)
      self.fightInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.wantEscape is not None:
      oprot.writeFieldBegin('wantEscape', TType.BOOL, 60)
      oprot.writeBool(self.wantEscape)
      oprot.writeFieldEnd()
    if self.escapeProba is not None:
      oprot.writeFieldBegin('escapeProba', TType.DOUBLE, 70)
      oprot.writeDouble(self.escapeProba)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlanetFightInfo:
  """
  Attributes:
   - before
   - after
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'before', (Planet, Planet.thrift_spec), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'after', (Planet, Planet.thrift_spec), None, ), # 20
  )

  def __init__(self, before=None, after=None,):
    self.before = before
    self.after = after

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRUCT:
          self.before = Planet()
          self.before.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.after = Planet()
          self.after.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlanetFightInfo')
    if self.before is not None:
      oprot.writeFieldBegin('before', TType.STRUCT, 10)
      self.before.write(oprot)
      oprot.writeFieldEnd()
    if self.after is not None:
      oprot.writeFieldBegin('after', TType.STRUCT, 20)
      self.after.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlanetReport:
  """
  Attributes:
   - isDead
   - hasFight
   - experience
   - enemySet
   - fightInfo
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.BOOL, 'isDead', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.BOOL, 'hasFight', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I32, 'experience', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.SET, 'enemySet', (TType.I32,None), None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRUCT, 'fightInfo', (PlanetFightInfo, PlanetFightInfo.thrift_spec), None, ), # 50
  )

  def __init__(self, isDead=None, hasFight=None, experience=None, enemySet=None, fightInfo=None,):
    self.isDead = isDead
    self.hasFight = hasFight
    self.experience = experience
    self.enemySet = enemySet
    self.fightInfo = fightInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.BOOL:
          self.isDead = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.BOOL:
          self.hasFight = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.experience = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.SET:
          self.enemySet = set()
          (_etype89, _size86) = iprot.readSetBegin()
          for _i90 in xrange(_size86):
            _elem91 = iprot.readI32();
            self.enemySet.add(_elem91)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRUCT:
          self.fightInfo = PlanetFightInfo()
          self.fightInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlanetReport')
    if self.isDead is not None:
      oprot.writeFieldBegin('isDead', TType.BOOL, 10)
      oprot.writeBool(self.isDead)
      oprot.writeFieldEnd()
    if self.hasFight is not None:
      oprot.writeFieldBegin('hasFight', TType.BOOL, 20)
      oprot.writeBool(self.hasFight)
      oprot.writeFieldEnd()
    if self.experience is not None:
      oprot.writeFieldBegin('experience', TType.I32, 30)
      oprot.writeI32(self.experience)
      oprot.writeFieldEnd()
    if self.enemySet is not None:
      oprot.writeFieldBegin('enemySet', TType.SET, 40)
      oprot.writeSetBegin(TType.I32, len(self.enemySet))
      for iter92 in self.enemySet:
        oprot.writeI32(iter92)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.fightInfo is not None:
      oprot.writeFieldBegin('fightInfo', TType.STRUCT, 50)
      self.fightInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FightReport:
  """
  Attributes:
   - fleetList
   - hasPlanet
   - planet
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.LIST, 'fleetList', (TType.STRUCT,(FleetReport, FleetReport.thrift_spec)), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.BOOL, 'hasPlanet', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRUCT, 'planet', (PlanetReport, PlanetReport.thrift_spec), None, ), # 30
  )

  def __init__(self, fleetList=None, hasPlanet=None, planet=None,):
    self.fleetList = fleetList
    self.hasPlanet = hasPlanet
    self.planet = planet

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.LIST:
          self.fleetList = []
          (_etype96, _size93) = iprot.readListBegin()
          for _i97 in xrange(_size93):
            _elem98 = FleetReport()
            _elem98.read(iprot)
            self.fleetList.append(_elem98)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.BOOL:
          self.hasPlanet = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRUCT:
          self.planet = PlanetReport()
          self.planet.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FightReport')
    if self.fleetList is not None:
      oprot.writeFieldBegin('fleetList', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.fleetList))
      for iter99 in self.fleetList:
        iter99.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.hasPlanet is not None:
      oprot.writeFieldBegin('hasPlanet', TType.BOOL, 20)
      oprot.writeBool(self.hasPlanet)
      oprot.writeFieldEnd()
    if self.planet is not None:
      oprot.writeFieldBegin('planet', TType.STRUCT, 30)
      self.planet.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Universe:
  """
  Attributes:
   - playerMap
   - planetMap
   - fleetMap
   - reportMap
   - nextPlayerID
   - nextFleetID
   - time
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'playerMap', (TType.I32,None,TType.STRUCT,(Player, Player.thrift_spec)), None, ), # 1
    (2, TType.MAP, 'planetMap', (TType.STRUCT,(Coord, Coord.thrift_spec),TType.STRUCT,(Planet, Planet.thrift_spec)), None, ), # 2
    (3, TType.MAP, 'fleetMap', (TType.I64,None,TType.STRUCT,(Fleet, Fleet.thrift_spec)), None, ), # 3
    (4, TType.MAP, 'reportMap', (TType.I32,None,TType.STRUCT,(FightReport, FightReport.thrift_spec)), None, ), # 4
    (5, TType.I32, 'nextPlayerID', None, None, ), # 5
    (6, TType.I64, 'nextFleetID', None, None, ), # 6
    (7, TType.I32, 'time', None, None, ), # 7
  )

  def __init__(self, playerMap=None, planetMap=None, fleetMap=None, reportMap=None, nextPlayerID=None, nextFleetID=None, time=None,):
    self.playerMap = playerMap
    self.planetMap = planetMap
    self.fleetMap = fleetMap
    self.reportMap = reportMap
    self.nextPlayerID = nextPlayerID
    self.nextFleetID = nextFleetID
    self.time = time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.playerMap = {}
          (_ktype101, _vtype102, _size100 ) = iprot.readMapBegin() 
          for _i104 in xrange(_size100):
            _key105 = iprot.readI32();
            _val106 = Player()
            _val106.read(iprot)
            self.playerMap[_key105] = _val106
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.planetMap = {}
          (_ktype108, _vtype109, _size107 ) = iprot.readMapBegin() 
          for _i111 in xrange(_size107):
            _key112 = Coord()
            _key112.read(iprot)
            _val113 = Planet()
            _val113.read(iprot)
            self.planetMap[_key112] = _val113
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.fleetMap = {}
          (_ktype115, _vtype116, _size114 ) = iprot.readMapBegin() 
          for _i118 in xrange(_size114):
            _key119 = iprot.readI64();
            _val120 = Fleet()
            _val120.read(iprot)
            self.fleetMap[_key119] = _val120
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.reportMap = {}
          (_ktype122, _vtype123, _size121 ) = iprot.readMapBegin() 
          for _i125 in xrange(_size121):
            _key126 = iprot.readI32();
            _val127 = FightReport()
            _val127.read(iprot)
            self.reportMap[_key126] = _val127
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.nextPlayerID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.nextFleetID = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.time = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Universe')
    if self.playerMap is not None:
      oprot.writeFieldBegin('playerMap', TType.MAP, 1)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.playerMap))
      for kiter128,viter129 in self.playerMap.items():
        oprot.writeI32(kiter128)
        viter129.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.planetMap is not None:
      oprot.writeFieldBegin('planetMap', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRUCT, TType.STRUCT, len(self.planetMap))
      for kiter130,viter131 in self.planetMap.items():
        kiter130.write(oprot)
        viter131.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.fleetMap is not None:
      oprot.writeFieldBegin('fleetMap', TType.MAP, 3)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.fleetMap))
      for kiter132,viter133 in self.fleetMap.items():
        oprot.writeI64(kiter132)
        viter133.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.reportMap is not None:
      oprot.writeFieldBegin('reportMap', TType.MAP, 4)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.reportMap))
      for kiter134,viter135 in self.reportMap.items():
        oprot.writeI32(kiter134)
        viter135.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.nextPlayerID is not None:
      oprot.writeFieldBegin('nextPlayerID', TType.I32, 5)
      oprot.writeI32(self.nextPlayerID)
      oprot.writeFieldEnd()
    if self.nextFleetID is not None:
      oprot.writeFieldBegin('nextFleetID', TType.I64, 6)
      oprot.writeI64(self.nextFleetID)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I32, 7)
      oprot.writeI32(self.time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OptionalPlayer:
  """
  Attributes:
   - player
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'player', (Player, Player.thrift_spec), None, ), # 1
  )

  def __init__(self, player=None,):
    self.player = player

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.player = Player()
          self.player.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OptionalPlayer')
    if self.player is not None:
      oprot.writeFieldBegin('player', TType.STRUCT, 1)
      self.player.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TimeInfo:
  """
  Attributes:
   - roundDuration
   - univTime
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.DOUBLE, 'roundDuration', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.DOUBLE, 'univTime', None, None, ), # 20
  )

  def __init__(self, roundDuration=None, univTime=None,):
    self.roundDuration = roundDuration
    self.univTime = univTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.DOUBLE:
          self.roundDuration = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.DOUBLE:
          self.univTime = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TimeInfo')
    if self.roundDuration is not None:
      oprot.writeFieldBegin('roundDuration', TType.DOUBLE, 10)
      oprot.writeDouble(self.roundDuration)
      oprot.writeFieldEnd()
    if self.univTime is not None:
      oprot.writeFieldBegin('univTime', TType.DOUBLE, 20)
      oprot.writeDouble(self.univTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FleetList:
  """
  Attributes:
   - fleetList
   - planetList
   - fleetCount
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.LIST, 'fleetList', (TType.STRUCT,(Fleet, Fleet.thrift_spec)), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.LIST, 'planetList', (TType.STRUCT,(Planet, Planet.thrift_spec)), None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I32, 'fleetCount', None, None, ), # 30
  )

  def __init__(self, fleetList=None, planetList=None, fleetCount=None,):
    self.fleetList = fleetList
    self.planetList = planetList
    self.fleetCount = fleetCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.LIST:
          self.fleetList = []
          (_etype139, _size136) = iprot.readListBegin()
          for _i140 in xrange(_size136):
            _elem141 = Fleet()
            _elem141.read(iprot)
            self.fleetList.append(_elem141)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.planetList = []
          (_etype145, _size142) = iprot.readListBegin()
          for _i146 in xrange(_size142):
            _elem147 = Planet()
            _elem147.read(iprot)
            self.planetList.append(_elem147)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.fleetCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FleetList')
    if self.fleetList is not None:
      oprot.writeFieldBegin('fleetList', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.fleetList))
      for iter148 in self.fleetList:
        iter148.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.planetList is not None:
      oprot.writeFieldBegin('planetList', TType.LIST, 20)
      oprot.writeListBegin(TType.STRUCT, len(self.planetList))
      for iter149 in self.planetList:
        iter149.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.fleetCount is not None:
      oprot.writeFieldBegin('fleetCount', TType.I32, 30)
      oprot.writeI32(self.fleetCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlanetList:
  """
  Attributes:
   - planetList
   - planetCount
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.LIST, 'planetList', (TType.STRUCT,(Planet, Planet.thrift_spec)), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I32, 'planetCount', None, None, ), # 20
  )

  def __init__(self, planetList=None, planetCount=None,):
    self.planetList = planetList
    self.planetCount = planetCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.LIST:
          self.planetList = []
          (_etype153, _size150) = iprot.readListBegin()
          for _i154 in xrange(_size150):
            _elem155 = Planet()
            _elem155.read(iprot)
            self.planetList.append(_elem155)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.planetCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlanetList')
    if self.planetList is not None:
      oprot.writeFieldBegin('planetList', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.planetList))
      for iter156 in self.planetList:
        iter156.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.planetCount is not None:
      oprot.writeFieldBegin('planetCount', TType.I32, 20)
      oprot.writeI32(self.planetCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Message:
  """
  Attributes:
   - id
   - sender
   - recipient
   - time
   - subject
   - message
   - senderLogin
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'id', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I32, 'sender', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I32, 'recipient', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I32, 'time', None, None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRING, 'subject', None, None, ), # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    (60, TType.STRING, 'message', None, None, ), # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    (70, TType.STRING, 'senderLogin', None, None, ), # 70
  )

  def __init__(self, id=None, sender=None, recipient=None, time=None, subject=None, message=None, senderLogin=None,):
    self.id = id
    self.sender = sender
    self.recipient = recipient
    self.time = time
    self.subject = subject
    self.message = message
    self.senderLogin = senderLogin

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.sender = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.recipient = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I32:
          self.time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.subject = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.STRING:
          self.senderLogin = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Message')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 10)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.sender is not None:
      oprot.writeFieldBegin('sender', TType.I32, 20)
      oprot.writeI32(self.sender)
      oprot.writeFieldEnd()
    if self.recipient is not None:
      oprot.writeFieldBegin('recipient', TType.I32, 30)
      oprot.writeI32(self.recipient)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I32, 40)
      oprot.writeI32(self.time)
      oprot.writeFieldEnd()
    if self.subject is not None:
      oprot.writeFieldBegin('subject', TType.STRING, 50)
      oprot.writeString(self.subject)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 60)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.senderLogin is not None:
      oprot.writeFieldBegin('senderLogin', TType.STRING, 70)
      oprot.writeString(self.senderLogin)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FriendshipRequests:
  """
  Attributes:
   - sent
   - received
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.LIST, 'sent', (TType.STRUCT,(Player, Player.thrift_spec)), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.LIST, 'received', (TType.STRUCT,(Player, Player.thrift_spec)), None, ), # 20
  )

  def __init__(self, sent=None, received=None,):
    self.sent = sent
    self.received = received

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.LIST:
          self.sent = []
          (_etype160, _size157) = iprot.readListBegin()
          for _i161 in xrange(_size157):
            _elem162 = Player()
            _elem162.read(iprot)
            self.sent.append(_elem162)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.received = []
          (_etype166, _size163) = iprot.readListBegin()
          for _i167 in xrange(_size163):
            _elem168 = Player()
            _elem168.read(iprot)
            self.received.append(_elem168)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FriendshipRequests')
    if self.sent is not None:
      oprot.writeFieldBegin('sent', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.sent))
      for iter169 in self.sent:
        iter169.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.received is not None:
      oprot.writeFieldBegin('received', TType.LIST, 20)
      oprot.writeListBegin(TType.STRUCT, len(self.received))
      for iter170 in self.received:
        iter170.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
