/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef thrift_TYPES_H
#define thrift_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace ndw
{

struct Event_Type
{
	enum type
	{
	  FleetCodeError = 0,
	  FleetCodeExecError = 1,
	  PlanetCodeError = 2,
	  PlanetCodeExecError = 3,
	  Upgraded = 4,
	  ShipMade = 5,
	  PlanetHarvested = 6,
	  FleetWin = 7,
	  FleetDraw = 8,
	  FleetsGather = 9,
	  PlanetColonized = 10,
	  FleetLose = 11,
	  FleetDrop = 12,
	  PlanetLose = 13,
	  PlanetWin = 14,
	  CannonMade = 15,
	  Count = 16
	};
};

extern const std::map<int, const char*> _Event_Type_VALUES_TO_NAMES;

struct Ressource
{
	enum type
	{
	  Metal = 0,
	  Carbon = 1,
	  Loicium = 2,
	  Count = 3
	};
};

extern const std::map<int, const char*> _Ressource_VALUES_TO_NAMES;

struct PlanetTask_Enum
{
	enum type
	{
	  UpgradeBuilding = 0,
	  MakeShip = 1,
	  MakeCannon = 2,
	  Count = 3
	};
};

extern const std::map<int, const char*> _PlanetTask_Enum_VALUES_TO_NAMES;

struct Building_Enum
{
	enum type
	{
	  CommandCenter = 0,
	  MetalMine = 1,
	  CarbonMine = 2,
	  LoiciumFilter = 3,
	  Factory = 4,
	  Laboratory = 5,
	  CarbonicCentral = 6,
	  SolarCentral = 7,
	  GeothermicCentral = 8,
	  Count = 9
	};
};

extern const std::map<int, const char*> _Building_Enum_VALUES_TO_NAMES;

struct Ship_Enum
{
	enum type
	{
	  Mosquito = 0,
	  Hornet = 1,
	  Vulture = 2,
	  Dragon = 3,
	  Behemoth = 4,
	  Azathoth = 5,
	  Queen = 6,
	  Cargo = 7,
	  LargeCargo = 8,
	  Count = 9
	};
};

extern const std::map<int, const char*> _Ship_Enum_VALUES_TO_NAMES;

struct Cannon_Enum
{
	enum type
	{
	  Cannon1 = 0,
	  Cannon2 = 1,
	  Cannon3 = 2,
	  Cannon4 = 3,
	  Cannon5 = 4,
	  Cannon6 = 5,
	  Count = 6
	};
};

extern const std::map<int, const char*> _Cannon_Enum_VALUES_TO_NAMES;

struct FleetTask_Enum
{
	enum type
	{
	  Move = 0,
	  Harvest = 1,
	  Colonize = 2,
	  Count = 3
	};
};

extern const std::map<int, const char*> _FleetTask_Enum_VALUES_TO_NAMES;

struct FleetAction_Type
{
	enum type
	{
	  Nothing = 0,
	  Move = 1,
	  Harvest = 2,
	  Colonize = 3
	};
};

extern const std::map<int, const char*> _FleetAction_Type_VALUES_TO_NAMES;

struct Sort_Type
{
	enum type
	{
	  Name = 0,
	  X = 1,
	  Y = 2,
	  Z = 3,
	  M = 4,
	  C = 5,
	  L = 6
	};
};

extern const std::map<int, const char*> _Sort_Type_VALUES_TO_NAMES;

typedef int32_t Coord_Value;

typedef int32_t Event_ID;

typedef int32_t Player_ID;

typedef std::vector<int32_t>  BuildingTab;

typedef int64_t Fleet_ID;

typedef std::vector<int32_t>  Fleet_ShipTab;

typedef std::vector<class FleetAction>  FleetActionList;

typedef std::map<Player_ID, class Player>  Universe_PlayerMap;

typedef std::map<class Coord, class Planet>  Universe_PlanetMap;

typedef std::map<int32_t, class FightReport>  ReportMap;

typedef struct _Coord__isset
{
	_Coord__isset() : X(false), Y(false), Z(false) {}
	bool X;
	bool Y;
	bool Z;
} _Coord__isset;

class Coord
{
public:

	static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
	static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

	Coord() : X(0), Y(0), Z(0)
	{
	}

	virtual ~Coord() throw() {}

	Coord_Value X;
	Coord_Value Y;
	Coord_Value Z;

	_Coord__isset __isset;

	void __set_X(const Coord_Value val)
	{
		X = val;
	}

	void __set_Y(const Coord_Value val)
	{
		Y = val;
	}

	void __set_Z(const Coord_Value val)
	{
		Z = val;
	}

	bool operator == (const Coord& rhs) const
	{
		if(!(X == rhs.X))
			return false;
		if(!(Y == rhs.Y))
			return false;
		if(!(Z == rhs.Z))
			return false;
		return true;
	}
	bool operator != (const Coord& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Coord&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Coord& a, Coord& b);

typedef struct _Event__isset
{
	_Event__isset() : id(false), time(false), type(false), comment(false), value(false), viewed(false) {}
	bool id;
	bool time;
	bool type;
	bool comment;
	bool value;
	bool viewed;
} _Event__isset;

class Event
{
public:

	static const char* ascii_fingerprint; // = "9C6D5D1EFAEA56027D176F213E40700B";
	static const uint8_t binary_fingerprint[16]; // = {0x9C,0x6D,0x5D,0x1E,0xFA,0xEA,0x56,0x02,0x7D,0x17,0x6F,0x21,0x3E,0x40,0x70,0x0B};

	Event() : id(0), time(0), type((Event_Type::type)0), comment(), value(0), viewed(0)
	{
	}

	virtual ~Event() throw() {}

	Event_ID id;
	int32_t time;
	Event_Type::type type;
	std::string comment;
	int32_t value;
	bool viewed;

	_Event__isset __isset;

	void __set_id(const Event_ID val)
	{
		id = val;
	}

	void __set_time(const int32_t val)
	{
		time = val;
	}

	void __set_type(const Event_Type::type val)
	{
		type = val;
	}

	void __set_comment(const std::string& val)
	{
		comment = val;
	}

	void __set_value(const int32_t val)
	{
		value = val;
	}

	void __set_viewed(const bool val)
	{
		viewed = val;
	}

	bool operator == (const Event& rhs) const
	{
		if(!(id == rhs.id))
			return false;
		if(!(time == rhs.time))
			return false;
		if(!(type == rhs.type))
			return false;
		if(!(comment == rhs.comment))
			return false;
		if(!(value == rhs.value))
			return false;
		if(!(viewed == rhs.viewed))
			return false;
		return true;
	}
	bool operator != (const Event& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Event&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Event& a, Event& b);

typedef struct _CodeData__isset
{
	_CodeData__isset() : blocklyCode(false), code(false), lastError(false) {}
	bool blocklyCode;
	bool code;
	bool lastError;
} _CodeData__isset;

class CodeData
{
public:

	static const char* ascii_fingerprint; // = "8C927FC383653B5F72B71AAB46CCBF55";
	static const uint8_t binary_fingerprint[16]; // = {0x8C,0x92,0x7F,0xC3,0x83,0x65,0x3B,0x5F,0x72,0xB7,0x1A,0xAB,0x46,0xCC,0xBF,0x55};

	CodeData() : blocklyCode(), code(), lastError()
	{
	}

	virtual ~CodeData() throw() {}

	std::string blocklyCode;
	std::string code;
	std::string lastError;

	_CodeData__isset __isset;

	void __set_blocklyCode(const std::string& val)
	{
		blocklyCode = val;
	}

	void __set_code(const std::string& val)
	{
		code = val;
	}

	void __set_lastError(const std::string& val)
	{
		lastError = val;
	}

	bool operator == (const CodeData& rhs) const
	{
		if(!(blocklyCode == rhs.blocklyCode))
			return false;
		if(!(code == rhs.code))
			return false;
		if(!(lastError == rhs.lastError))
			return false;
		return true;
	}
	bool operator != (const CodeData& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const CodeData&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CodeData& a, CodeData& b);

typedef struct _Player__isset
{
	_Player__isset() : id(false), login(false), password(false), fleetsCode(false), planetsCode(false), tutoDisplayed(false), mainPlanet(false), score(true) {}
	bool id;
	bool login;
	bool password;
	bool fleetsCode;
	bool planetsCode;
	bool tutoDisplayed;
	bool mainPlanet;
	bool score;
} _Player__isset;

class Player
{
public:

	static const char* ascii_fingerprint; // = "4862F5110DB18658E63B567FEBEF8456";
	static const uint8_t binary_fingerprint[16]; // = {0x48,0x62,0xF5,0x11,0x0D,0xB1,0x86,0x58,0xE6,0x3B,0x56,0x7F,0xEB,0xEF,0x84,0x56};

	Player() : id(0), login(), password(), score(0LL)
	{
	}

	virtual ~Player() throw() {}

	Player_ID id;
	std::string login;
	std::string password;
	CodeData fleetsCode;
	CodeData planetsCode;
	std::map<std::string, int32_t>  tutoDisplayed;
	Coord mainPlanet;
	int64_t score;

	_Player__isset __isset;

	void __set_id(const Player_ID val)
	{
		id = val;
	}

	void __set_login(const std::string& val)
	{
		login = val;
	}

	void __set_password(const std::string& val)
	{
		password = val;
	}

	void __set_fleetsCode(const CodeData& val)
	{
		fleetsCode = val;
	}

	void __set_planetsCode(const CodeData& val)
	{
		planetsCode = val;
	}

	void __set_tutoDisplayed(const std::map<std::string, int32_t>& val)
	{
		tutoDisplayed = val;
	}

	void __set_mainPlanet(const Coord& val)
	{
		mainPlanet = val;
	}

	void __set_score(const int64_t val)
	{
		score = val;
	}

	bool operator == (const Player& rhs) const
	{
		if(!(id == rhs.id))
			return false;
		if(!(login == rhs.login))
			return false;
		if(!(password == rhs.password))
			return false;
		if(!(fleetsCode == rhs.fleetsCode))
			return false;
		if(!(planetsCode == rhs.planetsCode))
			return false;
		if(!(tutoDisplayed == rhs.tutoDisplayed))
			return false;
		if(!(mainPlanet == rhs.mainPlanet))
			return false;
		if(!(score == rhs.score))
			return false;
		return true;
	}
	bool operator != (const Player& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Player&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Player& a, Player& b);

typedef struct _RessourceSet__isset
{
	_RessourceSet__isset() : tab(false) {}
	bool tab;
} _RessourceSet__isset;

class RessourceSet
{
public:

	static const char* ascii_fingerprint; // = "A803C54EAD95E24D90C5E66FB98EA72B";
	static const uint8_t binary_fingerprint[16]; // = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};

	RessourceSet()
	{
	}

	virtual ~RessourceSet() throw() {}

	std::vector<int32_t>  tab;

	_RessourceSet__isset __isset;

	void __set_tab(const std::vector<int32_t>& val)
	{
		tab = val;
	}

	bool operator == (const RessourceSet& rhs) const
	{
		if(!(tab == rhs.tab))
			return false;
		return true;
	}
	bool operator != (const RessourceSet& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const RessourceSet&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RessourceSet& a, RessourceSet& b);

typedef struct _PlanetTask__isset
{
	_PlanetTask__isset() : type(true), value(false), value2(false), lauchTime(false), duration(false), startCos(false), expired(false) {}
	bool type;
	bool value;
	bool value2;
	bool lauchTime;
	bool duration;
	bool startCos;
	bool expired;
} _PlanetTask__isset;

class PlanetTask
{
public:

	static const char* ascii_fingerprint; // = "19D77FE5BA23B2E932882446FD75CA83";
	static const uint8_t binary_fingerprint[16]; // = {0x19,0xD7,0x7F,0xE5,0xBA,0x23,0xB2,0xE9,0x32,0x88,0x24,0x46,0xFD,0x75,0xCA,0x83};

	PlanetTask() : type((PlanetTask_Enum::type)0), value(0), value2(0), lauchTime(0), duration(0), expired(0)
	{
		type = (PlanetTask_Enum::type)0;

	}

	virtual ~PlanetTask() throw() {}

	PlanetTask_Enum::type type;
	int32_t value;
	int32_t value2;
	int32_t lauchTime;
	int32_t duration;
	RessourceSet startCos;
	bool expired;

	_PlanetTask__isset __isset;

	void __set_type(const PlanetTask_Enum::type val)
	{
		type = val;
	}

	void __set_value(const int32_t val)
	{
		value = val;
	}

	void __set_value2(const int32_t val)
	{
		value2 = val;
	}

	void __set_lauchTime(const int32_t val)
	{
		lauchTime = val;
	}

	void __set_duration(const int32_t val)
	{
		duration = val;
	}

	void __set_startCos(const RessourceSet& val)
	{
		startCos = val;
	}

	void __set_expired(const bool val)
	{
		expired = val;
	}

	bool operator == (const PlanetTask& rhs) const
	{
		if(!(type == rhs.type))
			return false;
		if(!(value == rhs.value))
			return false;
		if(!(value2 == rhs.value2))
			return false;
		if(!(lauchTime == rhs.lauchTime))
			return false;
		if(!(duration == rhs.duration))
			return false;
		if(!(startCos == rhs.startCos))
			return false;
		if(!(expired == rhs.expired))
			return false;
		return true;
	}
	bool operator != (const PlanetTask& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const PlanetTask&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlanetTask& a, PlanetTask& b);

typedef struct _Building__isset
{
	_Building__isset() : index(false), price(false), coef(false) {}
	bool index;
	bool price;
	bool coef;
} _Building__isset;

class Building
{
public:

	static const char* ascii_fingerprint; // = "FD09D2C02D33B253CB5884E10282D019";
	static const uint8_t binary_fingerprint[16]; // = {0xFD,0x09,0xD2,0xC0,0x2D,0x33,0xB2,0x53,0xCB,0x58,0x84,0xE1,0x02,0x82,0xD0,0x19};

	Building() : index(0), coef(0)
	{
	}

	virtual ~Building() throw() {}

	int32_t index;
	RessourceSet price;
	double coef;

	_Building__isset __isset;

	void __set_index(const int32_t val)
	{
		index = val;
	}

	void __set_price(const RessourceSet& val)
	{
		price = val;
	}

	void __set_coef(const double val)
	{
		coef = val;
	}

	bool operator == (const Building& rhs) const
	{
		if(!(index == rhs.index))
			return false;
		if(!(price == rhs.price))
			return false;
		if(!(coef == rhs.coef))
			return false;
		return true;
	}
	bool operator != (const Building& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Building&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Building& a, Building& b);

typedef struct _Ship__isset
{
	_Ship__isset() : index(false), price(false), life(false), power(false) {}
	bool index;
	bool price;
	bool life;
	bool power;
} _Ship__isset;

class Ship
{
public:

	static const char* ascii_fingerprint; // = "947CF187B243FAE37B6AB77F54D6D8FA";
	static const uint8_t binary_fingerprint[16]; // = {0x94,0x7C,0xF1,0x87,0xB2,0x43,0xFA,0xE3,0x7B,0x6A,0xB7,0x7F,0x54,0xD6,0xD8,0xFA};

	Ship() : index(0), life(0), power(0)
	{
	}

	virtual ~Ship() throw() {}

	int32_t index;
	RessourceSet price;
	int32_t life;
	int32_t power;

	_Ship__isset __isset;

	void __set_index(const int32_t val)
	{
		index = val;
	}

	void __set_price(const RessourceSet& val)
	{
		price = val;
	}

	void __set_life(const int32_t val)
	{
		life = val;
	}

	void __set_power(const int32_t val)
	{
		power = val;
	}

	bool operator == (const Ship& rhs) const
	{
		if(!(index == rhs.index))
			return false;
		if(!(price == rhs.price))
			return false;
		if(!(life == rhs.life))
			return false;
		if(!(power == rhs.power))
			return false;
		return true;
	}
	bool operator != (const Ship& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Ship&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Ship& a, Ship& b);

typedef struct _Cannon__isset
{
	_Cannon__isset() : index(false), price(false), life(false), power(false) {}
	bool index;
	bool price;
	bool life;
	bool power;
} _Cannon__isset;

class Cannon
{
public:

	static const char* ascii_fingerprint; // = "947CF187B243FAE37B6AB77F54D6D8FA";
	static const uint8_t binary_fingerprint[16]; // = {0x94,0x7C,0xF1,0x87,0xB2,0x43,0xFA,0xE3,0x7B,0x6A,0xB7,0x7F,0x54,0xD6,0xD8,0xFA};

	Cannon() : index(0), life(0), power(0)
	{
	}

	virtual ~Cannon() throw() {}

	int32_t index;
	RessourceSet price;
	int32_t life;
	int32_t power;

	_Cannon__isset __isset;

	void __set_index(const int32_t val)
	{
		index = val;
	}

	void __set_price(const RessourceSet& val)
	{
		price = val;
	}

	void __set_life(const int32_t val)
	{
		life = val;
	}

	void __set_power(const int32_t val)
	{
		power = val;
	}

	bool operator == (const Cannon& rhs) const
	{
		if(!(index == rhs.index))
			return false;
		if(!(price == rhs.price))
			return false;
		if(!(life == rhs.life))
			return false;
		if(!(power == rhs.power))
			return false;
		return true;
	}
	bool operator != (const Cannon& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Cannon&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Cannon& a, Cannon& b);

typedef struct _FleetTask__isset
{
	_FleetTask__isset() : type(false), lauchTime(false), duration(false), position(false), expired(false) {}
	bool type;
	bool lauchTime;
	bool duration;
	bool position;
	bool expired;
} _FleetTask__isset;

class FleetTask
{
public:

	static const char* ascii_fingerprint; // = "0A2DD41FFDA24B0F547E4AACEDE12092";
	static const uint8_t binary_fingerprint[16]; // = {0x0A,0x2D,0xD4,0x1F,0xFD,0xA2,0x4B,0x0F,0x54,0x7E,0x4A,0xAC,0xED,0xE1,0x20,0x92};

	FleetTask() : type((FleetTask_Enum::type)0), lauchTime(0), duration(0), expired(0)
	{
	}

	virtual ~FleetTask() throw() {}

	FleetTask_Enum::type type;
	int32_t lauchTime;
	int32_t duration;
	Coord position;
	bool expired;

	_FleetTask__isset __isset;

	void __set_type(const FleetTask_Enum::type val)
	{
		type = val;
	}

	void __set_lauchTime(const int32_t val)
	{
		lauchTime = val;
	}

	void __set_duration(const int32_t val)
	{
		duration = val;
	}

	void __set_position(const Coord& val)
	{
		position = val;
	}

	void __set_expired(const bool val)
	{
		expired = val;
	}

	bool operator == (const FleetTask& rhs) const
	{
		if(!(type == rhs.type))
			return false;
		if(!(lauchTime == rhs.lauchTime))
			return false;
		if(!(duration == rhs.duration))
			return false;
		if(!(position == rhs.position))
			return false;
		if(!(expired == rhs.expired))
			return false;
		return true;
	}
	bool operator != (const FleetTask& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const FleetTask&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FleetTask& a, FleetTask& b);

typedef struct _Planet__isset
{
	_Planet__isset() : name(false), coord(false), playerId(false), buildingList(false), taskQueue(false), ressourceSet(false), eventList(false), cannonTab(false) {}
	bool name;
	bool coord;
	bool playerId;
	bool buildingList;
	bool taskQueue;
	bool ressourceSet;
	bool eventList;
	bool cannonTab;
} _Planet__isset;

class Planet
{
public:

	static const char* ascii_fingerprint; // = "E178018DDB3E0BA0A52EE04DCCAB8F93";
	static const uint8_t binary_fingerprint[16]; // = {0xE1,0x78,0x01,0x8D,0xDB,0x3E,0x0B,0xA0,0xA5,0x2E,0xE0,0x4D,0xCC,0xAB,0x8F,0x93};

	Planet() : name(), playerId(0)
	{
	}

	virtual ~Planet() throw() {}

	std::string name;
	Coord coord;
	Player_ID playerId;
	BuildingTab buildingList;
	std::vector<PlanetTask>  taskQueue;
	RessourceSet ressourceSet;
	std::vector<Event>  eventList;
	std::vector<int32_t>  cannonTab;

	_Planet__isset __isset;

	void __set_name(const std::string& val)
	{
		name = val;
	}

	void __set_coord(const Coord& val)
	{
		coord = val;
	}

	void __set_playerId(const Player_ID val)
	{
		playerId = val;
	}

	void __set_buildingList(const BuildingTab& val)
	{
		buildingList = val;
	}

	void __set_taskQueue(const std::vector<PlanetTask>& val)
	{
		taskQueue = val;
	}

	void __set_ressourceSet(const RessourceSet& val)
	{
		ressourceSet = val;
	}

	void __set_eventList(const std::vector<Event>& val)
	{
		eventList = val;
	}

	void __set_cannonTab(const std::vector<int32_t>& val)
	{
		cannonTab = val;
	}

	bool operator == (const Planet& rhs) const
	{
		if(!(name == rhs.name))
			return false;
		if(!(coord == rhs.coord))
			return false;
		if(!(playerId == rhs.playerId))
			return false;
		if(!(buildingList == rhs.buildingList))
			return false;
		if(!(taskQueue == rhs.taskQueue))
			return false;
		if(!(ressourceSet == rhs.ressourceSet))
			return false;
		if(!(eventList == rhs.eventList))
			return false;
		if(!(cannonTab == rhs.cannonTab))
			return false;
		return true;
	}
	bool operator != (const Planet& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Planet&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Planet& a, Planet& b);

typedef struct _Fleet__isset
{
	_Fleet__isset() : id(false), playerId(false), coord(false), origin(false), name(false), shipList(false), ressourceSet(false), taskQueue(false), eventList(false) {}
	bool id;
	bool playerId;
	bool coord;
	bool origin;
	bool name;
	bool shipList;
	bool ressourceSet;
	bool taskQueue;
	bool eventList;
} _Fleet__isset;

class Fleet
{
public:

	static const char* ascii_fingerprint; // = "5BC565BA35524079BC6AFEB1C4918CA7";
	static const uint8_t binary_fingerprint[16]; // = {0x5B,0xC5,0x65,0xBA,0x35,0x52,0x40,0x79,0xBC,0x6A,0xFE,0xB1,0xC4,0x91,0x8C,0xA7};

	Fleet() : id(0), playerId(0), name()
	{
	}

	virtual ~Fleet() throw() {}

	Fleet_ID id;
	Player_ID playerId;
	Coord coord;
	Coord origin;
	std::string name;
	Fleet_ShipTab shipList;
	RessourceSet ressourceSet;
	std::vector<FleetTask>  taskQueue;
	std::vector<Event>  eventList;

	_Fleet__isset __isset;

	void __set_id(const Fleet_ID val)
	{
		id = val;
	}

	void __set_playerId(const Player_ID val)
	{
		playerId = val;
	}

	void __set_coord(const Coord& val)
	{
		coord = val;
	}

	void __set_origin(const Coord& val)
	{
		origin = val;
	}

	void __set_name(const std::string& val)
	{
		name = val;
	}

	void __set_shipList(const Fleet_ShipTab& val)
	{
		shipList = val;
	}

	void __set_ressourceSet(const RessourceSet& val)
	{
		ressourceSet = val;
	}

	void __set_taskQueue(const std::vector<FleetTask>& val)
	{
		taskQueue = val;
	}

	void __set_eventList(const std::vector<Event>& val)
	{
		eventList = val;
	}

	bool operator == (const Fleet& rhs) const
	{
		if(!(id == rhs.id))
			return false;
		if(!(playerId == rhs.playerId))
			return false;
		if(!(coord == rhs.coord))
			return false;
		if(!(origin == rhs.origin))
			return false;
		if(!(name == rhs.name))
			return false;
		if(!(shipList == rhs.shipList))
			return false;
		if(!(ressourceSet == rhs.ressourceSet))
			return false;
		if(!(taskQueue == rhs.taskQueue))
			return false;
		if(!(eventList == rhs.eventList))
			return false;
		return true;
	}
	bool operator != (const Fleet& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Fleet&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Fleet& a, Fleet& b);

typedef struct _FleetAction__isset
{
	_FleetAction__isset() : action(false), target(false) {}
	bool action;
	bool target;
} _FleetAction__isset;

class FleetAction
{
public:

	static const char* ascii_fingerprint; // = "096C62D67189AD8DEE6942D975E45799";
	static const uint8_t binary_fingerprint[16]; // = {0x09,0x6C,0x62,0xD6,0x71,0x89,0xAD,0x8D,0xEE,0x69,0x42,0xD9,0x75,0xE4,0x57,0x99};

	FleetAction() : action((FleetAction_Type::type)0)
	{
	}

	virtual ~FleetAction() throw() {}

	FleetAction_Type::type action;
	Coord target;

	_FleetAction__isset __isset;

	void __set_action(const FleetAction_Type::type val)
	{
		action = val;
	}

	void __set_target(const Coord& val)
	{
		target = val;
	}

	bool operator == (const FleetAction& rhs) const
	{
		if(!(action == rhs.action))
			return false;
		if(!(target == rhs.target))
			return false;
		return true;
	}
	bool operator != (const FleetAction& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const FleetAction&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FleetAction& a, FleetAction& b);

typedef struct _FleetFightInfo__isset
{
	_FleetFightInfo__isset() : before(false), after(false) {}
	bool before;
	bool after;
} _FleetFightInfo__isset;

class FleetFightInfo
{
public:

	static const char* ascii_fingerprint; // = "72586A296E2C8DAED7B4C26002A639BF";
	static const uint8_t binary_fingerprint[16]; // = {0x72,0x58,0x6A,0x29,0x6E,0x2C,0x8D,0xAE,0xD7,0xB4,0xC2,0x60,0x02,0xA6,0x39,0xBF};

	FleetFightInfo()
	{
	}

	virtual ~FleetFightInfo() throw() {}

	Fleet before;
	Fleet after;

	_FleetFightInfo__isset __isset;

	void __set_before(const Fleet& val)
	{
		before = val;
	}

	void __set_after(const Fleet& val)
	{
		after = val;
	}

	bool operator == (const FleetFightInfo& rhs) const
	{
		if(!(before == rhs.before))
			return false;
		if(!(after == rhs.after))
			return false;
		return true;
	}
	bool operator != (const FleetFightInfo& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const FleetFightInfo&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FleetFightInfo& a, FleetFightInfo& b);

typedef struct _FleetReport__isset
{
	_FleetReport__isset() : isDead(false), hasFight(false), enemySet(false), fightInfo(false) {}
	bool isDead;
	bool hasFight;
	bool enemySet;
	bool fightInfo;
} _FleetReport__isset;

class FleetReport
{
public:

	static const char* ascii_fingerprint; // = "F021743048F9F928F48E5919EA96790F";
	static const uint8_t binary_fingerprint[16]; // = {0xF0,0x21,0x74,0x30,0x48,0xF9,0xF9,0x28,0xF4,0x8E,0x59,0x19,0xEA,0x96,0x79,0x0F};

	FleetReport() : isDead(0), hasFight(0)
	{
	}

	virtual ~FleetReport() throw() {}

	bool isDead;
	bool hasFight;
	std::set<int32_t>  enemySet;
	FleetFightInfo fightInfo;

	_FleetReport__isset __isset;

	void __set_isDead(const bool val)
	{
		isDead = val;
	}

	void __set_hasFight(const bool val)
	{
		hasFight = val;
	}

	void __set_enemySet(const std::set<int32_t>& val)
	{
		enemySet = val;
	}

	void __set_fightInfo(const FleetFightInfo& val)
	{
		fightInfo = val;
	}

	bool operator == (const FleetReport& rhs) const
	{
		if(!(isDead == rhs.isDead))
			return false;
		if(!(hasFight == rhs.hasFight))
			return false;
		if(!(enemySet == rhs.enemySet))
			return false;
		if(!(fightInfo == rhs.fightInfo))
			return false;
		return true;
	}
	bool operator != (const FleetReport& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const FleetReport&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FleetReport& a, FleetReport& b);

typedef struct _PlanetFightInfo__isset
{
	_PlanetFightInfo__isset() : before(false), after(false) {}
	bool before;
	bool after;
} _PlanetFightInfo__isset;

class PlanetFightInfo
{
public:

	static const char* ascii_fingerprint; // = "58D0452C00146C814E77E7A0E59D7B69";
	static const uint8_t binary_fingerprint[16]; // = {0x58,0xD0,0x45,0x2C,0x00,0x14,0x6C,0x81,0x4E,0x77,0xE7,0xA0,0xE5,0x9D,0x7B,0x69};

	PlanetFightInfo()
	{
	}

	virtual ~PlanetFightInfo() throw() {}

	Planet before;
	Planet after;

	_PlanetFightInfo__isset __isset;

	void __set_before(const Planet& val)
	{
		before = val;
	}

	void __set_after(const Planet& val)
	{
		after = val;
	}

	bool operator == (const PlanetFightInfo& rhs) const
	{
		if(!(before == rhs.before))
			return false;
		if(!(after == rhs.after))
			return false;
		return true;
	}
	bool operator != (const PlanetFightInfo& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const PlanetFightInfo&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlanetFightInfo& a, PlanetFightInfo& b);

typedef struct _PlanetReport__isset
{
	_PlanetReport__isset() : isDead(false), hasFight(false), enemySet(false), fightInfo(false) {}
	bool isDead;
	bool hasFight;
	bool enemySet;
	bool fightInfo;
} _PlanetReport__isset;

class PlanetReport
{
public:

	static const char* ascii_fingerprint; // = "5A447E0DC2E3D0415B74B5511AE0EB98";
	static const uint8_t binary_fingerprint[16]; // = {0x5A,0x44,0x7E,0x0D,0xC2,0xE3,0xD0,0x41,0x5B,0x74,0xB5,0x51,0x1A,0xE0,0xEB,0x98};

	PlanetReport() : isDead(0), hasFight(0)
	{
	}

	virtual ~PlanetReport() throw() {}

	bool isDead;
	bool hasFight;
	std::set<int32_t>  enemySet;
	PlanetFightInfo fightInfo;

	_PlanetReport__isset __isset;

	void __set_isDead(const bool val)
	{
		isDead = val;
	}

	void __set_hasFight(const bool val)
	{
		hasFight = val;
	}

	void __set_enemySet(const std::set<int32_t>& val)
	{
		enemySet = val;
	}

	void __set_fightInfo(const PlanetFightInfo& val)
	{
		fightInfo = val;
	}

	bool operator == (const PlanetReport& rhs) const
	{
		if(!(isDead == rhs.isDead))
			return false;
		if(!(hasFight == rhs.hasFight))
			return false;
		if(!(enemySet == rhs.enemySet))
			return false;
		if(!(fightInfo == rhs.fightInfo))
			return false;
		return true;
	}
	bool operator != (const PlanetReport& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const PlanetReport&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlanetReport& a, PlanetReport& b);

typedef struct _FightReport__isset
{
	_FightReport__isset() : fleetList(false), hasPlanet(false), planet(false) {}
	bool fleetList;
	bool hasPlanet;
	bool planet;
} _FightReport__isset;

class FightReport
{
public:

	static const char* ascii_fingerprint; // = "21A78A7AC08C0BFA132F7144F0C0EA14";
	static const uint8_t binary_fingerprint[16]; // = {0x21,0xA7,0x8A,0x7A,0xC0,0x8C,0x0B,0xFA,0x13,0x2F,0x71,0x44,0xF0,0xC0,0xEA,0x14};

	FightReport() : hasPlanet(0)
	{
	}

	virtual ~FightReport() throw() {}

	std::vector<FleetReport>  fleetList;
	bool hasPlanet;
	PlanetReport planet;

	_FightReport__isset __isset;

	void __set_fleetList(const std::vector<FleetReport>& val)
	{
		fleetList = val;
	}

	void __set_hasPlanet(const bool val)
	{
		hasPlanet = val;
	}

	void __set_planet(const PlanetReport& val)
	{
		planet = val;
		__isset.planet = true;
	}

	bool operator == (const FightReport& rhs) const
	{
		if(!(fleetList == rhs.fleetList))
			return false;
		if(!(hasPlanet == rhs.hasPlanet))
			return false;
		if(__isset.planet != rhs.__isset.planet)
			return false;
		else if(__isset.planet && !(planet == rhs.planet))
			return false;
		return true;
	}
	bool operator != (const FightReport& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const FightReport&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FightReport& a, FightReport& b);

typedef struct _Universe__isset
{
	_Universe__isset() : playerMap(false), planetMap(false), fleetMap(false), reportMap(false), nextPlayerID(false), nextFleetID(false), time(false) {}
	bool playerMap;
	bool planetMap;
	bool fleetMap;
	bool reportMap;
	bool nextPlayerID;
	bool nextFleetID;
	bool time;
} _Universe__isset;

class Universe
{
public:

	static const char* ascii_fingerprint; // = "FF049B27778334A529CB5EA072BC4FD2";
	static const uint8_t binary_fingerprint[16]; // = {0xFF,0x04,0x9B,0x27,0x77,0x83,0x34,0xA5,0x29,0xCB,0x5E,0xA0,0x72,0xBC,0x4F,0xD2};

	Universe() : nextPlayerID(0), nextFleetID(0), time(0)
	{
	}

	virtual ~Universe() throw() {}

	Universe_PlayerMap playerMap;
	Universe_PlanetMap planetMap;
	std::map<Fleet_ID, Fleet>  fleetMap;
	ReportMap reportMap;
	Player_ID nextPlayerID;
	Fleet_ID nextFleetID;
	int32_t time;

	_Universe__isset __isset;

	void __set_playerMap(const Universe_PlayerMap& val)
	{
		playerMap = val;
	}

	void __set_planetMap(const Universe_PlanetMap& val)
	{
		planetMap = val;
	}

	void __set_fleetMap(const std::map<Fleet_ID, Fleet>& val)
	{
		fleetMap = val;
	}

	void __set_reportMap(const ReportMap& val)
	{
		reportMap = val;
	}

	void __set_nextPlayerID(const Player_ID val)
	{
		nextPlayerID = val;
	}

	void __set_nextFleetID(const Fleet_ID val)
	{
		nextFleetID = val;
	}

	void __set_time(const int32_t val)
	{
		time = val;
	}

	bool operator == (const Universe& rhs) const
	{
		if(!(playerMap == rhs.playerMap))
			return false;
		if(!(planetMap == rhs.planetMap))
			return false;
		if(!(fleetMap == rhs.fleetMap))
			return false;
		if(!(reportMap == rhs.reportMap))
			return false;
		if(!(nextPlayerID == rhs.nextPlayerID))
			return false;
		if(!(nextFleetID == rhs.nextFleetID))
			return false;
		if(!(time == rhs.time))
			return false;
		return true;
	}
	bool operator != (const Universe& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Universe&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Universe& a, Universe& b);

typedef struct _OptionalPlayer__isset
{
	_OptionalPlayer__isset() : player(false) {}
	bool player;
} _OptionalPlayer__isset;

class OptionalPlayer
{
public:

	static const char* ascii_fingerprint; // = "38C0E72FCEA186061C3C2B38B437865E";
	static const uint8_t binary_fingerprint[16]; // = {0x38,0xC0,0xE7,0x2F,0xCE,0xA1,0x86,0x06,0x1C,0x3C,0x2B,0x38,0xB4,0x37,0x86,0x5E};

	OptionalPlayer()
	{
	}

	virtual ~OptionalPlayer() throw() {}

	Player player;

	_OptionalPlayer__isset __isset;

	void __set_player(const Player& val)
	{
		player = val;
		__isset.player = true;
	}

	bool operator == (const OptionalPlayer& rhs) const
	{
		if(__isset.player != rhs.__isset.player)
			return false;
		else if(__isset.player && !(player == rhs.player))
			return false;
		return true;
	}
	bool operator != (const OptionalPlayer& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const OptionalPlayer&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(OptionalPlayer& a, OptionalPlayer& b);

typedef struct _TimeInfo__isset
{
	_TimeInfo__isset() : roundDuration(false), univTime(false) {}
	bool roundDuration;
	bool univTime;
} _TimeInfo__isset;

class TimeInfo
{
public:

	static const char* ascii_fingerprint; // = "9EA78140CD5F29ED0DA93A6F86CC34E1";
	static const uint8_t binary_fingerprint[16]; // = {0x9E,0xA7,0x81,0x40,0xCD,0x5F,0x29,0xED,0x0D,0xA9,0x3A,0x6F,0x86,0xCC,0x34,0xE1};

	TimeInfo() : roundDuration(0), univTime(0)
	{
	}

	virtual ~TimeInfo() throw() {}

	double roundDuration;
	double univTime;

	_TimeInfo__isset __isset;

	void __set_roundDuration(const double val)
	{
		roundDuration = val;
	}

	void __set_univTime(const double val)
	{
		univTime = val;
	}

	bool operator == (const TimeInfo& rhs) const
	{
		if(!(roundDuration == rhs.roundDuration))
			return false;
		if(!(univTime == rhs.univTime))
			return false;
		return true;
	}
	bool operator != (const TimeInfo& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const TimeInfo&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TimeInfo& a, TimeInfo& b);

typedef struct _FleetList__isset
{
	_FleetList__isset() : fleetList(false), planetList(false), fleetCount(false) {}
	bool fleetList;
	bool planetList;
	bool fleetCount;
} _FleetList__isset;

class FleetList
{
public:

	static const char* ascii_fingerprint; // = "BF4137B84F4CA008715911A6B72A13B6";
	static const uint8_t binary_fingerprint[16]; // = {0xBF,0x41,0x37,0xB8,0x4F,0x4C,0xA0,0x08,0x71,0x59,0x11,0xA6,0xB7,0x2A,0x13,0xB6};

	FleetList() : fleetCount(0)
	{
	}

	virtual ~FleetList() throw() {}

	std::vector<Fleet>  fleetList;
	std::vector<Planet>  planetList;
	int32_t fleetCount;

	_FleetList__isset __isset;

	void __set_fleetList(const std::vector<Fleet>& val)
	{
		fleetList = val;
	}

	void __set_planetList(const std::vector<Planet>& val)
	{
		planetList = val;
	}

	void __set_fleetCount(const int32_t val)
	{
		fleetCount = val;
	}

	bool operator == (const FleetList& rhs) const
	{
		if(!(fleetList == rhs.fleetList))
			return false;
		if(!(planetList == rhs.planetList))
			return false;
		if(!(fleetCount == rhs.fleetCount))
			return false;
		return true;
	}
	bool operator != (const FleetList& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const FleetList&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FleetList& a, FleetList& b);

typedef struct _PlanetList__isset
{
	_PlanetList__isset() : planetList(false), planetCount(false) {}
	bool planetList;
	bool planetCount;
} _PlanetList__isset;

class PlanetList
{
public:

	static const char* ascii_fingerprint; // = "18C7E957C40A9FD4002304AEBEA00438";
	static const uint8_t binary_fingerprint[16]; // = {0x18,0xC7,0xE9,0x57,0xC4,0x0A,0x9F,0xD4,0x00,0x23,0x04,0xAE,0xBE,0xA0,0x04,0x38};

	PlanetList() : planetCount(0)
	{
	}

	virtual ~PlanetList() throw() {}

	std::vector<Planet>  planetList;
	int32_t planetCount;

	_PlanetList__isset __isset;

	void __set_planetList(const std::vector<Planet>& val)
	{
		planetList = val;
	}

	void __set_planetCount(const int32_t val)
	{
		planetCount = val;
	}

	bool operator == (const PlanetList& rhs) const
	{
		if(!(planetList == rhs.planetList))
			return false;
		if(!(planetCount == rhs.planetCount))
			return false;
		return true;
	}
	bool operator != (const PlanetList& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const PlanetList&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlanetList& a, PlanetList& b);

} // namespace

#endif
