/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift_types.h"

#include <algorithm>

namespace ndw
{

int _kEvent_TypeValues[] =
{
	Event_Type::FleetCodeError,
	Event_Type::FleetCodeExecError,
	Event_Type::PlanetCodeError,
	Event_Type::PlanetCodeExecError,
	Event_Type::Upgraded,
	Event_Type::ShipMade,
	Event_Type::PlanetHarvested,
	Event_Type::FleetWin,
	Event_Type::FleetDraw,
	Event_Type::FleetsGather,
	Event_Type::PlanetColonized,
	Event_Type::FleetLose,
	Event_Type::FleetDrop,
	Event_Type::PlanetLose,
	Event_Type::PlanetWin,
	Event_Type::CannonMade,
	Event_Type::Count
};
const char* _kEvent_TypeNames[] =
{
	"FleetCodeError",
	"FleetCodeExecError",
	"PlanetCodeError",
	"PlanetCodeExecError",
	"Upgraded",
	"ShipMade",
	"PlanetHarvested",
	"FleetWin",
	"FleetDraw",
	"FleetsGather",
	"PlanetColonized",
	"FleetLose",
	"FleetDrop",
	"PlanetLose",
	"PlanetWin",
	"CannonMade",
	"Count"
};
const std::map<int, const char*> _Event_Type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(17, _kEvent_TypeValues, _kEvent_TypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRessourceValues[] =
{
	Ressource::Metal,
	Ressource::Carbon,
	Ressource::Loicium,
	Ressource::Count
};
const char* _kRessourceNames[] =
{
	"Metal",
	"Carbon",
	"Loicium",
	"Count"
};
const std::map<int, const char*> _Ressource_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kRessourceValues, _kRessourceNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPlanetTask_EnumValues[] =
{
	PlanetTask_Enum::UpgradeBuilding,
	PlanetTask_Enum::MakeShip,
	PlanetTask_Enum::MakeCannon,
	PlanetTask_Enum::Count
};
const char* _kPlanetTask_EnumNames[] =
{
	"UpgradeBuilding",
	"MakeShip",
	"MakeCannon",
	"Count"
};
const std::map<int, const char*> _PlanetTask_Enum_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPlanetTask_EnumValues, _kPlanetTask_EnumNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kBuilding_EnumValues[] =
{
	Building_Enum::CommandCenter,
	Building_Enum::MetalMine,
	Building_Enum::CarbonMine,
	Building_Enum::LoiciumFilter,
	Building_Enum::Factory,
	Building_Enum::Laboratory,
	Building_Enum::CarbonicCentral,
	Building_Enum::SolarCentral,
	Building_Enum::GeothermicCentral,
	Building_Enum::Count
};
const char* _kBuilding_EnumNames[] =
{
	"CommandCenter",
	"MetalMine",
	"CarbonMine",
	"LoiciumFilter",
	"Factory",
	"Laboratory",
	"CarbonicCentral",
	"SolarCentral",
	"GeothermicCentral",
	"Count"
};
const std::map<int, const char*> _Building_Enum_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kBuilding_EnumValues, _kBuilding_EnumNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kShip_EnumValues[] =
{
	Ship_Enum::Mosquito,
	Ship_Enum::Hornet,
	Ship_Enum::Vulture,
	Ship_Enum::Dragon,
	Ship_Enum::Behemoth,
	Ship_Enum::Azathoth,
	Ship_Enum::Queen,
	Ship_Enum::Cargo,
	Ship_Enum::LargeCargo,
	Ship_Enum::Count
};
const char* _kShip_EnumNames[] =
{
	"Mosquito",
	"Hornet",
	"Vulture",
	"Dragon",
	"Behemoth",
	"Azathoth",
	"Queen",
	"Cargo",
	"LargeCargo",
	"Count"
};
const std::map<int, const char*> _Ship_Enum_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kShip_EnumValues, _kShip_EnumNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCannon_EnumValues[] =
{
	Cannon_Enum::Cannon1,
	Cannon_Enum::Cannon2,
	Cannon_Enum::Cannon3,
	Cannon_Enum::Cannon4,
	Cannon_Enum::Cannon5,
	Cannon_Enum::Cannon6,
	Cannon_Enum::Count
};
const char* _kCannon_EnumNames[] =
{
	"Cannon1",
	"Cannon2",
	"Cannon3",
	"Cannon4",
	"Cannon5",
	"Cannon6",
	"Count"
};
const std::map<int, const char*> _Cannon_Enum_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kCannon_EnumValues, _kCannon_EnumNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFleetTask_EnumValues[] =
{
	FleetTask_Enum::Move,
	FleetTask_Enum::Harvest,
	FleetTask_Enum::Colonize,
	FleetTask_Enum::Count
};
const char* _kFleetTask_EnumNames[] =
{
	"Move",
	"Harvest",
	"Colonize",
	"Count"
};
const std::map<int, const char*> _FleetTask_Enum_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kFleetTask_EnumValues, _kFleetTask_EnumNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFleetAction_TypeValues[] =
{
	FleetAction_Type::Nothing,
	FleetAction_Type::Move,
	FleetAction_Type::Harvest,
	FleetAction_Type::Colonize
};
const char* _kFleetAction_TypeNames[] =
{
	"Nothing",
	"Move",
	"Harvest",
	"Colonize"
};
const std::map<int, const char*> _FleetAction_Type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kFleetAction_TypeValues, _kFleetAction_TypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSort_TypeValues[] =
{
	Sort_Type::Name,
	Sort_Type::X,
	Sort_Type::Y,
	Sort_Type::Z,
	Sort_Type::M,
	Sort_Type::C,
	Sort_Type::L
};
const char* _kSort_TypeNames[] =
{
	"Name",
	"X",
	"Y",
	"Z",
	"M",
	"C",
	"L"
};
const std::map<int, const char*> _Sort_Type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kSort_TypeValues, _kSort_TypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Coord::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t Coord::binary_fingerprint[16] = {0x64, 0x35, 0xB3, 0x9C, 0x87, 0xAB, 0x0E, 0x30, 0xF3, 0x0B, 0xED, 0xEF, 0xD7, 0x32, 0x8C, 0x0D};

uint32_t Coord::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->X);
				this->__isset.X = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->Y);
				this->__isset.Y = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->Z);
				this->__isset.Z = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Coord::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Coord");

	xfer += oprot->writeFieldBegin("X", ::apache::thrift::protocol::T_I32, 1);
	xfer += oprot->writeI32(this->X);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("Y", ::apache::thrift::protocol::T_I32, 2);
	xfer += oprot->writeI32(this->Y);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("Z", ::apache::thrift::protocol::T_I32, 3);
	xfer += oprot->writeI32(this->Z);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Coord& a, Coord& b)
{
	using ::std::swap;
	swap(a.X, b.X);
	swap(a.Y, b.Y);
	swap(a.Z, b.Z);
	swap(a.__isset, b.__isset);
}

const char* Event::ascii_fingerprint = "9C6D5D1EFAEA56027D176F213E40700B";
const uint8_t Event::binary_fingerprint[16] = {0x9C, 0x6D, 0x5D, 0x1E, 0xFA, 0xEA, 0x56, 0x02, 0x7D, 0x17, 0x6F, 0x21, 0x3E, 0x40, 0x70, 0x0B};

uint32_t Event::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->id);
				this->__isset.id = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->time);
				this->__isset.time = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				int32_t ecast0;
				xfer += iprot->readI32(ecast0);
				this->type = (Event_Type::type)ecast0;
				this->__isset.type = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 4:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->comment);
				this->__isset.comment = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 5:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->value);
				this->__isset.value = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 6:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->viewed);
				this->__isset.viewed = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Event::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Event");

	xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
	xfer += oprot->writeI32(this->id);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I32, 2);
	xfer += oprot->writeI32(this->time);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
	xfer += oprot->writeI32((int32_t)this->type);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
	xfer += oprot->writeString(this->comment);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 5);
	xfer += oprot->writeI32(this->value);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("viewed", ::apache::thrift::protocol::T_BOOL, 6);
	xfer += oprot->writeBool(this->viewed);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Event& a, Event& b)
{
	using ::std::swap;
	swap(a.id, b.id);
	swap(a.time, b.time);
	swap(a.type, b.type);
	swap(a.comment, b.comment);
	swap(a.value, b.value);
	swap(a.viewed, b.viewed);
	swap(a.__isset, b.__isset);
}

const char* CodeData::ascii_fingerprint = "8C927FC383653B5F72B71AAB46CCBF55";
const uint8_t CodeData::binary_fingerprint[16] = {0x8C, 0x92, 0x7F, 0xC3, 0x83, 0x65, 0x3B, 0x5F, 0x72, 0xB7, 0x1A, 0xAB, 0x46, 0xCC, 0xBF, 0x55};

uint32_t CodeData::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->blocklyCode);
				this->__isset.blocklyCode = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->code);
				this->__isset.code = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 4:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->lastError);
				this->__isset.lastError = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t CodeData::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("CodeData");

	xfer += oprot->writeFieldBegin("blocklyCode", ::apache::thrift::protocol::T_STRING, 1);
	xfer += oprot->writeString(this->blocklyCode);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 2);
	xfer += oprot->writeString(this->code);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("lastError", ::apache::thrift::protocol::T_STRING, 4);
	xfer += oprot->writeString(this->lastError);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(CodeData& a, CodeData& b)
{
	using ::std::swap;
	swap(a.blocklyCode, b.blocklyCode);
	swap(a.code, b.code);
	swap(a.lastError, b.lastError);
	swap(a.__isset, b.__isset);
}

const char* Player::ascii_fingerprint = "4862F5110DB18658E63B567FEBEF8456";
const uint8_t Player::binary_fingerprint[16] = {0x48, 0x62, 0xF5, 0x11, 0x0D, 0xB1, 0x86, 0x58, 0xE6, 0x3B, 0x56, 0x7F, 0xEB, 0xEF, 0x84, 0x56};

uint32_t Player::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->id);
				this->__isset.id = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->login);
				this->__isset.login = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->password);
				this->__isset.password = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 4:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->fleetsCode.read(iprot);
				this->__isset.fleetsCode = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 5:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->planetsCode.read(iprot);
				this->__isset.planetsCode = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 7:
			if(ftype == ::apache::thrift::protocol::T_MAP)
			{
				{
					this->tutoDisplayed.clear();
					uint32_t _size1;
					::apache::thrift::protocol::TType _ktype2;
					::apache::thrift::protocol::TType _vtype3;
					xfer += iprot->readMapBegin(_ktype2, _vtype3, _size1);
					uint32_t _i5;
					for(_i5 = 0; _i5 < _size1; ++_i5)
					{
						std::string _key6;
						xfer += iprot->readString(_key6);
						int32_t& _val7 = this->tutoDisplayed[_key6];
						xfer += iprot->readI32(_val7);
					}
					xfer += iprot->readMapEnd();
				}
				this->__isset.tutoDisplayed = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 8:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->mainPlanet.read(iprot);
				this->__isset.mainPlanet = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 9:
			if(ftype == ::apache::thrift::protocol::T_I64)
			{
				xfer += iprot->readI64(this->score);
				this->__isset.score = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Player::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Player");

	xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
	xfer += oprot->writeI32(this->id);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_STRING, 2);
	xfer += oprot->writeString(this->login);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 3);
	xfer += oprot->writeString(this->password);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("fleetsCode", ::apache::thrift::protocol::T_STRUCT, 4);
	xfer += this->fleetsCode.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("planetsCode", ::apache::thrift::protocol::T_STRUCT, 5);
	xfer += this->planetsCode.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("tutoDisplayed", ::apache::thrift::protocol::T_MAP, 7);
	{
		xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->tutoDisplayed.size()));
		std::map<std::string, int32_t> ::const_iterator _iter8;
		for(_iter8 = this->tutoDisplayed.begin(); _iter8 != this->tutoDisplayed.end(); ++_iter8)
		{
			xfer += oprot->writeString(_iter8->first);
			xfer += oprot->writeI32(_iter8->second);
		}
		xfer += oprot->writeMapEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("mainPlanet", ::apache::thrift::protocol::T_STRUCT, 8);
	xfer += this->mainPlanet.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("score", ::apache::thrift::protocol::T_I64, 9);
	xfer += oprot->writeI64(this->score);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Player& a, Player& b)
{
	using ::std::swap;
	swap(a.id, b.id);
	swap(a.login, b.login);
	swap(a.password, b.password);
	swap(a.fleetsCode, b.fleetsCode);
	swap(a.planetsCode, b.planetsCode);
	swap(a.tutoDisplayed, b.tutoDisplayed);
	swap(a.mainPlanet, b.mainPlanet);
	swap(a.score, b.score);
	swap(a.__isset, b.__isset);
}

const char* RessourceSet::ascii_fingerprint = "A803C54EAD95E24D90C5E66FB98EA72B";
const uint8_t RessourceSet::binary_fingerprint[16] = {0xA8, 0x03, 0xC5, 0x4E, 0xAD, 0x95, 0xE2, 0x4D, 0x90, 0xC5, 0xE6, 0x6F, 0xB9, 0x8E, 0xA7, 0x2B};

uint32_t RessourceSet::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->tab.clear();
					uint32_t _size9;
					::apache::thrift::protocol::TType _etype12;
					xfer += iprot->readListBegin(_etype12, _size9);
					this->tab.resize(_size9);
					uint32_t _i13;
					for(_i13 = 0; _i13 < _size9; ++_i13)
					{
						xfer += iprot->readI32(this->tab[_i13]);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.tab = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t RessourceSet::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("RessourceSet");

	xfer += oprot->writeFieldBegin("tab", ::apache::thrift::protocol::T_LIST, 1);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->tab.size()));
		std::vector<int32_t> ::const_iterator _iter14;
		for(_iter14 = this->tab.begin(); _iter14 != this->tab.end(); ++_iter14)
		{
			xfer += oprot->writeI32((*_iter14));
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(RessourceSet& a, RessourceSet& b)
{
	using ::std::swap;
	swap(a.tab, b.tab);
	swap(a.__isset, b.__isset);
}

const char* PlanetTask::ascii_fingerprint = "19D77FE5BA23B2E932882446FD75CA83";
const uint8_t PlanetTask::binary_fingerprint[16] = {0x19, 0xD7, 0x7F, 0xE5, 0xBA, 0x23, 0xB2, 0xE9, 0x32, 0x88, 0x24, 0x46, 0xFD, 0x75, 0xCA, 0x83};

uint32_t PlanetTask::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				int32_t ecast15;
				xfer += iprot->readI32(ecast15);
				this->type = (PlanetTask_Enum::type)ecast15;
				this->__isset.type = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->value);
				this->__isset.value = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->value2);
				this->__isset.value2 = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 4:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->lauchTime);
				this->__isset.lauchTime = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 5:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->duration);
				this->__isset.duration = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 6:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->startCos.read(iprot);
				this->__isset.startCos = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 7:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->expired);
				this->__isset.expired = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t PlanetTask::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("PlanetTask");

	xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
	xfer += oprot->writeI32((int32_t)this->type);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 2);
	xfer += oprot->writeI32(this->value);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("value2", ::apache::thrift::protocol::T_I32, 3);
	xfer += oprot->writeI32(this->value2);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("lauchTime", ::apache::thrift::protocol::T_I32, 4);
	xfer += oprot->writeI32(this->lauchTime);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_I32, 5);
	xfer += oprot->writeI32(this->duration);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("startCos", ::apache::thrift::protocol::T_STRUCT, 6);
	xfer += this->startCos.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("expired", ::apache::thrift::protocol::T_BOOL, 7);
	xfer += oprot->writeBool(this->expired);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(PlanetTask& a, PlanetTask& b)
{
	using ::std::swap;
	swap(a.type, b.type);
	swap(a.value, b.value);
	swap(a.value2, b.value2);
	swap(a.lauchTime, b.lauchTime);
	swap(a.duration, b.duration);
	swap(a.startCos, b.startCos);
	swap(a.expired, b.expired);
	swap(a.__isset, b.__isset);
}

const char* Building::ascii_fingerprint = "FD09D2C02D33B253CB5884E10282D019";
const uint8_t Building::binary_fingerprint[16] = {0xFD, 0x09, 0xD2, 0xC0, 0x2D, 0x33, 0xB2, 0x53, 0xCB, 0x58, 0x84, 0xE1, 0x02, 0x82, 0xD0, 0x19};

uint32_t Building::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->index);
				this->__isset.index = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->price.read(iprot);
				this->__isset.price = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_DOUBLE)
			{
				xfer += iprot->readDouble(this->coef);
				this->__isset.coef = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Building::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Building");

	xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->index);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_STRUCT, 20);
	xfer += this->price.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("coef", ::apache::thrift::protocol::T_DOUBLE, 30);
	xfer += oprot->writeDouble(this->coef);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Building& a, Building& b)
{
	using ::std::swap;
	swap(a.index, b.index);
	swap(a.price, b.price);
	swap(a.coef, b.coef);
	swap(a.__isset, b.__isset);
}

const char* Ship::ascii_fingerprint = "947CF187B243FAE37B6AB77F54D6D8FA";
const uint8_t Ship::binary_fingerprint[16] = {0x94, 0x7C, 0xF1, 0x87, 0xB2, 0x43, 0xFA, 0xE3, 0x7B, 0x6A, 0xB7, 0x7F, 0x54, 0xD6, 0xD8, 0xFA};

uint32_t Ship::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->index);
				this->__isset.index = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->price.read(iprot);
				this->__isset.price = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->life);
				this->__isset.life = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->power);
				this->__isset.power = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Ship::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Ship");

	xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->index);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_STRUCT, 20);
	xfer += this->price.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("life", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32(this->life);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("power", ::apache::thrift::protocol::T_I32, 40);
	xfer += oprot->writeI32(this->power);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Ship& a, Ship& b)
{
	using ::std::swap;
	swap(a.index, b.index);
	swap(a.price, b.price);
	swap(a.life, b.life);
	swap(a.power, b.power);
	swap(a.__isset, b.__isset);
}

const char* Cannon::ascii_fingerprint = "947CF187B243FAE37B6AB77F54D6D8FA";
const uint8_t Cannon::binary_fingerprint[16] = {0x94, 0x7C, 0xF1, 0x87, 0xB2, 0x43, 0xFA, 0xE3, 0x7B, 0x6A, 0xB7, 0x7F, 0x54, 0xD6, 0xD8, 0xFA};

uint32_t Cannon::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->index);
				this->__isset.index = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->price.read(iprot);
				this->__isset.price = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->life);
				this->__isset.life = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->power);
				this->__isset.power = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Cannon::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Cannon");

	xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->index);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_STRUCT, 20);
	xfer += this->price.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("life", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32(this->life);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("power", ::apache::thrift::protocol::T_I32, 40);
	xfer += oprot->writeI32(this->power);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Cannon& a, Cannon& b)
{
	using ::std::swap;
	swap(a.index, b.index);
	swap(a.price, b.price);
	swap(a.life, b.life);
	swap(a.power, b.power);
	swap(a.__isset, b.__isset);
}

const char* FleetTask::ascii_fingerprint = "0A2DD41FFDA24B0F547E4AACEDE12092";
const uint8_t FleetTask::binary_fingerprint[16] = {0x0A, 0x2D, 0xD4, 0x1F, 0xFD, 0xA2, 0x4B, 0x0F, 0x54, 0x7E, 0x4A, 0xAC, 0xED, 0xE1, 0x20, 0x92};

uint32_t FleetTask::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				int32_t ecast16;
				xfer += iprot->readI32(ecast16);
				this->type = (FleetTask_Enum::type)ecast16;
				this->__isset.type = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->lauchTime);
				this->__isset.lauchTime = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->duration);
				this->__isset.duration = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 4:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->position.read(iprot);
				this->__isset.position = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 5:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->expired);
				this->__isset.expired = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t FleetTask::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("FleetTask");

	xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
	xfer += oprot->writeI32((int32_t)this->type);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("lauchTime", ::apache::thrift::protocol::T_I32, 2);
	xfer += oprot->writeI32(this->lauchTime);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_I32, 3);
	xfer += oprot->writeI32(this->duration);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRUCT, 4);
	xfer += this->position.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("expired", ::apache::thrift::protocol::T_BOOL, 5);
	xfer += oprot->writeBool(this->expired);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(FleetTask& a, FleetTask& b)
{
	using ::std::swap;
	swap(a.type, b.type);
	swap(a.lauchTime, b.lauchTime);
	swap(a.duration, b.duration);
	swap(a.position, b.position);
	swap(a.expired, b.expired);
	swap(a.__isset, b.__isset);
}

const char* Planet::ascii_fingerprint = "E178018DDB3E0BA0A52EE04DCCAB8F93";
const uint8_t Planet::binary_fingerprint[16] = {0xE1, 0x78, 0x01, 0x8D, 0xDB, 0x3E, 0x0B, 0xA0, 0xA5, 0x2E, 0xE0, 0x4D, 0xCC, 0xAB, 0x8F, 0x93};

uint32_t Planet::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->name);
				this->__isset.name = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->coord.read(iprot);
				this->__isset.coord = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->playerId);
				this->__isset.playerId = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 4:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->buildingList.clear();
					uint32_t _size17;
					::apache::thrift::protocol::TType _etype20;
					xfer += iprot->readListBegin(_etype20, _size17);
					this->buildingList.resize(_size17);
					uint32_t _i21;
					for(_i21 = 0; _i21 < _size17; ++_i21)
					{
						xfer += iprot->readI32(this->buildingList[_i21]);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.buildingList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 5:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->taskQueue.clear();
					uint32_t _size22;
					::apache::thrift::protocol::TType _etype25;
					xfer += iprot->readListBegin(_etype25, _size22);
					this->taskQueue.resize(_size22);
					uint32_t _i26;
					for(_i26 = 0; _i26 < _size22; ++_i26)
					{
						xfer += this->taskQueue[_i26].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.taskQueue = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 6:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->ressourceSet.read(iprot);
				this->__isset.ressourceSet = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 7:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->eventList.clear();
					uint32_t _size27;
					::apache::thrift::protocol::TType _etype30;
					xfer += iprot->readListBegin(_etype30, _size27);
					this->eventList.resize(_size27);
					uint32_t _i31;
					for(_i31 = 0; _i31 < _size27; ++_i31)
					{
						xfer += this->eventList[_i31].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.eventList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 8:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->cannonTab.clear();
					uint32_t _size32;
					::apache::thrift::protocol::TType _etype35;
					xfer += iprot->readListBegin(_etype35, _size32);
					this->cannonTab.resize(_size32);
					uint32_t _i36;
					for(_i36 = 0; _i36 < _size32; ++_i36)
					{
						xfer += iprot->readI32(this->cannonTab[_i36]);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.cannonTab = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Planet::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Planet");

	xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
	xfer += oprot->writeString(this->name);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("coord", ::apache::thrift::protocol::T_STRUCT, 2);
	xfer += this->coord.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("playerId", ::apache::thrift::protocol::T_I32, 3);
	xfer += oprot->writeI32(this->playerId);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("buildingList", ::apache::thrift::protocol::T_LIST, 4);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->buildingList.size()));
		std::vector<int32_t> ::const_iterator _iter37;
		for(_iter37 = this->buildingList.begin(); _iter37 != this->buildingList.end(); ++_iter37)
		{
			xfer += oprot->writeI32((*_iter37));
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("taskQueue", ::apache::thrift::protocol::T_LIST, 5);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->taskQueue.size()));
		std::vector<PlanetTask> ::const_iterator _iter38;
		for(_iter38 = this->taskQueue.begin(); _iter38 != this->taskQueue.end(); ++_iter38)
		{
			xfer += (*_iter38).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("ressourceSet", ::apache::thrift::protocol::T_STRUCT, 6);
	xfer += this->ressourceSet.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("eventList", ::apache::thrift::protocol::T_LIST, 7);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->eventList.size()));
		std::vector<Event> ::const_iterator _iter39;
		for(_iter39 = this->eventList.begin(); _iter39 != this->eventList.end(); ++_iter39)
		{
			xfer += (*_iter39).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("cannonTab", ::apache::thrift::protocol::T_LIST, 8);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->cannonTab.size()));
		std::vector<int32_t> ::const_iterator _iter40;
		for(_iter40 = this->cannonTab.begin(); _iter40 != this->cannonTab.end(); ++_iter40)
		{
			xfer += oprot->writeI32((*_iter40));
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Planet& a, Planet& b)
{
	using ::std::swap;
	swap(a.name, b.name);
	swap(a.coord, b.coord);
	swap(a.playerId, b.playerId);
	swap(a.buildingList, b.buildingList);
	swap(a.taskQueue, b.taskQueue);
	swap(a.ressourceSet, b.ressourceSet);
	swap(a.eventList, b.eventList);
	swap(a.cannonTab, b.cannonTab);
	swap(a.__isset, b.__isset);
}

const char* Fleet::ascii_fingerprint = "5BC565BA35524079BC6AFEB1C4918CA7";
const uint8_t Fleet::binary_fingerprint[16] = {0x5B, 0xC5, 0x65, 0xBA, 0x35, 0x52, 0x40, 0x79, 0xBC, 0x6A, 0xFE, 0xB1, 0xC4, 0x91, 0x8C, 0xA7};

uint32_t Fleet::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I64)
			{
				xfer += iprot->readI64(this->id);
				this->__isset.id = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->playerId);
				this->__isset.playerId = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->coord.read(iprot);
				this->__isset.coord = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->origin.read(iprot);
				this->__isset.origin = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 50:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->name);
				this->__isset.name = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 60:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->shipList.clear();
					uint32_t _size41;
					::apache::thrift::protocol::TType _etype44;
					xfer += iprot->readListBegin(_etype44, _size41);
					this->shipList.resize(_size41);
					uint32_t _i45;
					for(_i45 = 0; _i45 < _size41; ++_i45)
					{
						xfer += iprot->readI32(this->shipList[_i45]);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.shipList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 70:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->ressourceSet.read(iprot);
				this->__isset.ressourceSet = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 80:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->taskQueue.clear();
					uint32_t _size46;
					::apache::thrift::protocol::TType _etype49;
					xfer += iprot->readListBegin(_etype49, _size46);
					this->taskQueue.resize(_size46);
					uint32_t _i50;
					for(_i50 = 0; _i50 < _size46; ++_i50)
					{
						xfer += this->taskQueue[_i50].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.taskQueue = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 90:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->eventList.clear();
					uint32_t _size51;
					::apache::thrift::protocol::TType _etype54;
					xfer += iprot->readListBegin(_etype54, _size51);
					this->eventList.resize(_size51);
					uint32_t _i55;
					for(_i55 = 0; _i55 < _size51; ++_i55)
					{
						xfer += this->eventList[_i55].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.eventList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Fleet::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Fleet");

	xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 10);
	xfer += oprot->writeI64(this->id);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("playerId", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->playerId);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("coord", ::apache::thrift::protocol::T_STRUCT, 30);
	xfer += this->coord.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("origin", ::apache::thrift::protocol::T_STRUCT, 40);
	xfer += this->origin.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 50);
	xfer += oprot->writeString(this->name);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("shipList", ::apache::thrift::protocol::T_LIST, 60);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->shipList.size()));
		std::vector<int32_t> ::const_iterator _iter56;
		for(_iter56 = this->shipList.begin(); _iter56 != this->shipList.end(); ++_iter56)
		{
			xfer += oprot->writeI32((*_iter56));
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("ressourceSet", ::apache::thrift::protocol::T_STRUCT, 70);
	xfer += this->ressourceSet.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("taskQueue", ::apache::thrift::protocol::T_LIST, 80);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->taskQueue.size()));
		std::vector<FleetTask> ::const_iterator _iter57;
		for(_iter57 = this->taskQueue.begin(); _iter57 != this->taskQueue.end(); ++_iter57)
		{
			xfer += (*_iter57).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("eventList", ::apache::thrift::protocol::T_LIST, 90);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->eventList.size()));
		std::vector<Event> ::const_iterator _iter58;
		for(_iter58 = this->eventList.begin(); _iter58 != this->eventList.end(); ++_iter58)
		{
			xfer += (*_iter58).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Fleet& a, Fleet& b)
{
	using ::std::swap;
	swap(a.id, b.id);
	swap(a.playerId, b.playerId);
	swap(a.coord, b.coord);
	swap(a.origin, b.origin);
	swap(a.name, b.name);
	swap(a.shipList, b.shipList);
	swap(a.ressourceSet, b.ressourceSet);
	swap(a.taskQueue, b.taskQueue);
	swap(a.eventList, b.eventList);
	swap(a.__isset, b.__isset);
}

const char* FleetAction::ascii_fingerprint = "096C62D67189AD8DEE6942D975E45799";
const uint8_t FleetAction::binary_fingerprint[16] = {0x09, 0x6C, 0x62, 0xD6, 0x71, 0x89, 0xAD, 0x8D, 0xEE, 0x69, 0x42, 0xD9, 0x75, 0xE4, 0x57, 0x99};

uint32_t FleetAction::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				int32_t ecast59;
				xfer += iprot->readI32(ecast59);
				this->action = (FleetAction_Type::type)ecast59;
				this->__isset.action = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->target.read(iprot);
				this->__isset.target = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t FleetAction::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("FleetAction");

	xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_I32, 1);
	xfer += oprot->writeI32((int32_t)this->action);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("target", ::apache::thrift::protocol::T_STRUCT, 2);
	xfer += this->target.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(FleetAction& a, FleetAction& b)
{
	using ::std::swap;
	swap(a.action, b.action);
	swap(a.target, b.target);
	swap(a.__isset, b.__isset);
}

const char* FleetFightInfo::ascii_fingerprint = "72586A296E2C8DAED7B4C26002A639BF";
const uint8_t FleetFightInfo::binary_fingerprint[16] = {0x72, 0x58, 0x6A, 0x29, 0x6E, 0x2C, 0x8D, 0xAE, 0xD7, 0xB4, 0xC2, 0x60, 0x02, 0xA6, 0x39, 0xBF};

uint32_t FleetFightInfo::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->before.read(iprot);
				this->__isset.before = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->after.read(iprot);
				this->__isset.after = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t FleetFightInfo::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("FleetFightInfo");

	xfer += oprot->writeFieldBegin("before", ::apache::thrift::protocol::T_STRUCT, 10);
	xfer += this->before.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("after", ::apache::thrift::protocol::T_STRUCT, 20);
	xfer += this->after.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(FleetFightInfo& a, FleetFightInfo& b)
{
	using ::std::swap;
	swap(a.before, b.before);
	swap(a.after, b.after);
	swap(a.__isset, b.__isset);
}

const char* FleetReport::ascii_fingerprint = "F021743048F9F928F48E5919EA96790F";
const uint8_t FleetReport::binary_fingerprint[16] = {0xF0, 0x21, 0x74, 0x30, 0x48, 0xF9, 0xF9, 0x28, 0xF4, 0x8E, 0x59, 0x19, 0xEA, 0x96, 0x79, 0x0F};

uint32_t FleetReport::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->isDead);
				this->__isset.isDead = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->hasFight);
				this->__isset.hasFight = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_SET)
			{
				{
					this->enemySet.clear();
					uint32_t _size60;
					::apache::thrift::protocol::TType _etype63;
					xfer += iprot->readSetBegin(_etype63, _size60);
					uint32_t _i64;
					for(_i64 = 0; _i64 < _size60; ++_i64)
					{
						int32_t _elem65;
						xfer += iprot->readI32(_elem65);
						this->enemySet.insert(_elem65);
					}
					xfer += iprot->readSetEnd();
				}
				this->__isset.enemySet = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->fightInfo.read(iprot);
				this->__isset.fightInfo = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t FleetReport::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("FleetReport");

	xfer += oprot->writeFieldBegin("isDead", ::apache::thrift::protocol::T_BOOL, 10);
	xfer += oprot->writeBool(this->isDead);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("hasFight", ::apache::thrift::protocol::T_BOOL, 20);
	xfer += oprot->writeBool(this->hasFight);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("enemySet", ::apache::thrift::protocol::T_SET, 30);
	{
		xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->enemySet.size()));
		std::set<int32_t> ::const_iterator _iter66;
		for(_iter66 = this->enemySet.begin(); _iter66 != this->enemySet.end(); ++_iter66)
		{
			xfer += oprot->writeI32((*_iter66));
		}
		xfer += oprot->writeSetEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("fightInfo", ::apache::thrift::protocol::T_STRUCT, 40);
	xfer += this->fightInfo.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(FleetReport& a, FleetReport& b)
{
	using ::std::swap;
	swap(a.isDead, b.isDead);
	swap(a.hasFight, b.hasFight);
	swap(a.enemySet, b.enemySet);
	swap(a.fightInfo, b.fightInfo);
	swap(a.__isset, b.__isset);
}

const char* PlanetFightInfo::ascii_fingerprint = "58D0452C00146C814E77E7A0E59D7B69";
const uint8_t PlanetFightInfo::binary_fingerprint[16] = {0x58, 0xD0, 0x45, 0x2C, 0x00, 0x14, 0x6C, 0x81, 0x4E, 0x77, 0xE7, 0xA0, 0xE5, 0x9D, 0x7B, 0x69};

uint32_t PlanetFightInfo::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->before.read(iprot);
				this->__isset.before = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->after.read(iprot);
				this->__isset.after = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t PlanetFightInfo::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("PlanetFightInfo");

	xfer += oprot->writeFieldBegin("before", ::apache::thrift::protocol::T_STRUCT, 10);
	xfer += this->before.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("after", ::apache::thrift::protocol::T_STRUCT, 20);
	xfer += this->after.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(PlanetFightInfo& a, PlanetFightInfo& b)
{
	using ::std::swap;
	swap(a.before, b.before);
	swap(a.after, b.after);
	swap(a.__isset, b.__isset);
}

const char* PlanetReport::ascii_fingerprint = "5A447E0DC2E3D0415B74B5511AE0EB98";
const uint8_t PlanetReport::binary_fingerprint[16] = {0x5A, 0x44, 0x7E, 0x0D, 0xC2, 0xE3, 0xD0, 0x41, 0x5B, 0x74, 0xB5, 0x51, 0x1A, 0xE0, 0xEB, 0x98};

uint32_t PlanetReport::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->isDead);
				this->__isset.isDead = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->hasFight);
				this->__isset.hasFight = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_SET)
			{
				{
					this->enemySet.clear();
					uint32_t _size67;
					::apache::thrift::protocol::TType _etype70;
					xfer += iprot->readSetBegin(_etype70, _size67);
					uint32_t _i71;
					for(_i71 = 0; _i71 < _size67; ++_i71)
					{
						int32_t _elem72;
						xfer += iprot->readI32(_elem72);
						this->enemySet.insert(_elem72);
					}
					xfer += iprot->readSetEnd();
				}
				this->__isset.enemySet = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->fightInfo.read(iprot);
				this->__isset.fightInfo = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t PlanetReport::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("PlanetReport");

	xfer += oprot->writeFieldBegin("isDead", ::apache::thrift::protocol::T_BOOL, 10);
	xfer += oprot->writeBool(this->isDead);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("hasFight", ::apache::thrift::protocol::T_BOOL, 20);
	xfer += oprot->writeBool(this->hasFight);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("enemySet", ::apache::thrift::protocol::T_SET, 30);
	{
		xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->enemySet.size()));
		std::set<int32_t> ::const_iterator _iter73;
		for(_iter73 = this->enemySet.begin(); _iter73 != this->enemySet.end(); ++_iter73)
		{
			xfer += oprot->writeI32((*_iter73));
		}
		xfer += oprot->writeSetEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("fightInfo", ::apache::thrift::protocol::T_STRUCT, 40);
	xfer += this->fightInfo.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(PlanetReport& a, PlanetReport& b)
{
	using ::std::swap;
	swap(a.isDead, b.isDead);
	swap(a.hasFight, b.hasFight);
	swap(a.enemySet, b.enemySet);
	swap(a.fightInfo, b.fightInfo);
	swap(a.__isset, b.__isset);
}

const char* FightReport::ascii_fingerprint = "21A78A7AC08C0BFA132F7144F0C0EA14";
const uint8_t FightReport::binary_fingerprint[16] = {0x21, 0xA7, 0x8A, 0x7A, 0xC0, 0x8C, 0x0B, 0xFA, 0x13, 0x2F, 0x71, 0x44, 0xF0, 0xC0, 0xEA, 0x14};

uint32_t FightReport::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->fleetList.clear();
					uint32_t _size74;
					::apache::thrift::protocol::TType _etype77;
					xfer += iprot->readListBegin(_etype77, _size74);
					this->fleetList.resize(_size74);
					uint32_t _i78;
					for(_i78 = 0; _i78 < _size74; ++_i78)
					{
						xfer += this->fleetList[_i78].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.fleetList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->hasPlanet);
				this->__isset.hasPlanet = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->planet.read(iprot);
				this->__isset.planet = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t FightReport::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("FightReport");

	xfer += oprot->writeFieldBegin("fleetList", ::apache::thrift::protocol::T_LIST, 10);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fleetList.size()));
		std::vector<FleetReport> ::const_iterator _iter79;
		for(_iter79 = this->fleetList.begin(); _iter79 != this->fleetList.end(); ++_iter79)
		{
			xfer += (*_iter79).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("hasPlanet", ::apache::thrift::protocol::T_BOOL, 20);
	xfer += oprot->writeBool(this->hasPlanet);
	xfer += oprot->writeFieldEnd();

	if(this->__isset.planet)
	{
		xfer += oprot->writeFieldBegin("planet", ::apache::thrift::protocol::T_STRUCT, 30);
		xfer += this->planet.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(FightReport& a, FightReport& b)
{
	using ::std::swap;
	swap(a.fleetList, b.fleetList);
	swap(a.hasPlanet, b.hasPlanet);
	swap(a.planet, b.planet);
	swap(a.__isset, b.__isset);
}

const char* Universe::ascii_fingerprint = "FF049B27778334A529CB5EA072BC4FD2";
const uint8_t Universe::binary_fingerprint[16] = {0xFF, 0x04, 0x9B, 0x27, 0x77, 0x83, 0x34, 0xA5, 0x29, 0xCB, 0x5E, 0xA0, 0x72, 0xBC, 0x4F, 0xD2};

uint32_t Universe::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_MAP)
			{
				{
					this->playerMap.clear();
					uint32_t _size80;
					::apache::thrift::protocol::TType _ktype81;
					::apache::thrift::protocol::TType _vtype82;
					xfer += iprot->readMapBegin(_ktype81, _vtype82, _size80);
					uint32_t _i84;
					for(_i84 = 0; _i84 < _size80; ++_i84)
					{
						Player_ID _key85;
						xfer += iprot->readI32(_key85);
						Player& _val86 = this->playerMap[_key85];
						xfer += _val86.read(iprot);
					}
					xfer += iprot->readMapEnd();
				}
				this->__isset.playerMap = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if(ftype == ::apache::thrift::protocol::T_MAP)
			{
				{
					this->planetMap.clear();
					uint32_t _size87;
					::apache::thrift::protocol::TType _ktype88;
					::apache::thrift::protocol::TType _vtype89;
					xfer += iprot->readMapBegin(_ktype88, _vtype89, _size87);
					uint32_t _i91;
					for(_i91 = 0; _i91 < _size87; ++_i91)
					{
						Coord _key92;
						xfer += _key92.read(iprot);
						Planet& _val93 = this->planetMap[_key92];
						xfer += _val93.read(iprot);
					}
					xfer += iprot->readMapEnd();
				}
				this->__isset.planetMap = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if(ftype == ::apache::thrift::protocol::T_MAP)
			{
				{
					this->fleetMap.clear();
					uint32_t _size94;
					::apache::thrift::protocol::TType _ktype95;
					::apache::thrift::protocol::TType _vtype96;
					xfer += iprot->readMapBegin(_ktype95, _vtype96, _size94);
					uint32_t _i98;
					for(_i98 = 0; _i98 < _size94; ++_i98)
					{
						Fleet_ID _key99;
						xfer += iprot->readI64(_key99);
						Fleet& _val100 = this->fleetMap[_key99];
						xfer += _val100.read(iprot);
					}
					xfer += iprot->readMapEnd();
				}
				this->__isset.fleetMap = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 4:
			if(ftype == ::apache::thrift::protocol::T_MAP)
			{
				{
					this->reportMap.clear();
					uint32_t _size101;
					::apache::thrift::protocol::TType _ktype102;
					::apache::thrift::protocol::TType _vtype103;
					xfer += iprot->readMapBegin(_ktype102, _vtype103, _size101);
					uint32_t _i105;
					for(_i105 = 0; _i105 < _size101; ++_i105)
					{
						int32_t _key106;
						xfer += iprot->readI32(_key106);
						FightReport& _val107 = this->reportMap[_key106];
						xfer += _val107.read(iprot);
					}
					xfer += iprot->readMapEnd();
				}
				this->__isset.reportMap = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 5:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->nextPlayerID);
				this->__isset.nextPlayerID = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 6:
			if(ftype == ::apache::thrift::protocol::T_I64)
			{
				xfer += iprot->readI64(this->nextFleetID);
				this->__isset.nextFleetID = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 7:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->time);
				this->__isset.time = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Universe::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Universe");

	xfer += oprot->writeFieldBegin("playerMap", ::apache::thrift::protocol::T_MAP, 1);
	{
		xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->playerMap.size()));
		std::map<Player_ID, Player> ::const_iterator _iter108;
		for(_iter108 = this->playerMap.begin(); _iter108 != this->playerMap.end(); ++_iter108)
		{
			xfer += oprot->writeI32(_iter108->first);
			xfer += _iter108->second.write(oprot);
		}
		xfer += oprot->writeMapEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("planetMap", ::apache::thrift::protocol::T_MAP, 2);
	{
		xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRUCT, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->planetMap.size()));
		std::map<Coord, Planet> ::const_iterator _iter109;
		for(_iter109 = this->planetMap.begin(); _iter109 != this->planetMap.end(); ++_iter109)
		{
			xfer += _iter109->first.write(oprot);
			xfer += _iter109->second.write(oprot);
		}
		xfer += oprot->writeMapEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("fleetMap", ::apache::thrift::protocol::T_MAP, 3);
	{
		xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fleetMap.size()));
		std::map<Fleet_ID, Fleet> ::const_iterator _iter110;
		for(_iter110 = this->fleetMap.begin(); _iter110 != this->fleetMap.end(); ++_iter110)
		{
			xfer += oprot->writeI64(_iter110->first);
			xfer += _iter110->second.write(oprot);
		}
		xfer += oprot->writeMapEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("reportMap", ::apache::thrift::protocol::T_MAP, 4);
	{
		xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->reportMap.size()));
		std::map<int32_t, FightReport> ::const_iterator _iter111;
		for(_iter111 = this->reportMap.begin(); _iter111 != this->reportMap.end(); ++_iter111)
		{
			xfer += oprot->writeI32(_iter111->first);
			xfer += _iter111->second.write(oprot);
		}
		xfer += oprot->writeMapEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("nextPlayerID", ::apache::thrift::protocol::T_I32, 5);
	xfer += oprot->writeI32(this->nextPlayerID);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("nextFleetID", ::apache::thrift::protocol::T_I64, 6);
	xfer += oprot->writeI64(this->nextFleetID);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I32, 7);
	xfer += oprot->writeI32(this->time);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Universe& a, Universe& b)
{
	using ::std::swap;
	swap(a.playerMap, b.playerMap);
	swap(a.planetMap, b.planetMap);
	swap(a.fleetMap, b.fleetMap);
	swap(a.reportMap, b.reportMap);
	swap(a.nextPlayerID, b.nextPlayerID);
	swap(a.nextFleetID, b.nextFleetID);
	swap(a.time, b.time);
	swap(a.__isset, b.__isset);
}

const char* OptionalPlayer::ascii_fingerprint = "38C0E72FCEA186061C3C2B38B437865E";
const uint8_t OptionalPlayer::binary_fingerprint[16] = {0x38, 0xC0, 0xE7, 0x2F, 0xCE, 0xA1, 0x86, 0x06, 0x1C, 0x3C, 0x2B, 0x38, 0xB4, 0x37, 0x86, 0x5E};

uint32_t OptionalPlayer::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->player.read(iprot);
				this->__isset.player = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t OptionalPlayer::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("OptionalPlayer");

	if(this->__isset.player)
	{
		xfer += oprot->writeFieldBegin("player", ::apache::thrift::protocol::T_STRUCT, 1);
		xfer += this->player.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(OptionalPlayer& a, OptionalPlayer& b)
{
	using ::std::swap;
	swap(a.player, b.player);
	swap(a.__isset, b.__isset);
}

const char* TimeInfo::ascii_fingerprint = "9EA78140CD5F29ED0DA93A6F86CC34E1";
const uint8_t TimeInfo::binary_fingerprint[16] = {0x9E, 0xA7, 0x81, 0x40, 0xCD, 0x5F, 0x29, 0xED, 0x0D, 0xA9, 0x3A, 0x6F, 0x86, 0xCC, 0x34, 0xE1};

uint32_t TimeInfo::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_DOUBLE)
			{
				xfer += iprot->readDouble(this->roundDuration);
				this->__isset.roundDuration = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_DOUBLE)
			{
				xfer += iprot->readDouble(this->univTime);
				this->__isset.univTime = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t TimeInfo::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("TimeInfo");

	xfer += oprot->writeFieldBegin("roundDuration", ::apache::thrift::protocol::T_DOUBLE, 10);
	xfer += oprot->writeDouble(this->roundDuration);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("univTime", ::apache::thrift::protocol::T_DOUBLE, 20);
	xfer += oprot->writeDouble(this->univTime);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(TimeInfo& a, TimeInfo& b)
{
	using ::std::swap;
	swap(a.roundDuration, b.roundDuration);
	swap(a.univTime, b.univTime);
	swap(a.__isset, b.__isset);
}

const char* FleetList::ascii_fingerprint = "BF4137B84F4CA008715911A6B72A13B6";
const uint8_t FleetList::binary_fingerprint[16] = {0xBF, 0x41, 0x37, 0xB8, 0x4F, 0x4C, 0xA0, 0x08, 0x71, 0x59, 0x11, 0xA6, 0xB7, 0x2A, 0x13, 0xB6};

uint32_t FleetList::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->fleetList.clear();
					uint32_t _size112;
					::apache::thrift::protocol::TType _etype115;
					xfer += iprot->readListBegin(_etype115, _size112);
					this->fleetList.resize(_size112);
					uint32_t _i116;
					for(_i116 = 0; _i116 < _size112; ++_i116)
					{
						xfer += this->fleetList[_i116].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.fleetList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->planetList.clear();
					uint32_t _size117;
					::apache::thrift::protocol::TType _etype120;
					xfer += iprot->readListBegin(_etype120, _size117);
					this->planetList.resize(_size117);
					uint32_t _i121;
					for(_i121 = 0; _i121 < _size117; ++_i121)
					{
						xfer += this->planetList[_i121].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.planetList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->fleetCount);
				this->__isset.fleetCount = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t FleetList::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("FleetList");

	xfer += oprot->writeFieldBegin("fleetList", ::apache::thrift::protocol::T_LIST, 10);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fleetList.size()));
		std::vector<Fleet> ::const_iterator _iter122;
		for(_iter122 = this->fleetList.begin(); _iter122 != this->fleetList.end(); ++_iter122)
		{
			xfer += (*_iter122).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("planetList", ::apache::thrift::protocol::T_LIST, 20);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->planetList.size()));
		std::vector<Planet> ::const_iterator _iter123;
		for(_iter123 = this->planetList.begin(); _iter123 != this->planetList.end(); ++_iter123)
		{
			xfer += (*_iter123).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("fleetCount", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32(this->fleetCount);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(FleetList& a, FleetList& b)
{
	using ::std::swap;
	swap(a.fleetList, b.fleetList);
	swap(a.planetList, b.planetList);
	swap(a.fleetCount, b.fleetCount);
	swap(a.__isset, b.__isset);
}

const char* PlanetList::ascii_fingerprint = "18C7E957C40A9FD4002304AEBEA00438";
const uint8_t PlanetList::binary_fingerprint[16] = {0x18, 0xC7, 0xE9, 0x57, 0xC4, 0x0A, 0x9F, 0xD4, 0x00, 0x23, 0x04, 0xAE, 0xBE, 0xA0, 0x04, 0x38};

uint32_t PlanetList::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->planetList.clear();
					uint32_t _size124;
					::apache::thrift::protocol::TType _etype127;
					xfer += iprot->readListBegin(_etype127, _size124);
					this->planetList.resize(_size124);
					uint32_t _i128;
					for(_i128 = 0; _i128 < _size124; ++_i128)
					{
						xfer += this->planetList[_i128].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.planetList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->planetCount);
				this->__isset.planetCount = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t PlanetList::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("PlanetList");

	xfer += oprot->writeFieldBegin("planetList", ::apache::thrift::protocol::T_LIST, 10);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->planetList.size()));
		std::vector<Planet> ::const_iterator _iter129;
		for(_iter129 = this->planetList.begin(); _iter129 != this->planetList.end(); ++_iter129)
		{
			xfer += (*_iter129).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("planetCount", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->planetCount);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(PlanetList& a, PlanetList& b)
{
	using ::std::swap;
	swap(a.planetList, b.planetList);
	swap(a.planetCount, b.planetCount);
	swap(a.__isset, b.__isset);
}

} // namespace
