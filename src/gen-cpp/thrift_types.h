/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef thrift_TYPES_H
#define thrift_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace ndw
{

struct Event_Type
{
	enum type
	{
		FleetCodeError = 0,
		FleetCodeExecError = 1,
		PlanetCodeError = 2,
		PlanetCodeExecError = 3,
		Upgraded = 4,
		ShipMade = 5,
		PlanetHarvested = 6,
		FleetWin = 7,
		FleetDraw = 8,
		FleetsGather = 9,
		PlanetColonized = 10,
		FleetLose = 11,
		FleetDrop = 12,
		PlanetLose = 13,
		PlanetWin = 14,
		CannonMade = 15,
		FightAvoided = 16,
		PlayerLog = 17,
		Count = 18
	};
};

extern const std::map<int, const char*> _Event_Type_VALUES_TO_NAMES;

struct Ressource
{
	enum type
	{
		Metal = 0,
		Carbon = 1,
		Loicium = 2,
		Count = 3
	};
};

extern const std::map<int, const char*> _Ressource_VALUES_TO_NAMES;

struct PlanetTask_Enum
{
	enum type
	{
		UpgradeBuilding = 0,
		MakeShip = 1,
		MakeCannon = 2,
		Count = 3
	};
};

extern const std::map<int, const char*> _PlanetTask_Enum_VALUES_TO_NAMES;

struct Building_Enum
{
	enum type
	{
		CommandCenter = 0,
		MetalMine = 1,
		CarbonMine = 2,
		LoiciumFilter = 3,
		Factory = 4,
		Laboratory = 5,
		CarbonicCentral = 6,
		SolarCentral = 7,
		GeothermicCentral = 8,
		Count = 9
	};
};

extern const std::map<int, const char*> _Building_Enum_VALUES_TO_NAMES;

struct Ship_Enum
{
	enum type
	{
		Mosquito = 0,
		Hornet = 1,
		Vulture = 2,
		Dragon = 3,
		Behemoth = 4,
		Azathoth = 5,
		Queen = 6,
		Cargo = 7,
		LargeCargo = 8,
		Count = 9
	};
};

extern const std::map<int, const char*> _Ship_Enum_VALUES_TO_NAMES;

struct Cannon_Enum
{
	enum type
	{
		Cannon1 = 0,
		Cannon2 = 1,
		Cannon3 = 2,
		Cannon4 = 3,
		Cannon5 = 4,
		Cannon6 = 5,
		Count = 6
	};
};

extern const std::map<int, const char*> _Cannon_Enum_VALUES_TO_NAMES;

struct FleetTask_Enum
{
	enum type
	{
		Move = 0,
		Harvest = 1,
		Colonize = 2,
		Count = 3
	};
};

extern const std::map<int, const char*> _FleetTask_Enum_VALUES_TO_NAMES;

struct FleetAction_Type
{
	enum type
	{
		Nothing = 0,
		Move = 1,
		Harvest = 2,
		Colonize = 3
	};
};

extern const std::map<int, const char*> _FleetAction_Type_VALUES_TO_NAMES;

struct Sort_Type
{
	enum type
	{
		Name = 0,
		X = 1,
		Y = 2,
		Z = 3,
		M = 4,
		C = 5,
		L = 6,
		S = 7,
		D = 8,
		B = 9
	};
};

extern const std::map<int, const char*> _Sort_Type_VALUES_TO_NAMES;

typedef int16_t Coord_Value;

typedef int32_t Event_ID;

typedef int32_t Alliance_ID;

typedef int32_t Player_ID;

typedef std::vector<class Skill>  Player_SkillTab;

typedef std::vector<int32_t>  BuildingTab;

typedef std::vector<int32_t>  Fleet_ShipTab;

typedef int64_t Fleet_ID;

typedef std::vector<class FleetAction>  FleetActionList;

typedef std::map<Player_ID, class Player>  Universe_PlayerMap;

typedef std::map<class Coord, class Planet>  Universe_PlanetMap;

typedef std::map<int32_t, class FightReport>  ReportMap;

typedef int32_t Message_ID;

typedef struct _Coord__isset
{
	_Coord__isset() : X(false), Y(false), Z(false) {}
	bool X;
	bool Y;
	bool Z;
} _Coord__isset;

class Coord
{
public:

	static const char* ascii_fingerprint; // = "CA961494BB2E3F092A20C7271AA01847";
	static const uint8_t binary_fingerprint[16]; // = {0xCA,0x96,0x14,0x94,0xBB,0x2E,0x3F,0x09,0x2A,0x20,0xC7,0x27,0x1A,0xA0,0x18,0x47};

	Coord() : X(0), Y(0), Z(0)
	{
	}

	virtual ~Coord() throw() {}

	Coord_Value X;
	Coord_Value Y;
	Coord_Value Z;

	_Coord__isset __isset;

	void __set_X(const Coord_Value val)
	{
		X = val;
	}

	void __set_Y(const Coord_Value val)
	{
		Y = val;
	}

	void __set_Z(const Coord_Value val)
	{
		Z = val;
	}

	bool operator == (const Coord& rhs) const
	{
		if(!(X == rhs.X))
			return false;
		if(!(Y == rhs.Y))
			return false;
		if(!(Z == rhs.Z))
			return false;
		return true;
	}
	bool operator != (const Coord& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Coord&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Coord& a, Coord& b);

typedef struct _Event__isset
{
	_Event__isset() : id(false), time(false), type(false), comment(false), value(false), value2(false), viewed(false) {}
	bool id;
	bool time;
	bool type;
	bool comment;
	bool value;
	bool value2;
	bool viewed;
} _Event__isset;

class Event
{
public:

	static const char* ascii_fingerprint; // = "05279B715ECA17E118DE09443DAACE7E";
	static const uint8_t binary_fingerprint[16]; // = {0x05,0x27,0x9B,0x71,0x5E,0xCA,0x17,0xE1,0x18,0xDE,0x09,0x44,0x3D,0xAA,0xCE,0x7E};

	Event() : id(0), time(0), type((Event_Type::type)0), comment(), value(0), value2(0), viewed(0)
	{
	}

	virtual ~Event() throw() {}

	Event_ID id;
	int32_t time;
	Event_Type::type type;
	std::string comment;
	int32_t value;
	int32_t value2;
	bool viewed;

	_Event__isset __isset;

	void __set_id(const Event_ID val)
	{
		id = val;
	}

	void __set_time(const int32_t val)
	{
		time = val;
	}

	void __set_type(const Event_Type::type val)
	{
		type = val;
	}

	void __set_comment(const std::string& val)
	{
		comment = val;
	}

	void __set_value(const int32_t val)
	{
		value = val;
	}

	void __set_value2(const int32_t val)
	{
		value2 = val;
	}

	void __set_viewed(const bool val)
	{
		viewed = val;
	}

	bool operator == (const Event& rhs) const
	{
		if(!(id == rhs.id))
			return false;
		if(!(time == rhs.time))
			return false;
		if(!(type == rhs.type))
			return false;
		if(!(comment == rhs.comment))
			return false;
		if(!(value == rhs.value))
			return false;
		if(!(value2 == rhs.value2))
			return false;
		if(!(viewed == rhs.viewed))
			return false;
		return true;
	}
	bool operator != (const Event& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Event&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Event& a, Event& b);

typedef struct _CodeData__isset
{
	_CodeData__isset() : blocklyCode(false), blocklyCodeDate(false), code(false), codeDate(false), lastError(false) {}
	bool blocklyCode;
	bool blocklyCodeDate;
	bool code;
	bool codeDate;
	bool lastError;
} _CodeData__isset;

class CodeData
{
public:

	static const char* ascii_fingerprint; // = "E6CD2A5AF21635774A095F87B4F891AA";
	static const uint8_t binary_fingerprint[16]; // = {0xE6,0xCD,0x2A,0x5A,0xF2,0x16,0x35,0x77,0x4A,0x09,0x5F,0x87,0xB4,0xF8,0x91,0xAA};

	CodeData() : blocklyCode(), blocklyCodeDate(0), code(), codeDate(0), lastError()
	{
	}

	virtual ~CodeData() throw() {}

	std::string blocklyCode;
	int32_t blocklyCodeDate;
	std::string code;
	int32_t codeDate;
	std::string lastError;

	_CodeData__isset __isset;

	void __set_blocklyCode(const std::string& val)
	{
		blocklyCode = val;
	}

	void __set_blocklyCodeDate(const int32_t val)
	{
		blocklyCodeDate = val;
	}

	void __set_code(const std::string& val)
	{
		code = val;
	}

	void __set_codeDate(const int32_t val)
	{
		codeDate = val;
	}

	void __set_lastError(const std::string& val)
	{
		lastError = val;
	}

	bool operator == (const CodeData& rhs) const
	{
		if(!(blocklyCode == rhs.blocklyCode))
			return false;
		if(!(blocklyCodeDate == rhs.blocklyCodeDate))
			return false;
		if(!(code == rhs.code))
			return false;
		if(!(codeDate == rhs.codeDate))
			return false;
		if(!(lastError == rhs.lastError))
			return false;
		return true;
	}
	bool operator != (const CodeData& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const CodeData&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CodeData& a, CodeData& b);

typedef struct _Alliance__isset
{
	_Alliance__isset() : id(false), masterID(false), name(false), description(false), masterLogin(false) {}
	bool id;
	bool masterID;
	bool name;
	bool description;
	bool masterLogin;
} _Alliance__isset;

class Alliance
{
public:

	static const char* ascii_fingerprint; // = "D053B794D972C573CD6C2B05D5062B3A";
	static const uint8_t binary_fingerprint[16]; // = {0xD0,0x53,0xB7,0x94,0xD9,0x72,0xC5,0x73,0xCD,0x6C,0x2B,0x05,0xD5,0x06,0x2B,0x3A};

	Alliance() : id(0), masterID(0), name(), description(), masterLogin()
	{
	}

	virtual ~Alliance() throw() {}

	Alliance_ID id;
	Player_ID masterID;
	std::string name;
	std::string description;
	std::string masterLogin;

	_Alliance__isset __isset;

	void __set_id(const Alliance_ID val)
	{
		id = val;
	}

	void __set_masterID(const Player_ID val)
	{
		masterID = val;
	}

	void __set_name(const std::string& val)
	{
		name = val;
	}

	void __set_description(const std::string& val)
	{
		description = val;
	}

	void __set_masterLogin(const std::string& val)
	{
		masterLogin = val;
	}

	bool operator == (const Alliance& rhs) const
	{
		if(!(id == rhs.id))
			return false;
		if(!(masterID == rhs.masterID))
			return false;
		if(!(name == rhs.name))
			return false;
		if(!(description == rhs.description))
			return false;
		if(!(masterLogin == rhs.masterLogin))
			return false;
		return true;
	}
	bool operator != (const Alliance& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Alliance&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Alliance& a, Alliance& b);

typedef struct _Skill__isset
{
	_Skill__isset() : name(false), level(false), cost(false), canUpdate(false), effectMessage(false), nextLevelMessage(false) {}
	bool name;
	bool level;
	bool cost;
	bool canUpdate;
	bool effectMessage;
	bool nextLevelMessage;
} _Skill__isset;

class Skill
{
public:

	static const char* ascii_fingerprint; // = "AD2770DBF5B05009C3E548C832BE37C4";
	static const uint8_t binary_fingerprint[16]; // = {0xAD,0x27,0x70,0xDB,0xF5,0xB0,0x50,0x09,0xC3,0xE5,0x48,0xC8,0x32,0xBE,0x37,0xC4};

	Skill() : name(), level(0), cost(0), canUpdate(0), effectMessage(), nextLevelMessage()
	{
	}

	virtual ~Skill() throw() {}

	std::string name;
	int32_t level;
	int32_t cost;
	bool canUpdate;
	std::string effectMessage;
	std::string nextLevelMessage;

	_Skill__isset __isset;

	void __set_name(const std::string& val)
	{
		name = val;
	}

	void __set_level(const int32_t val)
	{
		level = val;
	}

	void __set_cost(const int32_t val)
	{
		cost = val;
	}

	void __set_canUpdate(const bool val)
	{
		canUpdate = val;
	}

	void __set_effectMessage(const std::string& val)
	{
		effectMessage = val;
	}

	void __set_nextLevelMessage(const std::string& val)
	{
		nextLevelMessage = val;
	}

	bool operator == (const Skill& rhs) const
	{
		if(!(name == rhs.name))
			return false;
		if(!(level == rhs.level))
			return false;
		if(!(cost == rhs.cost))
			return false;
		if(!(canUpdate == rhs.canUpdate))
			return false;
		if(!(effectMessage == rhs.effectMessage))
			return false;
		if(!(nextLevelMessage == rhs.nextLevelMessage))
			return false;
		return true;
	}
	bool operator != (const Skill& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Skill&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Skill& a, Skill& b);

typedef struct _Player__isset
{
	_Player__isset() : id(false), login(false), password(false), fleetsCode(false), planetsCode(false), tutoDisplayed(false), mainPlanet(false), score(true), allianceID(false), experience(true), skillpoints(true), skilltab(false), allianceName(false), unreadMessagesCount(false) {}
	bool id;
	bool login;
	bool password;
	bool fleetsCode;
	bool planetsCode;
	bool tutoDisplayed;
	bool mainPlanet;
	bool score;
	bool allianceID;
	bool experience;
	bool skillpoints;
	bool skilltab;
	bool allianceName;
	bool unreadMessagesCount;
} _Player__isset;

class Player
{
public:

	static const char* ascii_fingerprint; // = "626A10876AEA8D693715A58F96837EBA";
	static const uint8_t binary_fingerprint[16]; // = {0x62,0x6A,0x10,0x87,0x6A,0xEA,0x8D,0x69,0x37,0x15,0xA5,0x8F,0x96,0x83,0x7E,0xBA};

	Player() : id(0), login(), password(), score(0LL), allianceID(0), experience(0LL), skillpoints(0LL), allianceName(), unreadMessagesCount(0)
	{
	}

	virtual ~Player() throw() {}

	Player_ID id;
	std::string login;
	std::string password;
	CodeData fleetsCode;
	CodeData planetsCode;
	std::map<std::string, int32_t>  tutoDisplayed;
	Coord mainPlanet;
	int64_t score;
	Alliance_ID allianceID;
	int64_t experience;
	int64_t skillpoints;
	Player_SkillTab skilltab;
	std::string allianceName;
	int32_t unreadMessagesCount;

	_Player__isset __isset;

	void __set_id(const Player_ID val)
	{
		id = val;
	}

	void __set_login(const std::string& val)
	{
		login = val;
	}

	void __set_password(const std::string& val)
	{
		password = val;
	}

	void __set_fleetsCode(const CodeData& val)
	{
		fleetsCode = val;
	}

	void __set_planetsCode(const CodeData& val)
	{
		planetsCode = val;
	}

	void __set_tutoDisplayed(const std::map<std::string, int32_t>& val)
	{
		tutoDisplayed = val;
	}

	void __set_mainPlanet(const Coord& val)
	{
		mainPlanet = val;
	}

	void __set_score(const int64_t val)
	{
		score = val;
	}

	void __set_allianceID(const Alliance_ID val)
	{
		allianceID = val;
	}

	void __set_experience(const int64_t val)
	{
		experience = val;
	}

	void __set_skillpoints(const int64_t val)
	{
		skillpoints = val;
	}

	void __set_skilltab(const Player_SkillTab& val)
	{
		skilltab = val;
	}

	void __set_allianceName(const std::string& val)
	{
		allianceName = val;
	}

	void __set_unreadMessagesCount(const int32_t val)
	{
		unreadMessagesCount = val;
	}

	bool operator == (const Player& rhs) const
	{
		if(!(id == rhs.id))
			return false;
		if(!(login == rhs.login))
			return false;
		if(!(password == rhs.password))
			return false;
		if(!(fleetsCode == rhs.fleetsCode))
			return false;
		if(!(planetsCode == rhs.planetsCode))
			return false;
		if(!(tutoDisplayed == rhs.tutoDisplayed))
			return false;
		if(!(mainPlanet == rhs.mainPlanet))
			return false;
		if(!(score == rhs.score))
			return false;
		if(!(allianceID == rhs.allianceID))
			return false;
		if(!(experience == rhs.experience))
			return false;
		if(!(skillpoints == rhs.skillpoints))
			return false;
		if(!(skilltab == rhs.skilltab))
			return false;
		if(!(allianceName == rhs.allianceName))
			return false;
		if(!(unreadMessagesCount == rhs.unreadMessagesCount))
			return false;
		return true;
	}
	bool operator != (const Player& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Player&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Player& a, Player& b);

typedef struct _RessourceSet__isset
{
	_RessourceSet__isset() : tab(false) {}
	bool tab;
} _RessourceSet__isset;

class RessourceSet
{
public:

	static const char* ascii_fingerprint; // = "A803C54EAD95E24D90C5E66FB98EA72B";
	static const uint8_t binary_fingerprint[16]; // = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};

	RessourceSet()
	{
	}

	virtual ~RessourceSet() throw() {}

	std::vector<int32_t>  tab;

	_RessourceSet__isset __isset;

	void __set_tab(const std::vector<int32_t>& val)
	{
		tab = val;
	}

	bool operator == (const RessourceSet& rhs) const
	{
		if(!(tab == rhs.tab))
			return false;
		return true;
	}
	bool operator != (const RessourceSet& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const RessourceSet&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RessourceSet& a, RessourceSet& b);

typedef struct _PlanetTask__isset
{
	_PlanetTask__isset() : type(true), value(false), value2(false), lauchTime(false), duration(false), startCos(false), expired(false) {}
	bool type;
	bool value;
	bool value2;
	bool lauchTime;
	bool duration;
	bool startCos;
	bool expired;
} _PlanetTask__isset;

class PlanetTask
{
public:

	static const char* ascii_fingerprint; // = "19D77FE5BA23B2E932882446FD75CA83";
	static const uint8_t binary_fingerprint[16]; // = {0x19,0xD7,0x7F,0xE5,0xBA,0x23,0xB2,0xE9,0x32,0x88,0x24,0x46,0xFD,0x75,0xCA,0x83};

	PlanetTask() : type((PlanetTask_Enum::type)0), value(0), value2(0), lauchTime(0), duration(0), expired(0)
	{
		type = (PlanetTask_Enum::type)0;

	}

	virtual ~PlanetTask() throw() {}

	PlanetTask_Enum::type type;
	int32_t value;
	int32_t value2;
	int32_t lauchTime;
	int32_t duration;
	RessourceSet startCos;
	bool expired;

	_PlanetTask__isset __isset;

	void __set_type(const PlanetTask_Enum::type val)
	{
		type = val;
	}

	void __set_value(const int32_t val)
	{
		value = val;
	}

	void __set_value2(const int32_t val)
	{
		value2 = val;
	}

	void __set_lauchTime(const int32_t val)
	{
		lauchTime = val;
	}

	void __set_duration(const int32_t val)
	{
		duration = val;
	}

	void __set_startCos(const RessourceSet& val)
	{
		startCos = val;
	}

	void __set_expired(const bool val)
	{
		expired = val;
	}

	bool operator == (const PlanetTask& rhs) const
	{
		if(!(type == rhs.type))
			return false;
		if(!(value == rhs.value))
			return false;
		if(!(value2 == rhs.value2))
			return false;
		if(!(lauchTime == rhs.lauchTime))
			return false;
		if(!(duration == rhs.duration))
			return false;
		if(!(startCos == rhs.startCos))
			return false;
		if(!(expired == rhs.expired))
			return false;
		return true;
	}
	bool operator != (const PlanetTask& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const PlanetTask&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlanetTask& a, PlanetTask& b);

typedef struct _Building__isset
{
	_Building__isset() : index(false), price(false), coef(false) {}
	bool index;
	bool price;
	bool coef;
} _Building__isset;

class Building
{
public:

	static const char* ascii_fingerprint; // = "FD09D2C02D33B253CB5884E10282D019";
	static const uint8_t binary_fingerprint[16]; // = {0xFD,0x09,0xD2,0xC0,0x2D,0x33,0xB2,0x53,0xCB,0x58,0x84,0xE1,0x02,0x82,0xD0,0x19};

	Building() : index(0), coef(0)
	{
	}

	virtual ~Building() throw() {}

	int32_t index;
	RessourceSet price;
	double coef;

	_Building__isset __isset;

	void __set_index(const int32_t val)
	{
		index = val;
	}

	void __set_price(const RessourceSet& val)
	{
		price = val;
	}

	void __set_coef(const double val)
	{
		coef = val;
	}

	bool operator == (const Building& rhs) const
	{
		if(!(index == rhs.index))
			return false;
		if(!(price == rhs.price))
			return false;
		if(!(coef == rhs.coef))
			return false;
		return true;
	}
	bool operator != (const Building& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Building&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Building& a, Building& b);

typedef struct _Ship__isset
{
	_Ship__isset() : index(false), price(false), life(false), power(false) {}
	bool index;
	bool price;
	bool life;
	bool power;
} _Ship__isset;

class Ship
{
public:

	static const char* ascii_fingerprint; // = "947CF187B243FAE37B6AB77F54D6D8FA";
	static const uint8_t binary_fingerprint[16]; // = {0x94,0x7C,0xF1,0x87,0xB2,0x43,0xFA,0xE3,0x7B,0x6A,0xB7,0x7F,0x54,0xD6,0xD8,0xFA};

	Ship() : index(0), life(0), power(0)
	{
	}

	virtual ~Ship() throw() {}

	int32_t index;
	RessourceSet price;
	int32_t life;
	int32_t power;

	_Ship__isset __isset;

	void __set_index(const int32_t val)
	{
		index = val;
	}

	void __set_price(const RessourceSet& val)
	{
		price = val;
	}

	void __set_life(const int32_t val)
	{
		life = val;
	}

	void __set_power(const int32_t val)
	{
		power = val;
	}

	bool operator == (const Ship& rhs) const
	{
		if(!(index == rhs.index))
			return false;
		if(!(price == rhs.price))
			return false;
		if(!(life == rhs.life))
			return false;
		if(!(power == rhs.power))
			return false;
		return true;
	}
	bool operator != (const Ship& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Ship&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Ship& a, Ship& b);

typedef struct _Cannon__isset
{
	_Cannon__isset() : index(false), price(false), life(false), power(false) {}
	bool index;
	bool price;
	bool life;
	bool power;
} _Cannon__isset;

class Cannon
{
public:

	static const char* ascii_fingerprint; // = "947CF187B243FAE37B6AB77F54D6D8FA";
	static const uint8_t binary_fingerprint[16]; // = {0x94,0x7C,0xF1,0x87,0xB2,0x43,0xFA,0xE3,0x7B,0x6A,0xB7,0x7F,0x54,0xD6,0xD8,0xFA};

	Cannon() : index(0), life(0), power(0)
	{
	}

	virtual ~Cannon() throw() {}

	int32_t index;
	RessourceSet price;
	int32_t life;
	int32_t power;

	_Cannon__isset __isset;

	void __set_index(const int32_t val)
	{
		index = val;
	}

	void __set_price(const RessourceSet& val)
	{
		price = val;
	}

	void __set_life(const int32_t val)
	{
		life = val;
	}

	void __set_power(const int32_t val)
	{
		power = val;
	}

	bool operator == (const Cannon& rhs) const
	{
		if(!(index == rhs.index))
			return false;
		if(!(price == rhs.price))
			return false;
		if(!(life == rhs.life))
			return false;
		if(!(power == rhs.power))
			return false;
		return true;
	}
	bool operator != (const Cannon& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Cannon&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Cannon& a, Cannon& b);

typedef struct _FleetTask__isset
{
	_FleetTask__isset() : type(false), lauchTime(false), duration(false), position(false), expired(false) {}
	bool type;
	bool lauchTime;
	bool duration;
	bool position;
	bool expired;
} _FleetTask__isset;

class FleetTask
{
public:

	static const char* ascii_fingerprint; // = "143BF505F8C7FC02D011519505B27DD1";
	static const uint8_t binary_fingerprint[16]; // = {0x14,0x3B,0xF5,0x05,0xF8,0xC7,0xFC,0x02,0xD0,0x11,0x51,0x95,0x05,0xB2,0x7D,0xD1};

	FleetTask() : type((FleetTask_Enum::type)0), lauchTime(0), duration(0), expired(0)
	{
	}

	virtual ~FleetTask() throw() {}

	FleetTask_Enum::type type;
	int32_t lauchTime;
	int32_t duration;
	Coord position;
	bool expired;

	_FleetTask__isset __isset;

	void __set_type(const FleetTask_Enum::type val)
	{
		type = val;
	}

	void __set_lauchTime(const int32_t val)
	{
		lauchTime = val;
	}

	void __set_duration(const int32_t val)
	{
		duration = val;
	}

	void __set_position(const Coord& val)
	{
		position = val;
	}

	void __set_expired(const bool val)
	{
		expired = val;
	}

	bool operator == (const FleetTask& rhs) const
	{
		if(!(type == rhs.type))
			return false;
		if(!(lauchTime == rhs.lauchTime))
			return false;
		if(!(duration == rhs.duration))
			return false;
		if(!(position == rhs.position))
			return false;
		if(!(expired == rhs.expired))
			return false;
		return true;
	}
	bool operator != (const FleetTask& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const FleetTask&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FleetTask& a, FleetTask& b);

typedef struct _Planet__isset
{
	_Planet__isset() : name(false), coord(false), playerId(false), buildingList(false), task(false), ressourceSet(false), eventList(false), cannonTab(false), hangar(false), playerLogin(false), allianceID(false) {}
	bool name;
	bool coord;
	bool playerId;
	bool buildingList;
	bool task;
	bool ressourceSet;
	bool eventList;
	bool cannonTab;
	bool hangar;
	bool playerLogin;
	bool allianceID;
} _Planet__isset;

class Planet
{
public:

	static const char* ascii_fingerprint; // = "33A24B02E2AD80EE90A79C61E4B23AF0";
	static const uint8_t binary_fingerprint[16]; // = {0x33,0xA2,0x4B,0x02,0xE2,0xAD,0x80,0xEE,0x90,0xA7,0x9C,0x61,0xE4,0xB2,0x3A,0xF0};

	Planet() : name(), playerId(0), playerLogin(), allianceID(0)
	{
	}

	virtual ~Planet() throw() {}

	std::string name;
	Coord coord;
	Player_ID playerId;
	BuildingTab buildingList;
	PlanetTask task;
	RessourceSet ressourceSet;
	std::vector<Event>  eventList;
	std::vector<int32_t>  cannonTab;
	Fleet_ShipTab hangar;
	std::string playerLogin;
	Alliance_ID allianceID;

	_Planet__isset __isset;

	void __set_name(const std::string& val)
	{
		name = val;
	}

	void __set_coord(const Coord& val)
	{
		coord = val;
	}

	void __set_playerId(const Player_ID val)
	{
		playerId = val;
	}

	void __set_buildingList(const BuildingTab& val)
	{
		buildingList = val;
	}

	void __set_task(const PlanetTask& val)
	{
		task = val;
		__isset.task = true;
	}

	void __set_ressourceSet(const RessourceSet& val)
	{
		ressourceSet = val;
	}

	void __set_eventList(const std::vector<Event>& val)
	{
		eventList = val;
	}

	void __set_cannonTab(const std::vector<int32_t>& val)
	{
		cannonTab = val;
	}

	void __set_hangar(const Fleet_ShipTab& val)
	{
		hangar = val;
	}

	void __set_playerLogin(const std::string& val)
	{
		playerLogin = val;
	}

	void __set_allianceID(const Alliance_ID val)
	{
		allianceID = val;
	}

	bool operator == (const Planet& rhs) const
	{
		if(!(name == rhs.name))
			return false;
		if(!(coord == rhs.coord))
			return false;
		if(!(playerId == rhs.playerId))
			return false;
		if(!(buildingList == rhs.buildingList))
			return false;
		if(__isset.task != rhs.__isset.task)
			return false;
		else if(__isset.task && !(task == rhs.task))
			return false;
		if(!(ressourceSet == rhs.ressourceSet))
			return false;
		if(!(eventList == rhs.eventList))
			return false;
		if(!(cannonTab == rhs.cannonTab))
			return false;
		if(!(hangar == rhs.hangar))
			return false;
		if(!(playerLogin == rhs.playerLogin))
			return false;
		if(!(allianceID == rhs.allianceID))
			return false;
		return true;
	}
	bool operator != (const Planet& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Planet&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Planet& a, Planet& b);

typedef struct _Fleet__isset
{
	_Fleet__isset() : id(false), playerId(false), coord(false), origin(false), name(false), shipList(false), ressourceSet(false), task(false), eventList(false), playerLogin(false), allianceID(false) {}
	bool id;
	bool playerId;
	bool coord;
	bool origin;
	bool name;
	bool shipList;
	bool ressourceSet;
	bool task;
	bool eventList;
	bool playerLogin;
	bool allianceID;
} _Fleet__isset;

class Fleet
{
public:

	static const char* ascii_fingerprint; // = "0B1A7E668E354C09B0775CD997939DEA";
	static const uint8_t binary_fingerprint[16]; // = {0x0B,0x1A,0x7E,0x66,0x8E,0x35,0x4C,0x09,0xB0,0x77,0x5C,0xD9,0x97,0x93,0x9D,0xEA};

	Fleet() : id(0), playerId(0), name(), playerLogin(), allianceID(0)
	{
	}

	virtual ~Fleet() throw() {}

	Fleet_ID id;
	Player_ID playerId;
	Coord coord;
	Coord origin;
	std::string name;
	Fleet_ShipTab shipList;
	RessourceSet ressourceSet;
	FleetTask task;
	std::vector<Event>  eventList;
	std::string playerLogin;
	Alliance_ID allianceID;

	_Fleet__isset __isset;

	void __set_id(const Fleet_ID val)
	{
		id = val;
	}

	void __set_playerId(const Player_ID val)
	{
		playerId = val;
	}

	void __set_coord(const Coord& val)
	{
		coord = val;
	}

	void __set_origin(const Coord& val)
	{
		origin = val;
	}

	void __set_name(const std::string& val)
	{
		name = val;
	}

	void __set_shipList(const Fleet_ShipTab& val)
	{
		shipList = val;
	}

	void __set_ressourceSet(const RessourceSet& val)
	{
		ressourceSet = val;
	}

	void __set_task(const FleetTask& val)
	{
		task = val;
		__isset.task = true;
	}

	void __set_eventList(const std::vector<Event>& val)
	{
		eventList = val;
	}

	void __set_playerLogin(const std::string& val)
	{
		playerLogin = val;
	}

	void __set_allianceID(const Alliance_ID val)
	{
		allianceID = val;
	}

	bool operator == (const Fleet& rhs) const
	{
		if(!(id == rhs.id))
			return false;
		if(!(playerId == rhs.playerId))
			return false;
		if(!(coord == rhs.coord))
			return false;
		if(!(origin == rhs.origin))
			return false;
		if(!(name == rhs.name))
			return false;
		if(!(shipList == rhs.shipList))
			return false;
		if(!(ressourceSet == rhs.ressourceSet))
			return false;
		if(__isset.task != rhs.__isset.task)
			return false;
		else if(__isset.task && !(task == rhs.task))
			return false;
		if(!(eventList == rhs.eventList))
			return false;
		if(!(playerLogin == rhs.playerLogin))
			return false;
		if(!(allianceID == rhs.allianceID))
			return false;
		return true;
	}
	bool operator != (const Fleet& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Fleet&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Fleet& a, Fleet& b);

typedef struct _FleetAction__isset
{
	_FleetAction__isset() : action(false), target(false) {}
	bool action;
	bool target;
} _FleetAction__isset;

class FleetAction
{
public:

	static const char* ascii_fingerprint; // = "F6EF2A530E978464FF841B86E72EEFE1";
	static const uint8_t binary_fingerprint[16]; // = {0xF6,0xEF,0x2A,0x53,0x0E,0x97,0x84,0x64,0xFF,0x84,0x1B,0x86,0xE7,0x2E,0xEF,0xE1};

	FleetAction() : action((FleetAction_Type::type)0)
	{
	}

	virtual ~FleetAction() throw() {}

	FleetAction_Type::type action;
	Coord target;

	_FleetAction__isset __isset;

	void __set_action(const FleetAction_Type::type val)
	{
		action = val;
	}

	void __set_target(const Coord& val)
	{
		target = val;
	}

	bool operator == (const FleetAction& rhs) const
	{
		if(!(action == rhs.action))
			return false;
		if(!(target == rhs.target))
			return false;
		return true;
	}
	bool operator != (const FleetAction& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const FleetAction&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FleetAction& a, FleetAction& b);

typedef struct _FleetFightInfo__isset
{
	_FleetFightInfo__isset() : before(false), after(false) {}
	bool before;
	bool after;
} _FleetFightInfo__isset;

class FleetFightInfo
{
public:

	static const char* ascii_fingerprint; // = "D0758180A7F0D798FDE79413F8603335";
	static const uint8_t binary_fingerprint[16]; // = {0xD0,0x75,0x81,0x80,0xA7,0xF0,0xD7,0x98,0xFD,0xE7,0x94,0x13,0xF8,0x60,0x33,0x35};

	FleetFightInfo()
	{
	}

	virtual ~FleetFightInfo() throw() {}

	Fleet before;
	Fleet after;

	_FleetFightInfo__isset __isset;

	void __set_before(const Fleet& val)
	{
		before = val;
	}

	void __set_after(const Fleet& val)
	{
		after = val;
	}

	bool operator == (const FleetFightInfo& rhs) const
	{
		if(!(before == rhs.before))
			return false;
		if(!(after == rhs.after))
			return false;
		return true;
	}
	bool operator != (const FleetFightInfo& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const FleetFightInfo&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FleetFightInfo& a, FleetFightInfo& b);

typedef struct _FleetReport__isset
{
	_FleetReport__isset() : isDead(false), hasFight(false), experience(false), enemySet(false), fightInfo(false), wantEscape(false), escapeProba(false) {}
	bool isDead;
	bool hasFight;
	bool experience;
	bool enemySet;
	bool fightInfo;
	bool wantEscape;
	bool escapeProba;
} _FleetReport__isset;

class FleetReport
{
public:

	static const char* ascii_fingerprint; // = "798331421319096196F1594277E9F209";
	static const uint8_t binary_fingerprint[16]; // = {0x79,0x83,0x31,0x42,0x13,0x19,0x09,0x61,0x96,0xF1,0x59,0x42,0x77,0xE9,0xF2,0x09};

	FleetReport() : isDead(0), hasFight(0), experience(0), wantEscape(0), escapeProba(0)
	{
	}

	virtual ~FleetReport() throw() {}

	bool isDead;
	bool hasFight;
	int32_t experience;
	std::set<int32_t>  enemySet;
	FleetFightInfo fightInfo;
	bool wantEscape;
	double escapeProba;

	_FleetReport__isset __isset;

	void __set_isDead(const bool val)
	{
		isDead = val;
	}

	void __set_hasFight(const bool val)
	{
		hasFight = val;
	}

	void __set_experience(const int32_t val)
	{
		experience = val;
	}

	void __set_enemySet(const std::set<int32_t>& val)
	{
		enemySet = val;
	}

	void __set_fightInfo(const FleetFightInfo& val)
	{
		fightInfo = val;
	}

	void __set_wantEscape(const bool val)
	{
		wantEscape = val;
	}

	void __set_escapeProba(const double val)
	{
		escapeProba = val;
	}

	bool operator == (const FleetReport& rhs) const
	{
		if(!(isDead == rhs.isDead))
			return false;
		if(!(hasFight == rhs.hasFight))
			return false;
		if(!(experience == rhs.experience))
			return false;
		if(!(enemySet == rhs.enemySet))
			return false;
		if(!(fightInfo == rhs.fightInfo))
			return false;
		if(!(wantEscape == rhs.wantEscape))
			return false;
		if(!(escapeProba == rhs.escapeProba))
			return false;
		return true;
	}
	bool operator != (const FleetReport& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const FleetReport&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FleetReport& a, FleetReport& b);

typedef struct _PlanetFightInfo__isset
{
	_PlanetFightInfo__isset() : before(false), after(false) {}
	bool before;
	bool after;
} _PlanetFightInfo__isset;

class PlanetFightInfo
{
public:

	static const char* ascii_fingerprint; // = "B768EEDED4DD1E6A6F28528EBE79BEAF";
	static const uint8_t binary_fingerprint[16]; // = {0xB7,0x68,0xEE,0xDE,0xD4,0xDD,0x1E,0x6A,0x6F,0x28,0x52,0x8E,0xBE,0x79,0xBE,0xAF};

	PlanetFightInfo()
	{
	}

	virtual ~PlanetFightInfo() throw() {}

	Planet before;
	Planet after;

	_PlanetFightInfo__isset __isset;

	void __set_before(const Planet& val)
	{
		before = val;
	}

	void __set_after(const Planet& val)
	{
		after = val;
	}

	bool operator == (const PlanetFightInfo& rhs) const
	{
		if(!(before == rhs.before))
			return false;
		if(!(after == rhs.after))
			return false;
		return true;
	}
	bool operator != (const PlanetFightInfo& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const PlanetFightInfo&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlanetFightInfo& a, PlanetFightInfo& b);

typedef struct _PlanetReport__isset
{
	_PlanetReport__isset() : isDead(false), hasFight(false), experience(false), enemySet(false), fightInfo(false) {}
	bool isDead;
	bool hasFight;
	bool experience;
	bool enemySet;
	bool fightInfo;
} _PlanetReport__isset;

class PlanetReport
{
public:

	static const char* ascii_fingerprint; // = "DCAC5CB5847AB83B4EDDC975A24E37E6";
	static const uint8_t binary_fingerprint[16]; // = {0xDC,0xAC,0x5C,0xB5,0x84,0x7A,0xB8,0x3B,0x4E,0xDD,0xC9,0x75,0xA2,0x4E,0x37,0xE6};

	PlanetReport() : isDead(0), hasFight(0), experience(0)
	{
	}

	virtual ~PlanetReport() throw() {}

	bool isDead;
	bool hasFight;
	int32_t experience;
	std::set<int32_t>  enemySet;
	PlanetFightInfo fightInfo;

	_PlanetReport__isset __isset;

	void __set_isDead(const bool val)
	{
		isDead = val;
	}

	void __set_hasFight(const bool val)
	{
		hasFight = val;
	}

	void __set_experience(const int32_t val)
	{
		experience = val;
	}

	void __set_enemySet(const std::set<int32_t>& val)
	{
		enemySet = val;
	}

	void __set_fightInfo(const PlanetFightInfo& val)
	{
		fightInfo = val;
	}

	bool operator == (const PlanetReport& rhs) const
	{
		if(!(isDead == rhs.isDead))
			return false;
		if(!(hasFight == rhs.hasFight))
			return false;
		if(!(experience == rhs.experience))
			return false;
		if(!(enemySet == rhs.enemySet))
			return false;
		if(!(fightInfo == rhs.fightInfo))
			return false;
		return true;
	}
	bool operator != (const PlanetReport& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const PlanetReport&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlanetReport& a, PlanetReport& b);

typedef struct _FightReport__isset
{
	_FightReport__isset() : fleetList(false), hasPlanet(false), planet(false) {}
	bool fleetList;
	bool hasPlanet;
	bool planet;
} _FightReport__isset;

class FightReport
{
public:

	static const char* ascii_fingerprint; // = "84AC3FBF8353407C70EC4A13771F84F4";
	static const uint8_t binary_fingerprint[16]; // = {0x84,0xAC,0x3F,0xBF,0x83,0x53,0x40,0x7C,0x70,0xEC,0x4A,0x13,0x77,0x1F,0x84,0xF4};

	FightReport() : hasPlanet(0)
	{
	}

	virtual ~FightReport() throw() {}

	std::vector<FleetReport>  fleetList;
	bool hasPlanet;
	PlanetReport planet;

	_FightReport__isset __isset;

	void __set_fleetList(const std::vector<FleetReport>& val)
	{
		fleetList = val;
	}

	void __set_hasPlanet(const bool val)
	{
		hasPlanet = val;
	}

	void __set_planet(const PlanetReport& val)
	{
		planet = val;
		__isset.planet = true;
	}

	bool operator == (const FightReport& rhs) const
	{
		if(!(fleetList == rhs.fleetList))
			return false;
		if(!(hasPlanet == rhs.hasPlanet))
			return false;
		if(__isset.planet != rhs.__isset.planet)
			return false;
		else if(__isset.planet && !(planet == rhs.planet))
			return false;
		return true;
	}
	bool operator != (const FightReport& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const FightReport&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FightReport& a, FightReport& b);

typedef struct _Universe__isset
{
	_Universe__isset() : playerMap(false), planetMap(false), fleetMap(false), reportMap(false), nextPlayerID(false), nextFleetID(false), time(false) {}
	bool playerMap;
	bool planetMap;
	bool fleetMap;
	bool reportMap;
	bool nextPlayerID;
	bool nextFleetID;
	bool time;
} _Universe__isset;

class Universe
{
public:

	static const char* ascii_fingerprint; // = "79DAEAF925FDDD5A224976224E51CE70";
	static const uint8_t binary_fingerprint[16]; // = {0x79,0xDA,0xEA,0xF9,0x25,0xFD,0xDD,0x5A,0x22,0x49,0x76,0x22,0x4E,0x51,0xCE,0x70};

	Universe() : nextPlayerID(0), nextFleetID(0), time(0)
	{
	}

	virtual ~Universe() throw() {}

	Universe_PlayerMap playerMap;
	Universe_PlanetMap planetMap;
	std::map<Fleet_ID, Fleet>  fleetMap;
	ReportMap reportMap;
	Player_ID nextPlayerID;
	Fleet_ID nextFleetID;
	int32_t time;

	_Universe__isset __isset;

	void __set_playerMap(const Universe_PlayerMap& val)
	{
		playerMap = val;
	}

	void __set_planetMap(const Universe_PlanetMap& val)
	{
		planetMap = val;
	}

	void __set_fleetMap(const std::map<Fleet_ID, Fleet>& val)
	{
		fleetMap = val;
	}

	void __set_reportMap(const ReportMap& val)
	{
		reportMap = val;
	}

	void __set_nextPlayerID(const Player_ID val)
	{
		nextPlayerID = val;
	}

	void __set_nextFleetID(const Fleet_ID val)
	{
		nextFleetID = val;
	}

	void __set_time(const int32_t val)
	{
		time = val;
	}

	bool operator == (const Universe& rhs) const
	{
		if(!(playerMap == rhs.playerMap))
			return false;
		if(!(planetMap == rhs.planetMap))
			return false;
		if(!(fleetMap == rhs.fleetMap))
			return false;
		if(!(reportMap == rhs.reportMap))
			return false;
		if(!(nextPlayerID == rhs.nextPlayerID))
			return false;
		if(!(nextFleetID == rhs.nextFleetID))
			return false;
		if(!(time == rhs.time))
			return false;
		return true;
	}
	bool operator != (const Universe& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Universe&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Universe& a, Universe& b);

typedef struct _OptionalPlayer__isset
{
	_OptionalPlayer__isset() : player(false) {}
	bool player;
} _OptionalPlayer__isset;

class OptionalPlayer
{
public:

	static const char* ascii_fingerprint; // = "301875F38C300BE8859F93153862C87A";
	static const uint8_t binary_fingerprint[16]; // = {0x30,0x18,0x75,0xF3,0x8C,0x30,0x0B,0xE8,0x85,0x9F,0x93,0x15,0x38,0x62,0xC8,0x7A};

	OptionalPlayer()
	{
	}

	virtual ~OptionalPlayer() throw() {}

	Player player;

	_OptionalPlayer__isset __isset;

	void __set_player(const Player& val)
	{
		player = val;
		__isset.player = true;
	}

	bool operator == (const OptionalPlayer& rhs) const
	{
		if(__isset.player != rhs.__isset.player)
			return false;
		else if(__isset.player && !(player == rhs.player))
			return false;
		return true;
	}
	bool operator != (const OptionalPlayer& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const OptionalPlayer&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(OptionalPlayer& a, OptionalPlayer& b);

typedef struct _TimeInfo__isset
{
	_TimeInfo__isset() : roundDuration(false), univTime(false) {}
	bool roundDuration;
	bool univTime;
} _TimeInfo__isset;

class TimeInfo
{
public:

	static const char* ascii_fingerprint; // = "9EA78140CD5F29ED0DA93A6F86CC34E1";
	static const uint8_t binary_fingerprint[16]; // = {0x9E,0xA7,0x81,0x40,0xCD,0x5F,0x29,0xED,0x0D,0xA9,0x3A,0x6F,0x86,0xCC,0x34,0xE1};

	TimeInfo() : roundDuration(0), univTime(0)
	{
	}

	virtual ~TimeInfo() throw() {}

	double roundDuration;
	double univTime;

	_TimeInfo__isset __isset;

	void __set_roundDuration(const double val)
	{
		roundDuration = val;
	}

	void __set_univTime(const double val)
	{
		univTime = val;
	}

	bool operator == (const TimeInfo& rhs) const
	{
		if(!(roundDuration == rhs.roundDuration))
			return false;
		if(!(univTime == rhs.univTime))
			return false;
		return true;
	}
	bool operator != (const TimeInfo& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const TimeInfo&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TimeInfo& a, TimeInfo& b);

typedef struct _FleetList__isset
{
	_FleetList__isset() : fleetList(false), planetList(false), fleetCount(false) {}
	bool fleetList;
	bool planetList;
	bool fleetCount;
} _FleetList__isset;

class FleetList
{
public:

	static const char* ascii_fingerprint; // = "E37720D14C0E090792B4FECE48A2E487";
	static const uint8_t binary_fingerprint[16]; // = {0xE3,0x77,0x20,0xD1,0x4C,0x0E,0x09,0x07,0x92,0xB4,0xFE,0xCE,0x48,0xA2,0xE4,0x87};

	FleetList() : fleetCount(0)
	{
	}

	virtual ~FleetList() throw() {}

	std::vector<Fleet>  fleetList;
	std::vector<Planet>  planetList;
	int32_t fleetCount;

	_FleetList__isset __isset;

	void __set_fleetList(const std::vector<Fleet>& val)
	{
		fleetList = val;
	}

	void __set_planetList(const std::vector<Planet>& val)
	{
		planetList = val;
	}

	void __set_fleetCount(const int32_t val)
	{
		fleetCount = val;
	}

	bool operator == (const FleetList& rhs) const
	{
		if(!(fleetList == rhs.fleetList))
			return false;
		if(!(planetList == rhs.planetList))
			return false;
		if(!(fleetCount == rhs.fleetCount))
			return false;
		return true;
	}
	bool operator != (const FleetList& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const FleetList&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FleetList& a, FleetList& b);

typedef struct _PlanetList__isset
{
	_PlanetList__isset() : planetList(false), planetCount(false) {}
	bool planetList;
	bool planetCount;
} _PlanetList__isset;

class PlanetList
{
public:

	static const char* ascii_fingerprint; // = "CC0D6E88C62081AE370D3E7CAB34B493";
	static const uint8_t binary_fingerprint[16]; // = {0xCC,0x0D,0x6E,0x88,0xC6,0x20,0x81,0xAE,0x37,0x0D,0x3E,0x7C,0xAB,0x34,0xB4,0x93};

	PlanetList() : planetCount(0)
	{
	}

	virtual ~PlanetList() throw() {}

	std::vector<Planet>  planetList;
	int32_t planetCount;

	_PlanetList__isset __isset;

	void __set_planetList(const std::vector<Planet>& val)
	{
		planetList = val;
	}

	void __set_planetCount(const int32_t val)
	{
		planetCount = val;
	}

	bool operator == (const PlanetList& rhs) const
	{
		if(!(planetList == rhs.planetList))
			return false;
		if(!(planetCount == rhs.planetCount))
			return false;
		return true;
	}
	bool operator != (const PlanetList& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const PlanetList&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PlanetList& a, PlanetList& b);

typedef struct _Message__isset
{
	_Message__isset() : id(false), sender(false), recipient(false), time(false), subject(false), message(false), senderLogin(false) {}
	bool id;
	bool sender;
	bool recipient;
	bool time;
	bool subject;
	bool message;
	bool senderLogin;
} _Message__isset;

class Message
{
public:

	static const char* ascii_fingerprint; // = "5CC9038C07BF78A8A3E0F4D71F63E8A0";
	static const uint8_t binary_fingerprint[16]; // = {0x5C,0xC9,0x03,0x8C,0x07,0xBF,0x78,0xA8,0xA3,0xE0,0xF4,0xD7,0x1F,0x63,0xE8,0xA0};

	Message() : id(0), sender(0), recipient(0), time(0), subject(), message(), senderLogin()
	{
	}

	virtual ~Message() throw() {}

	Message_ID id;
	Player_ID sender;
	Player_ID recipient;
	int32_t time;
	std::string subject;
	std::string message;
	std::string senderLogin;

	_Message__isset __isset;

	void __set_id(const Message_ID val)
	{
		id = val;
	}

	void __set_sender(const Player_ID val)
	{
		sender = val;
	}

	void __set_recipient(const Player_ID val)
	{
		recipient = val;
	}

	void __set_time(const int32_t val)
	{
		time = val;
	}

	void __set_subject(const std::string& val)
	{
		subject = val;
	}

	void __set_message(const std::string& val)
	{
		message = val;
	}

	void __set_senderLogin(const std::string& val)
	{
		senderLogin = val;
	}

	bool operator == (const Message& rhs) const
	{
		if(!(id == rhs.id))
			return false;
		if(!(sender == rhs.sender))
			return false;
		if(!(recipient == rhs.recipient))
			return false;
		if(!(time == rhs.time))
			return false;
		if(!(subject == rhs.subject))
			return false;
		if(!(message == rhs.message))
			return false;
		if(!(senderLogin == rhs.senderLogin))
			return false;
		return true;
	}
	bool operator != (const Message& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const Message&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Message& a, Message& b);

typedef struct _FriendshipRequests__isset
{
	_FriendshipRequests__isset() : sent(false), received(false) {}
	bool sent;
	bool received;
} _FriendshipRequests__isset;

class FriendshipRequests
{
public:

	static const char* ascii_fingerprint; // = "6FEEBE81F97BC79B5C1335C39ABB11B8";
	static const uint8_t binary_fingerprint[16]; // = {0x6F,0xEE,0xBE,0x81,0xF9,0x7B,0xC7,0x9B,0x5C,0x13,0x35,0xC3,0x9A,0xBB,0x11,0xB8};

	FriendshipRequests()
	{
	}

	virtual ~FriendshipRequests() throw() {}

	std::vector<Player>  sent;
	std::vector<Player>  received;

	_FriendshipRequests__isset __isset;

	void __set_sent(const std::vector<Player>& val)
	{
		sent = val;
	}

	void __set_received(const std::vector<Player>& val)
	{
		received = val;
	}

	bool operator == (const FriendshipRequests& rhs) const
	{
		if(!(sent == rhs.sent))
			return false;
		if(!(received == rhs.received))
			return false;
		return true;
	}
	bool operator != (const FriendshipRequests& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const FriendshipRequests&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FriendshipRequests& a, FriendshipRequests& b);

} // namespace

#endif
