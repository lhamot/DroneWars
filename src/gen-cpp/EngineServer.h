/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EngineServer_H
#define EngineServer_H

#include <thrift/TDispatchProcessor.h>
#include "thrift_types.h"

namespace ndw
{

class EngineServerIf
{
public:
	virtual ~EngineServerIf() {}
	virtual void start() = 0;
	virtual void stop() = 0;
	virtual bool addPlayer(const std::string& login, const std::string& password) = 0;
	virtual void getPlayerFleets(FleetList& _return, const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc, const int32_t value) = 0;
	virtual void getPlayerPlanets(PlanetList& _return, const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc, const int32_t value) = 0;
	virtual void setPlayerFleetCode(const Player_ID pid, const std::string& code) = 0;
	virtual void setPlayerPlanetCode(const Player_ID pid, const std::string& code) = 0;
	virtual void setPlayerFleetBlocklyCode(const Player_ID pid, const std::string& code) = 0;
	virtual void setPlayerPlanetBlocklyCode(const Player_ID pid, const std::string& code) = 0;
	virtual void getPlayerFleetCode(CodeData& _return, const Player_ID pid) = 0;
	virtual void getPlayerPlanetCode(CodeData& _return, const Player_ID pid) = 0;
	virtual void getPlayers(std::vector<Player>& _return) = 0;
	virtual void getPlayer(Player& _return, const Player_ID pid) = 0;
	virtual void getPlanet(std::vector<Planet>& _return, const Coord& coord) = 0;
	virtual void getFleet(Fleet& _return, const Fleet_ID fid) = 0;
	virtual void logPlayer(OptionalPlayer& _return, const std::string& login, const std::string& password) = 0;
	virtual void incrementTutoDisplayed(const Player_ID pid, const std::string& tutoName, const int32_t value) = 0;
	virtual void getFightReport(FightReport& _return, const int32_t id) = 0;
	virtual void getTimeInfo(TimeInfo& _return) = 0;
	virtual bool eraseAccount(const Player_ID pid, const std::string& password) = 0;
	virtual void getPlayerEvents(std::vector<Event>& _return, const Player_ID pid) = 0;
	virtual bool buySkill(const Player_ID pid, const int16_t skillID) = 0;
	virtual void getBuildingsInfo(std::vector<Building>& _return) = 0;
	virtual void getCannonsInfo(std::vector<Cannon>& _return) = 0;
	virtual void getShipsInfo(std::vector<Ship>& _return) = 0;
	virtual void addMessage(const Player_ID sender, const Player_ID recipient, const std::string& suject, const std::string& message) = 0;
	virtual void getMessages(std::vector<Message>& _return, const Player_ID recipient) = 0;
	virtual void eraseMesage(const Message_ID mid) = 0;
	virtual void addFriendshipRequest(const Player_ID playerA, const Player_ID playerB) = 0;
	virtual void acceptFriendshipRequest(const Player_ID playerA, const Player_ID playerB, const bool accept) = 0;
	virtual void closeFriendship(const Player_ID playerA, const Player_ID playerB) = 0;
	virtual void getFriends(std::vector<Player>& _return, const Player_ID player) = 0;
	virtual void getFriendshipRequest(FriendshipRequests& _return, const Player_ID player) = 0;
	virtual Alliance_ID addAlliance(const Player_ID pid, const std::string& name, const std::string& description) = 0;
	virtual void getAlliance(Alliance& _return, const Alliance_ID aid) = 0;
	virtual void updateAlliance(const Alliance& alliance) = 0;
	virtual void transfertAlliance(const Alliance_ID aid, const Player_ID pid) = 0;
	virtual void eraseAlliance(const Alliance_ID aid) = 0;
	virtual void joinAlliance(const Player_ID pid, const Alliance_ID aid) = 0;
	virtual void quitAlliance(const Player_ID pid) = 0;
};

class EngineServerIfFactory
{
public:
	typedef EngineServerIf Handler;

	virtual ~EngineServerIfFactory() {}

	virtual EngineServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
	virtual void releaseHandler(EngineServerIf* /* handler */) = 0;
};

class EngineServerIfSingletonFactory : virtual public EngineServerIfFactory
{
public:
	EngineServerIfSingletonFactory(const boost::shared_ptr<EngineServerIf>& iface) : iface_(iface) {}
	virtual ~EngineServerIfSingletonFactory() {}

	virtual EngineServerIf* getHandler(const ::apache::thrift::TConnectionInfo&)
	{
		return iface_.get();
	}
	virtual void releaseHandler(EngineServerIf* /* handler */) {}

protected:
	boost::shared_ptr<EngineServerIf> iface_;
};

class EngineServerNull : virtual public EngineServerIf
{
public:
	virtual ~EngineServerNull() {}
	void start()
	{
		return;
	}
	void stop()
	{
		return;
	}
	bool addPlayer(const std::string& /* login */, const std::string& /* password */)
	{
		bool _return = false;
		return _return;
	}
	void getPlayerFleets(FleetList& /* _return */, const Player_ID /* pid */, const int32_t /* beginIndex */, const int32_t /* endIndex */, const Sort_Type::type /* sortType */, const bool /* asc */, const int32_t /* value */)
	{
		return;
	}
	void getPlayerPlanets(PlanetList& /* _return */, const Player_ID /* pid */, const int32_t /* beginIndex */, const int32_t /* endIndex */, const Sort_Type::type /* sortType */, const bool /* asc */, const int32_t /* value */)
	{
		return;
	}
	void setPlayerFleetCode(const Player_ID /* pid */, const std::string& /* code */)
	{
		return;
	}
	void setPlayerPlanetCode(const Player_ID /* pid */, const std::string& /* code */)
	{
		return;
	}
	void setPlayerFleetBlocklyCode(const Player_ID /* pid */, const std::string& /* code */)
	{
		return;
	}
	void setPlayerPlanetBlocklyCode(const Player_ID /* pid */, const std::string& /* code */)
	{
		return;
	}
	void getPlayerFleetCode(CodeData& /* _return */, const Player_ID /* pid */)
	{
		return;
	}
	void getPlayerPlanetCode(CodeData& /* _return */, const Player_ID /* pid */)
	{
		return;
	}
	void getPlayers(std::vector<Player>& /* _return */)
	{
		return;
	}
	void getPlayer(Player& /* _return */, const Player_ID /* pid */)
	{
		return;
	}
	void getPlanet(std::vector<Planet>& /* _return */, const Coord& /* coord */)
	{
		return;
	}
	void getFleet(Fleet& /* _return */, const Fleet_ID /* fid */)
	{
		return;
	}
	void logPlayer(OptionalPlayer& /* _return */, const std::string& /* login */, const std::string& /* password */)
	{
		return;
	}
	void incrementTutoDisplayed(const Player_ID /* pid */, const std::string& /* tutoName */, const int32_t /* value */)
	{
		return;
	}
	void getFightReport(FightReport& /* _return */, const int32_t /* id */)
	{
		return;
	}
	void getTimeInfo(TimeInfo& /* _return */)
	{
		return;
	}
	bool eraseAccount(const Player_ID /* pid */, const std::string& /* password */)
	{
		bool _return = false;
		return _return;
	}
	void getPlayerEvents(std::vector<Event>& /* _return */, const Player_ID /* pid */)
	{
		return;
	}
	bool buySkill(const Player_ID /* pid */, const int16_t /* skillID */)
	{
		bool _return = false;
		return _return;
	}
	void getBuildingsInfo(std::vector<Building>& /* _return */)
	{
		return;
	}
	void getCannonsInfo(std::vector<Cannon>& /* _return */)
	{
		return;
	}
	void getShipsInfo(std::vector<Ship>& /* _return */)
	{
		return;
	}
	void addMessage(const Player_ID /* sender */, const Player_ID /* recipient */, const std::string& /* suject */, const std::string& /* message */)
	{
		return;
	}
	void getMessages(std::vector<Message>& /* _return */, const Player_ID /* recipient */)
	{
		return;
	}
	void eraseMesage(const Message_ID /* mid */)
	{
		return;
	}
	void addFriendshipRequest(const Player_ID /* playerA */, const Player_ID /* playerB */)
	{
		return;
	}
	void acceptFriendshipRequest(const Player_ID /* playerA */, const Player_ID /* playerB */, const bool /* accept */)
	{
		return;
	}
	void closeFriendship(const Player_ID /* playerA */, const Player_ID /* playerB */)
	{
		return;
	}
	void getFriends(std::vector<Player>& /* _return */, const Player_ID /* player */)
	{
		return;
	}
	void getFriendshipRequest(FriendshipRequests& /* _return */, const Player_ID /* player */)
	{
		return;
	}
	Alliance_ID addAlliance(const Player_ID /* pid */, const std::string& /* name */, const std::string& /* description */)
	{
		Alliance_ID _return = 0;
		return _return;
	}
	void getAlliance(Alliance& /* _return */, const Alliance_ID /* aid */)
	{
		return;
	}
	void updateAlliance(const Alliance& /* alliance */)
	{
		return;
	}
	void transfertAlliance(const Alliance_ID /* aid */, const Player_ID /* pid */)
	{
		return;
	}
	void eraseAlliance(const Alliance_ID /* aid */)
	{
		return;
	}
	void joinAlliance(const Player_ID /* pid */, const Alliance_ID /* aid */)
	{
		return;
	}
	void quitAlliance(const Player_ID /* pid */)
	{
		return;
	}
};


class EngineServer_start_args
{
public:

	EngineServer_start_args()
	{
	}

	virtual ~EngineServer_start_args() throw() {}


	bool operator == (const EngineServer_start_args& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_start_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_start_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_start_pargs
{
public:


	virtual ~EngineServer_start_pargs() throw() {}


	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_start_result
{
public:

	EngineServer_start_result()
	{
	}

	virtual ~EngineServer_start_result() throw() {}


	bool operator == (const EngineServer_start_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_start_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_start_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_start_presult
{
public:


	virtual ~EngineServer_start_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EngineServer_stop_args
{
public:

	EngineServer_stop_args()
	{
	}

	virtual ~EngineServer_stop_args() throw() {}


	bool operator == (const EngineServer_stop_args& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_stop_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_stop_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_stop_pargs
{
public:


	virtual ~EngineServer_stop_pargs() throw() {}


	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_stop_result
{
public:

	EngineServer_stop_result()
	{
	}

	virtual ~EngineServer_stop_result() throw() {}


	bool operator == (const EngineServer_stop_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_stop_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_stop_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_stop_presult
{
public:


	virtual ~EngineServer_stop_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_addPlayer_args__isset
{
	_EngineServer_addPlayer_args__isset() : login(false), password(false) {}
	bool login;
	bool password;
} _EngineServer_addPlayer_args__isset;

class EngineServer_addPlayer_args
{
public:

	EngineServer_addPlayer_args() : login(), password()
	{
	}

	virtual ~EngineServer_addPlayer_args() throw() {}

	std::string login;
	std::string password;

	_EngineServer_addPlayer_args__isset __isset;

	void __set_login(const std::string& val)
	{
		login = val;
	}

	void __set_password(const std::string& val)
	{
		password = val;
	}

	bool operator == (const EngineServer_addPlayer_args& rhs) const
	{
		if(!(login == rhs.login))
			return false;
		if(!(password == rhs.password))
			return false;
		return true;
	}
	bool operator != (const EngineServer_addPlayer_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_addPlayer_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_addPlayer_pargs
{
public:


	virtual ~EngineServer_addPlayer_pargs() throw() {}

	const std::string* login;
	const std::string* password;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_addPlayer_result__isset
{
	_EngineServer_addPlayer_result__isset() : success(false) {}
	bool success;
} _EngineServer_addPlayer_result__isset;

class EngineServer_addPlayer_result
{
public:

	EngineServer_addPlayer_result() : success(0)
	{
	}

	virtual ~EngineServer_addPlayer_result() throw() {}

	bool success;

	_EngineServer_addPlayer_result__isset __isset;

	void __set_success(const bool val)
	{
		success = val;
	}

	bool operator == (const EngineServer_addPlayer_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_addPlayer_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_addPlayer_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_addPlayer_presult__isset
{
	_EngineServer_addPlayer_presult__isset() : success(false) {}
	bool success;
} _EngineServer_addPlayer_presult__isset;

class EngineServer_addPlayer_presult
{
public:


	virtual ~EngineServer_addPlayer_presult() throw() {}

	bool* success;

	_EngineServer_addPlayer_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_getPlayerFleets_args__isset
{
	_EngineServer_getPlayerFleets_args__isset() : pid(false), beginIndex(false), endIndex(false), sortType(false), asc(false), value(true) {}
	bool pid;
	bool beginIndex;
	bool endIndex;
	bool sortType;
	bool asc;
	bool value;
} _EngineServer_getPlayerFleets_args__isset;

class EngineServer_getPlayerFleets_args
{
public:

	EngineServer_getPlayerFleets_args() : pid(0), beginIndex(0), endIndex(0), sortType((Sort_Type::type)0), asc(0), value(0)
	{
	}

	virtual ~EngineServer_getPlayerFleets_args() throw() {}

	Player_ID pid;
	int32_t beginIndex;
	int32_t endIndex;
	Sort_Type::type sortType;
	bool asc;
	int32_t value;

	_EngineServer_getPlayerFleets_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	void __set_beginIndex(const int32_t val)
	{
		beginIndex = val;
	}

	void __set_endIndex(const int32_t val)
	{
		endIndex = val;
	}

	void __set_sortType(const Sort_Type::type val)
	{
		sortType = val;
	}

	void __set_asc(const bool val)
	{
		asc = val;
	}

	void __set_value(const int32_t val)
	{
		value = val;
	}

	bool operator == (const EngineServer_getPlayerFleets_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		if(!(beginIndex == rhs.beginIndex))
			return false;
		if(!(endIndex == rhs.endIndex))
			return false;
		if(!(sortType == rhs.sortType))
			return false;
		if(!(asc == rhs.asc))
			return false;
		if(!(value == rhs.value))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getPlayerFleets_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlayerFleets_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getPlayerFleets_pargs
{
public:


	virtual ~EngineServer_getPlayerFleets_pargs() throw() {}

	const Player_ID* pid;
	const int32_t* beginIndex;
	const int32_t* endIndex;
	const Sort_Type::type* sortType;
	const bool* asc;
	const int32_t* value;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlayerFleets_result__isset
{
	_EngineServer_getPlayerFleets_result__isset() : success(false) {}
	bool success;
} _EngineServer_getPlayerFleets_result__isset;

class EngineServer_getPlayerFleets_result
{
public:

	EngineServer_getPlayerFleets_result()
	{
	}

	virtual ~EngineServer_getPlayerFleets_result() throw() {}

	FleetList success;

	_EngineServer_getPlayerFleets_result__isset __isset;

	void __set_success(const FleetList& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getPlayerFleets_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getPlayerFleets_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlayerFleets_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlayerFleets_presult__isset
{
	_EngineServer_getPlayerFleets_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getPlayerFleets_presult__isset;

class EngineServer_getPlayerFleets_presult
{
public:


	virtual ~EngineServer_getPlayerFleets_presult() throw() {}

	FleetList* success;

	_EngineServer_getPlayerFleets_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_getPlayerPlanets_args__isset
{
	_EngineServer_getPlayerPlanets_args__isset() : pid(false), beginIndex(false), endIndex(false), sortType(false), asc(false), value(true) {}
	bool pid;
	bool beginIndex;
	bool endIndex;
	bool sortType;
	bool asc;
	bool value;
} _EngineServer_getPlayerPlanets_args__isset;

class EngineServer_getPlayerPlanets_args
{
public:

	EngineServer_getPlayerPlanets_args() : pid(0), beginIndex(0), endIndex(0), sortType((Sort_Type::type)0), asc(0), value(0)
	{
	}

	virtual ~EngineServer_getPlayerPlanets_args() throw() {}

	Player_ID pid;
	int32_t beginIndex;
	int32_t endIndex;
	Sort_Type::type sortType;
	bool asc;
	int32_t value;

	_EngineServer_getPlayerPlanets_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	void __set_beginIndex(const int32_t val)
	{
		beginIndex = val;
	}

	void __set_endIndex(const int32_t val)
	{
		endIndex = val;
	}

	void __set_sortType(const Sort_Type::type val)
	{
		sortType = val;
	}

	void __set_asc(const bool val)
	{
		asc = val;
	}

	void __set_value(const int32_t val)
	{
		value = val;
	}

	bool operator == (const EngineServer_getPlayerPlanets_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		if(!(beginIndex == rhs.beginIndex))
			return false;
		if(!(endIndex == rhs.endIndex))
			return false;
		if(!(sortType == rhs.sortType))
			return false;
		if(!(asc == rhs.asc))
			return false;
		if(!(value == rhs.value))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getPlayerPlanets_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlayerPlanets_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getPlayerPlanets_pargs
{
public:


	virtual ~EngineServer_getPlayerPlanets_pargs() throw() {}

	const Player_ID* pid;
	const int32_t* beginIndex;
	const int32_t* endIndex;
	const Sort_Type::type* sortType;
	const bool* asc;
	const int32_t* value;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlayerPlanets_result__isset
{
	_EngineServer_getPlayerPlanets_result__isset() : success(false) {}
	bool success;
} _EngineServer_getPlayerPlanets_result__isset;

class EngineServer_getPlayerPlanets_result
{
public:

	EngineServer_getPlayerPlanets_result()
	{
	}

	virtual ~EngineServer_getPlayerPlanets_result() throw() {}

	PlanetList success;

	_EngineServer_getPlayerPlanets_result__isset __isset;

	void __set_success(const PlanetList& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getPlayerPlanets_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getPlayerPlanets_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlayerPlanets_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlayerPlanets_presult__isset
{
	_EngineServer_getPlayerPlanets_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getPlayerPlanets_presult__isset;

class EngineServer_getPlayerPlanets_presult
{
public:


	virtual ~EngineServer_getPlayerPlanets_presult() throw() {}

	PlanetList* success;

	_EngineServer_getPlayerPlanets_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_setPlayerFleetCode_args__isset
{
	_EngineServer_setPlayerFleetCode_args__isset() : pid(false), code(false) {}
	bool pid;
	bool code;
} _EngineServer_setPlayerFleetCode_args__isset;

class EngineServer_setPlayerFleetCode_args
{
public:

	EngineServer_setPlayerFleetCode_args() : pid(0), code()
	{
	}

	virtual ~EngineServer_setPlayerFleetCode_args() throw() {}

	Player_ID pid;
	std::string code;

	_EngineServer_setPlayerFleetCode_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	void __set_code(const std::string& val)
	{
		code = val;
	}

	bool operator == (const EngineServer_setPlayerFleetCode_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		if(!(code == rhs.code))
			return false;
		return true;
	}
	bool operator != (const EngineServer_setPlayerFleetCode_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_setPlayerFleetCode_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_setPlayerFleetCode_pargs
{
public:


	virtual ~EngineServer_setPlayerFleetCode_pargs() throw() {}

	const Player_ID* pid;
	const std::string* code;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_setPlayerFleetCode_result
{
public:

	EngineServer_setPlayerFleetCode_result()
	{
	}

	virtual ~EngineServer_setPlayerFleetCode_result() throw() {}


	bool operator == (const EngineServer_setPlayerFleetCode_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_setPlayerFleetCode_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_setPlayerFleetCode_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_setPlayerFleetCode_presult
{
public:


	virtual ~EngineServer_setPlayerFleetCode_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_setPlayerPlanetCode_args__isset
{
	_EngineServer_setPlayerPlanetCode_args__isset() : pid(false), code(false) {}
	bool pid;
	bool code;
} _EngineServer_setPlayerPlanetCode_args__isset;

class EngineServer_setPlayerPlanetCode_args
{
public:

	EngineServer_setPlayerPlanetCode_args() : pid(0), code()
	{
	}

	virtual ~EngineServer_setPlayerPlanetCode_args() throw() {}

	Player_ID pid;
	std::string code;

	_EngineServer_setPlayerPlanetCode_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	void __set_code(const std::string& val)
	{
		code = val;
	}

	bool operator == (const EngineServer_setPlayerPlanetCode_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		if(!(code == rhs.code))
			return false;
		return true;
	}
	bool operator != (const EngineServer_setPlayerPlanetCode_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_setPlayerPlanetCode_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_setPlayerPlanetCode_pargs
{
public:


	virtual ~EngineServer_setPlayerPlanetCode_pargs() throw() {}

	const Player_ID* pid;
	const std::string* code;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_setPlayerPlanetCode_result
{
public:

	EngineServer_setPlayerPlanetCode_result()
	{
	}

	virtual ~EngineServer_setPlayerPlanetCode_result() throw() {}


	bool operator == (const EngineServer_setPlayerPlanetCode_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_setPlayerPlanetCode_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_setPlayerPlanetCode_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_setPlayerPlanetCode_presult
{
public:


	virtual ~EngineServer_setPlayerPlanetCode_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_setPlayerFleetBlocklyCode_args__isset
{
	_EngineServer_setPlayerFleetBlocklyCode_args__isset() : pid(false), code(false) {}
	bool pid;
	bool code;
} _EngineServer_setPlayerFleetBlocklyCode_args__isset;

class EngineServer_setPlayerFleetBlocklyCode_args
{
public:

	EngineServer_setPlayerFleetBlocklyCode_args() : pid(0), code()
	{
	}

	virtual ~EngineServer_setPlayerFleetBlocklyCode_args() throw() {}

	Player_ID pid;
	std::string code;

	_EngineServer_setPlayerFleetBlocklyCode_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	void __set_code(const std::string& val)
	{
		code = val;
	}

	bool operator == (const EngineServer_setPlayerFleetBlocklyCode_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		if(!(code == rhs.code))
			return false;
		return true;
	}
	bool operator != (const EngineServer_setPlayerFleetBlocklyCode_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_setPlayerFleetBlocklyCode_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_setPlayerFleetBlocklyCode_pargs
{
public:


	virtual ~EngineServer_setPlayerFleetBlocklyCode_pargs() throw() {}

	const Player_ID* pid;
	const std::string* code;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_setPlayerFleetBlocklyCode_result
{
public:

	EngineServer_setPlayerFleetBlocklyCode_result()
	{
	}

	virtual ~EngineServer_setPlayerFleetBlocklyCode_result() throw() {}


	bool operator == (const EngineServer_setPlayerFleetBlocklyCode_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_setPlayerFleetBlocklyCode_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_setPlayerFleetBlocklyCode_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_setPlayerFleetBlocklyCode_presult
{
public:


	virtual ~EngineServer_setPlayerFleetBlocklyCode_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_setPlayerPlanetBlocklyCode_args__isset
{
	_EngineServer_setPlayerPlanetBlocklyCode_args__isset() : pid(false), code(false) {}
	bool pid;
	bool code;
} _EngineServer_setPlayerPlanetBlocklyCode_args__isset;

class EngineServer_setPlayerPlanetBlocklyCode_args
{
public:

	EngineServer_setPlayerPlanetBlocklyCode_args() : pid(0), code()
	{
	}

	virtual ~EngineServer_setPlayerPlanetBlocklyCode_args() throw() {}

	Player_ID pid;
	std::string code;

	_EngineServer_setPlayerPlanetBlocklyCode_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	void __set_code(const std::string& val)
	{
		code = val;
	}

	bool operator == (const EngineServer_setPlayerPlanetBlocklyCode_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		if(!(code == rhs.code))
			return false;
		return true;
	}
	bool operator != (const EngineServer_setPlayerPlanetBlocklyCode_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_setPlayerPlanetBlocklyCode_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_setPlayerPlanetBlocklyCode_pargs
{
public:


	virtual ~EngineServer_setPlayerPlanetBlocklyCode_pargs() throw() {}

	const Player_ID* pid;
	const std::string* code;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_setPlayerPlanetBlocklyCode_result
{
public:

	EngineServer_setPlayerPlanetBlocklyCode_result()
	{
	}

	virtual ~EngineServer_setPlayerPlanetBlocklyCode_result() throw() {}


	bool operator == (const EngineServer_setPlayerPlanetBlocklyCode_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_setPlayerPlanetBlocklyCode_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_setPlayerPlanetBlocklyCode_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_setPlayerPlanetBlocklyCode_presult
{
public:


	virtual ~EngineServer_setPlayerPlanetBlocklyCode_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_getPlayerFleetCode_args__isset
{
	_EngineServer_getPlayerFleetCode_args__isset() : pid(false) {}
	bool pid;
} _EngineServer_getPlayerFleetCode_args__isset;

class EngineServer_getPlayerFleetCode_args
{
public:

	EngineServer_getPlayerFleetCode_args() : pid(0)
	{
	}

	virtual ~EngineServer_getPlayerFleetCode_args() throw() {}

	Player_ID pid;

	_EngineServer_getPlayerFleetCode_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	bool operator == (const EngineServer_getPlayerFleetCode_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getPlayerFleetCode_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlayerFleetCode_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getPlayerFleetCode_pargs
{
public:


	virtual ~EngineServer_getPlayerFleetCode_pargs() throw() {}

	const Player_ID* pid;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlayerFleetCode_result__isset
{
	_EngineServer_getPlayerFleetCode_result__isset() : success(false) {}
	bool success;
} _EngineServer_getPlayerFleetCode_result__isset;

class EngineServer_getPlayerFleetCode_result
{
public:

	EngineServer_getPlayerFleetCode_result()
	{
	}

	virtual ~EngineServer_getPlayerFleetCode_result() throw() {}

	CodeData success;

	_EngineServer_getPlayerFleetCode_result__isset __isset;

	void __set_success(const CodeData& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getPlayerFleetCode_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getPlayerFleetCode_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlayerFleetCode_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlayerFleetCode_presult__isset
{
	_EngineServer_getPlayerFleetCode_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getPlayerFleetCode_presult__isset;

class EngineServer_getPlayerFleetCode_presult
{
public:


	virtual ~EngineServer_getPlayerFleetCode_presult() throw() {}

	CodeData* success;

	_EngineServer_getPlayerFleetCode_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_getPlayerPlanetCode_args__isset
{
	_EngineServer_getPlayerPlanetCode_args__isset() : pid(false) {}
	bool pid;
} _EngineServer_getPlayerPlanetCode_args__isset;

class EngineServer_getPlayerPlanetCode_args
{
public:

	EngineServer_getPlayerPlanetCode_args() : pid(0)
	{
	}

	virtual ~EngineServer_getPlayerPlanetCode_args() throw() {}

	Player_ID pid;

	_EngineServer_getPlayerPlanetCode_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	bool operator == (const EngineServer_getPlayerPlanetCode_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getPlayerPlanetCode_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlayerPlanetCode_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getPlayerPlanetCode_pargs
{
public:


	virtual ~EngineServer_getPlayerPlanetCode_pargs() throw() {}

	const Player_ID* pid;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlayerPlanetCode_result__isset
{
	_EngineServer_getPlayerPlanetCode_result__isset() : success(false) {}
	bool success;
} _EngineServer_getPlayerPlanetCode_result__isset;

class EngineServer_getPlayerPlanetCode_result
{
public:

	EngineServer_getPlayerPlanetCode_result()
	{
	}

	virtual ~EngineServer_getPlayerPlanetCode_result() throw() {}

	CodeData success;

	_EngineServer_getPlayerPlanetCode_result__isset __isset;

	void __set_success(const CodeData& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getPlayerPlanetCode_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getPlayerPlanetCode_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlayerPlanetCode_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlayerPlanetCode_presult__isset
{
	_EngineServer_getPlayerPlanetCode_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getPlayerPlanetCode_presult__isset;

class EngineServer_getPlayerPlanetCode_presult
{
public:


	virtual ~EngineServer_getPlayerPlanetCode_presult() throw() {}

	CodeData* success;

	_EngineServer_getPlayerPlanetCode_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EngineServer_getPlayers_args
{
public:

	EngineServer_getPlayers_args()
	{
	}

	virtual ~EngineServer_getPlayers_args() throw() {}


	bool operator == (const EngineServer_getPlayers_args& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_getPlayers_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlayers_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getPlayers_pargs
{
public:


	virtual ~EngineServer_getPlayers_pargs() throw() {}


	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlayers_result__isset
{
	_EngineServer_getPlayers_result__isset() : success(false) {}
	bool success;
} _EngineServer_getPlayers_result__isset;

class EngineServer_getPlayers_result
{
public:

	EngineServer_getPlayers_result()
	{
	}

	virtual ~EngineServer_getPlayers_result() throw() {}

	std::vector<Player>  success;

	_EngineServer_getPlayers_result__isset __isset;

	void __set_success(const std::vector<Player>& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getPlayers_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getPlayers_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlayers_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlayers_presult__isset
{
	_EngineServer_getPlayers_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getPlayers_presult__isset;

class EngineServer_getPlayers_presult
{
public:


	virtual ~EngineServer_getPlayers_presult() throw() {}

	std::vector<Player>* success;

	_EngineServer_getPlayers_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_getPlayer_args__isset
{
	_EngineServer_getPlayer_args__isset() : pid(false) {}
	bool pid;
} _EngineServer_getPlayer_args__isset;

class EngineServer_getPlayer_args
{
public:

	EngineServer_getPlayer_args() : pid(0)
	{
	}

	virtual ~EngineServer_getPlayer_args() throw() {}

	Player_ID pid;

	_EngineServer_getPlayer_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	bool operator == (const EngineServer_getPlayer_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getPlayer_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlayer_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getPlayer_pargs
{
public:


	virtual ~EngineServer_getPlayer_pargs() throw() {}

	const Player_ID* pid;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlayer_result__isset
{
	_EngineServer_getPlayer_result__isset() : success(false) {}
	bool success;
} _EngineServer_getPlayer_result__isset;

class EngineServer_getPlayer_result
{
public:

	EngineServer_getPlayer_result()
	{
	}

	virtual ~EngineServer_getPlayer_result() throw() {}

	Player success;

	_EngineServer_getPlayer_result__isset __isset;

	void __set_success(const Player& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getPlayer_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getPlayer_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlayer_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlayer_presult__isset
{
	_EngineServer_getPlayer_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getPlayer_presult__isset;

class EngineServer_getPlayer_presult
{
public:


	virtual ~EngineServer_getPlayer_presult() throw() {}

	Player* success;

	_EngineServer_getPlayer_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_getPlanet_args__isset
{
	_EngineServer_getPlanet_args__isset() : coord(false) {}
	bool coord;
} _EngineServer_getPlanet_args__isset;

class EngineServer_getPlanet_args
{
public:

	EngineServer_getPlanet_args()
	{
	}

	virtual ~EngineServer_getPlanet_args() throw() {}

	Coord coord;

	_EngineServer_getPlanet_args__isset __isset;

	void __set_coord(const Coord& val)
	{
		coord = val;
	}

	bool operator == (const EngineServer_getPlanet_args& rhs) const
	{
		if(!(coord == rhs.coord))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getPlanet_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlanet_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getPlanet_pargs
{
public:


	virtual ~EngineServer_getPlanet_pargs() throw() {}

	const Coord* coord;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlanet_result__isset
{
	_EngineServer_getPlanet_result__isset() : success(false) {}
	bool success;
} _EngineServer_getPlanet_result__isset;

class EngineServer_getPlanet_result
{
public:

	EngineServer_getPlanet_result()
	{
	}

	virtual ~EngineServer_getPlanet_result() throw() {}

	std::vector<Planet>  success;

	_EngineServer_getPlanet_result__isset __isset;

	void __set_success(const std::vector<Planet>& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getPlanet_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getPlanet_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlanet_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlanet_presult__isset
{
	_EngineServer_getPlanet_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getPlanet_presult__isset;

class EngineServer_getPlanet_presult
{
public:


	virtual ~EngineServer_getPlanet_presult() throw() {}

	std::vector<Planet>* success;

	_EngineServer_getPlanet_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_getFleet_args__isset
{
	_EngineServer_getFleet_args__isset() : fid(false) {}
	bool fid;
} _EngineServer_getFleet_args__isset;

class EngineServer_getFleet_args
{
public:

	EngineServer_getFleet_args() : fid(0)
	{
	}

	virtual ~EngineServer_getFleet_args() throw() {}

	Fleet_ID fid;

	_EngineServer_getFleet_args__isset __isset;

	void __set_fid(const Fleet_ID val)
	{
		fid = val;
	}

	bool operator == (const EngineServer_getFleet_args& rhs) const
	{
		if(!(fid == rhs.fid))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getFleet_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getFleet_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getFleet_pargs
{
public:


	virtual ~EngineServer_getFleet_pargs() throw() {}

	const Fleet_ID* fid;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getFleet_result__isset
{
	_EngineServer_getFleet_result__isset() : success(false) {}
	bool success;
} _EngineServer_getFleet_result__isset;

class EngineServer_getFleet_result
{
public:

	EngineServer_getFleet_result()
	{
	}

	virtual ~EngineServer_getFleet_result() throw() {}

	Fleet success;

	_EngineServer_getFleet_result__isset __isset;

	void __set_success(const Fleet& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getFleet_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getFleet_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getFleet_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getFleet_presult__isset
{
	_EngineServer_getFleet_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getFleet_presult__isset;

class EngineServer_getFleet_presult
{
public:


	virtual ~EngineServer_getFleet_presult() throw() {}

	Fleet* success;

	_EngineServer_getFleet_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_logPlayer_args__isset
{
	_EngineServer_logPlayer_args__isset() : login(false), password(false) {}
	bool login;
	bool password;
} _EngineServer_logPlayer_args__isset;

class EngineServer_logPlayer_args
{
public:

	EngineServer_logPlayer_args() : login(), password()
	{
	}

	virtual ~EngineServer_logPlayer_args() throw() {}

	std::string login;
	std::string password;

	_EngineServer_logPlayer_args__isset __isset;

	void __set_login(const std::string& val)
	{
		login = val;
	}

	void __set_password(const std::string& val)
	{
		password = val;
	}

	bool operator == (const EngineServer_logPlayer_args& rhs) const
	{
		if(!(login == rhs.login))
			return false;
		if(!(password == rhs.password))
			return false;
		return true;
	}
	bool operator != (const EngineServer_logPlayer_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_logPlayer_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_logPlayer_pargs
{
public:


	virtual ~EngineServer_logPlayer_pargs() throw() {}

	const std::string* login;
	const std::string* password;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_logPlayer_result__isset
{
	_EngineServer_logPlayer_result__isset() : success(false) {}
	bool success;
} _EngineServer_logPlayer_result__isset;

class EngineServer_logPlayer_result
{
public:

	EngineServer_logPlayer_result()
	{
	}

	virtual ~EngineServer_logPlayer_result() throw() {}

	OptionalPlayer success;

	_EngineServer_logPlayer_result__isset __isset;

	void __set_success(const OptionalPlayer& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_logPlayer_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_logPlayer_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_logPlayer_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_logPlayer_presult__isset
{
	_EngineServer_logPlayer_presult__isset() : success(false) {}
	bool success;
} _EngineServer_logPlayer_presult__isset;

class EngineServer_logPlayer_presult
{
public:


	virtual ~EngineServer_logPlayer_presult() throw() {}

	OptionalPlayer* success;

	_EngineServer_logPlayer_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_incrementTutoDisplayed_args__isset
{
	_EngineServer_incrementTutoDisplayed_args__isset() : pid(false), tutoName(false), value(true) {}
	bool pid;
	bool tutoName;
	bool value;
} _EngineServer_incrementTutoDisplayed_args__isset;

class EngineServer_incrementTutoDisplayed_args
{
public:

	EngineServer_incrementTutoDisplayed_args() : pid(0), tutoName(), value(1)
	{
	}

	virtual ~EngineServer_incrementTutoDisplayed_args() throw() {}

	Player_ID pid;
	std::string tutoName;
	int32_t value;

	_EngineServer_incrementTutoDisplayed_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	void __set_tutoName(const std::string& val)
	{
		tutoName = val;
	}

	void __set_value(const int32_t val)
	{
		value = val;
	}

	bool operator == (const EngineServer_incrementTutoDisplayed_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		if(!(tutoName == rhs.tutoName))
			return false;
		if(!(value == rhs.value))
			return false;
		return true;
	}
	bool operator != (const EngineServer_incrementTutoDisplayed_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_incrementTutoDisplayed_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_incrementTutoDisplayed_pargs
{
public:


	virtual ~EngineServer_incrementTutoDisplayed_pargs() throw() {}

	const Player_ID* pid;
	const std::string* tutoName;
	const int32_t* value;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_incrementTutoDisplayed_result
{
public:

	EngineServer_incrementTutoDisplayed_result()
	{
	}

	virtual ~EngineServer_incrementTutoDisplayed_result() throw() {}


	bool operator == (const EngineServer_incrementTutoDisplayed_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_incrementTutoDisplayed_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_incrementTutoDisplayed_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_incrementTutoDisplayed_presult
{
public:


	virtual ~EngineServer_incrementTutoDisplayed_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_getFightReport_args__isset
{
	_EngineServer_getFightReport_args__isset() : id(false) {}
	bool id;
} _EngineServer_getFightReport_args__isset;

class EngineServer_getFightReport_args
{
public:

	EngineServer_getFightReport_args() : id(0)
	{
	}

	virtual ~EngineServer_getFightReport_args() throw() {}

	int32_t id;

	_EngineServer_getFightReport_args__isset __isset;

	void __set_id(const int32_t val)
	{
		id = val;
	}

	bool operator == (const EngineServer_getFightReport_args& rhs) const
	{
		if(!(id == rhs.id))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getFightReport_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getFightReport_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getFightReport_pargs
{
public:


	virtual ~EngineServer_getFightReport_pargs() throw() {}

	const int32_t* id;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getFightReport_result__isset
{
	_EngineServer_getFightReport_result__isset() : success(false) {}
	bool success;
} _EngineServer_getFightReport_result__isset;

class EngineServer_getFightReport_result
{
public:

	EngineServer_getFightReport_result()
	{
	}

	virtual ~EngineServer_getFightReport_result() throw() {}

	FightReport success;

	_EngineServer_getFightReport_result__isset __isset;

	void __set_success(const FightReport& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getFightReport_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getFightReport_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getFightReport_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getFightReport_presult__isset
{
	_EngineServer_getFightReport_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getFightReport_presult__isset;

class EngineServer_getFightReport_presult
{
public:


	virtual ~EngineServer_getFightReport_presult() throw() {}

	FightReport* success;

	_EngineServer_getFightReport_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EngineServer_getTimeInfo_args
{
public:

	EngineServer_getTimeInfo_args()
	{
	}

	virtual ~EngineServer_getTimeInfo_args() throw() {}


	bool operator == (const EngineServer_getTimeInfo_args& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_getTimeInfo_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getTimeInfo_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getTimeInfo_pargs
{
public:


	virtual ~EngineServer_getTimeInfo_pargs() throw() {}


	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getTimeInfo_result__isset
{
	_EngineServer_getTimeInfo_result__isset() : success(false) {}
	bool success;
} _EngineServer_getTimeInfo_result__isset;

class EngineServer_getTimeInfo_result
{
public:

	EngineServer_getTimeInfo_result()
	{
	}

	virtual ~EngineServer_getTimeInfo_result() throw() {}

	TimeInfo success;

	_EngineServer_getTimeInfo_result__isset __isset;

	void __set_success(const TimeInfo& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getTimeInfo_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getTimeInfo_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getTimeInfo_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getTimeInfo_presult__isset
{
	_EngineServer_getTimeInfo_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getTimeInfo_presult__isset;

class EngineServer_getTimeInfo_presult
{
public:


	virtual ~EngineServer_getTimeInfo_presult() throw() {}

	TimeInfo* success;

	_EngineServer_getTimeInfo_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_eraseAccount_args__isset
{
	_EngineServer_eraseAccount_args__isset() : pid(false), password(false) {}
	bool pid;
	bool password;
} _EngineServer_eraseAccount_args__isset;

class EngineServer_eraseAccount_args
{
public:

	EngineServer_eraseAccount_args() : pid(0), password()
	{
	}

	virtual ~EngineServer_eraseAccount_args() throw() {}

	Player_ID pid;
	std::string password;

	_EngineServer_eraseAccount_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	void __set_password(const std::string& val)
	{
		password = val;
	}

	bool operator == (const EngineServer_eraseAccount_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		if(!(password == rhs.password))
			return false;
		return true;
	}
	bool operator != (const EngineServer_eraseAccount_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_eraseAccount_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_eraseAccount_pargs
{
public:


	virtual ~EngineServer_eraseAccount_pargs() throw() {}

	const Player_ID* pid;
	const std::string* password;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_eraseAccount_result__isset
{
	_EngineServer_eraseAccount_result__isset() : success(false) {}
	bool success;
} _EngineServer_eraseAccount_result__isset;

class EngineServer_eraseAccount_result
{
public:

	EngineServer_eraseAccount_result() : success(0)
	{
	}

	virtual ~EngineServer_eraseAccount_result() throw() {}

	bool success;

	_EngineServer_eraseAccount_result__isset __isset;

	void __set_success(const bool val)
	{
		success = val;
	}

	bool operator == (const EngineServer_eraseAccount_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_eraseAccount_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_eraseAccount_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_eraseAccount_presult__isset
{
	_EngineServer_eraseAccount_presult__isset() : success(false) {}
	bool success;
} _EngineServer_eraseAccount_presult__isset;

class EngineServer_eraseAccount_presult
{
public:


	virtual ~EngineServer_eraseAccount_presult() throw() {}

	bool* success;

	_EngineServer_eraseAccount_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_getPlayerEvents_args__isset
{
	_EngineServer_getPlayerEvents_args__isset() : pid(false) {}
	bool pid;
} _EngineServer_getPlayerEvents_args__isset;

class EngineServer_getPlayerEvents_args
{
public:

	EngineServer_getPlayerEvents_args() : pid(0)
	{
	}

	virtual ~EngineServer_getPlayerEvents_args() throw() {}

	Player_ID pid;

	_EngineServer_getPlayerEvents_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	bool operator == (const EngineServer_getPlayerEvents_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getPlayerEvents_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlayerEvents_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getPlayerEvents_pargs
{
public:


	virtual ~EngineServer_getPlayerEvents_pargs() throw() {}

	const Player_ID* pid;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlayerEvents_result__isset
{
	_EngineServer_getPlayerEvents_result__isset() : success(false) {}
	bool success;
} _EngineServer_getPlayerEvents_result__isset;

class EngineServer_getPlayerEvents_result
{
public:

	EngineServer_getPlayerEvents_result()
	{
	}

	virtual ~EngineServer_getPlayerEvents_result() throw() {}

	std::vector<Event>  success;

	_EngineServer_getPlayerEvents_result__isset __isset;

	void __set_success(const std::vector<Event>& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getPlayerEvents_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getPlayerEvents_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getPlayerEvents_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getPlayerEvents_presult__isset
{
	_EngineServer_getPlayerEvents_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getPlayerEvents_presult__isset;

class EngineServer_getPlayerEvents_presult
{
public:


	virtual ~EngineServer_getPlayerEvents_presult() throw() {}

	std::vector<Event>* success;

	_EngineServer_getPlayerEvents_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_buySkill_args__isset
{
	_EngineServer_buySkill_args__isset() : pid(false), skillID(false) {}
	bool pid;
	bool skillID;
} _EngineServer_buySkill_args__isset;

class EngineServer_buySkill_args
{
public:

	EngineServer_buySkill_args() : pid(0), skillID(0)
	{
	}

	virtual ~EngineServer_buySkill_args() throw() {}

	Player_ID pid;
	int16_t skillID;

	_EngineServer_buySkill_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	void __set_skillID(const int16_t val)
	{
		skillID = val;
	}

	bool operator == (const EngineServer_buySkill_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		if(!(skillID == rhs.skillID))
			return false;
		return true;
	}
	bool operator != (const EngineServer_buySkill_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_buySkill_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_buySkill_pargs
{
public:


	virtual ~EngineServer_buySkill_pargs() throw() {}

	const Player_ID* pid;
	const int16_t* skillID;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_buySkill_result__isset
{
	_EngineServer_buySkill_result__isset() : success(false) {}
	bool success;
} _EngineServer_buySkill_result__isset;

class EngineServer_buySkill_result
{
public:

	EngineServer_buySkill_result() : success(0)
	{
	}

	virtual ~EngineServer_buySkill_result() throw() {}

	bool success;

	_EngineServer_buySkill_result__isset __isset;

	void __set_success(const bool val)
	{
		success = val;
	}

	bool operator == (const EngineServer_buySkill_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_buySkill_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_buySkill_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_buySkill_presult__isset
{
	_EngineServer_buySkill_presult__isset() : success(false) {}
	bool success;
} _EngineServer_buySkill_presult__isset;

class EngineServer_buySkill_presult
{
public:


	virtual ~EngineServer_buySkill_presult() throw() {}

	bool* success;

	_EngineServer_buySkill_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EngineServer_getBuildingsInfo_args
{
public:

	EngineServer_getBuildingsInfo_args()
	{
	}

	virtual ~EngineServer_getBuildingsInfo_args() throw() {}


	bool operator == (const EngineServer_getBuildingsInfo_args& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_getBuildingsInfo_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getBuildingsInfo_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getBuildingsInfo_pargs
{
public:


	virtual ~EngineServer_getBuildingsInfo_pargs() throw() {}


	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getBuildingsInfo_result__isset
{
	_EngineServer_getBuildingsInfo_result__isset() : success(false) {}
	bool success;
} _EngineServer_getBuildingsInfo_result__isset;

class EngineServer_getBuildingsInfo_result
{
public:

	EngineServer_getBuildingsInfo_result()
	{
	}

	virtual ~EngineServer_getBuildingsInfo_result() throw() {}

	std::vector<Building>  success;

	_EngineServer_getBuildingsInfo_result__isset __isset;

	void __set_success(const std::vector<Building>& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getBuildingsInfo_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getBuildingsInfo_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getBuildingsInfo_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getBuildingsInfo_presult__isset
{
	_EngineServer_getBuildingsInfo_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getBuildingsInfo_presult__isset;

class EngineServer_getBuildingsInfo_presult
{
public:


	virtual ~EngineServer_getBuildingsInfo_presult() throw() {}

	std::vector<Building>* success;

	_EngineServer_getBuildingsInfo_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EngineServer_getCannonsInfo_args
{
public:

	EngineServer_getCannonsInfo_args()
	{
	}

	virtual ~EngineServer_getCannonsInfo_args() throw() {}


	bool operator == (const EngineServer_getCannonsInfo_args& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_getCannonsInfo_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getCannonsInfo_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getCannonsInfo_pargs
{
public:


	virtual ~EngineServer_getCannonsInfo_pargs() throw() {}


	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getCannonsInfo_result__isset
{
	_EngineServer_getCannonsInfo_result__isset() : success(false) {}
	bool success;
} _EngineServer_getCannonsInfo_result__isset;

class EngineServer_getCannonsInfo_result
{
public:

	EngineServer_getCannonsInfo_result()
	{
	}

	virtual ~EngineServer_getCannonsInfo_result() throw() {}

	std::vector<Cannon>  success;

	_EngineServer_getCannonsInfo_result__isset __isset;

	void __set_success(const std::vector<Cannon>& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getCannonsInfo_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getCannonsInfo_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getCannonsInfo_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getCannonsInfo_presult__isset
{
	_EngineServer_getCannonsInfo_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getCannonsInfo_presult__isset;

class EngineServer_getCannonsInfo_presult
{
public:


	virtual ~EngineServer_getCannonsInfo_presult() throw() {}

	std::vector<Cannon>* success;

	_EngineServer_getCannonsInfo_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class EngineServer_getShipsInfo_args
{
public:

	EngineServer_getShipsInfo_args()
	{
	}

	virtual ~EngineServer_getShipsInfo_args() throw() {}


	bool operator == (const EngineServer_getShipsInfo_args& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_getShipsInfo_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getShipsInfo_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getShipsInfo_pargs
{
public:


	virtual ~EngineServer_getShipsInfo_pargs() throw() {}


	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getShipsInfo_result__isset
{
	_EngineServer_getShipsInfo_result__isset() : success(false) {}
	bool success;
} _EngineServer_getShipsInfo_result__isset;

class EngineServer_getShipsInfo_result
{
public:

	EngineServer_getShipsInfo_result()
	{
	}

	virtual ~EngineServer_getShipsInfo_result() throw() {}

	std::vector<Ship>  success;

	_EngineServer_getShipsInfo_result__isset __isset;

	void __set_success(const std::vector<Ship>& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getShipsInfo_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getShipsInfo_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getShipsInfo_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getShipsInfo_presult__isset
{
	_EngineServer_getShipsInfo_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getShipsInfo_presult__isset;

class EngineServer_getShipsInfo_presult
{
public:


	virtual ~EngineServer_getShipsInfo_presult() throw() {}

	std::vector<Ship>* success;

	_EngineServer_getShipsInfo_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_addMessage_args__isset
{
	_EngineServer_addMessage_args__isset() : sender(false), recipient(false), suject(false), message(false) {}
	bool sender;
	bool recipient;
	bool suject;
	bool message;
} _EngineServer_addMessage_args__isset;

class EngineServer_addMessage_args
{
public:

	EngineServer_addMessage_args() : sender(0), recipient(0), suject(), message()
	{
	}

	virtual ~EngineServer_addMessage_args() throw() {}

	Player_ID sender;
	Player_ID recipient;
	std::string suject;
	std::string message;

	_EngineServer_addMessage_args__isset __isset;

	void __set_sender(const Player_ID val)
	{
		sender = val;
	}

	void __set_recipient(const Player_ID val)
	{
		recipient = val;
	}

	void __set_suject(const std::string& val)
	{
		suject = val;
	}

	void __set_message(const std::string& val)
	{
		message = val;
	}

	bool operator == (const EngineServer_addMessage_args& rhs) const
	{
		if(!(sender == rhs.sender))
			return false;
		if(!(recipient == rhs.recipient))
			return false;
		if(!(suject == rhs.suject))
			return false;
		if(!(message == rhs.message))
			return false;
		return true;
	}
	bool operator != (const EngineServer_addMessage_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_addMessage_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_addMessage_pargs
{
public:


	virtual ~EngineServer_addMessage_pargs() throw() {}

	const Player_ID* sender;
	const Player_ID* recipient;
	const std::string* suject;
	const std::string* message;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_addMessage_result
{
public:

	EngineServer_addMessage_result()
	{
	}

	virtual ~EngineServer_addMessage_result() throw() {}


	bool operator == (const EngineServer_addMessage_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_addMessage_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_addMessage_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_addMessage_presult
{
public:


	virtual ~EngineServer_addMessage_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_getMessages_args__isset
{
	_EngineServer_getMessages_args__isset() : recipient(false) {}
	bool recipient;
} _EngineServer_getMessages_args__isset;

class EngineServer_getMessages_args
{
public:

	EngineServer_getMessages_args() : recipient(0)
	{
	}

	virtual ~EngineServer_getMessages_args() throw() {}

	Player_ID recipient;

	_EngineServer_getMessages_args__isset __isset;

	void __set_recipient(const Player_ID val)
	{
		recipient = val;
	}

	bool operator == (const EngineServer_getMessages_args& rhs) const
	{
		if(!(recipient == rhs.recipient))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getMessages_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getMessages_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getMessages_pargs
{
public:


	virtual ~EngineServer_getMessages_pargs() throw() {}

	const Player_ID* recipient;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getMessages_result__isset
{
	_EngineServer_getMessages_result__isset() : success(false) {}
	bool success;
} _EngineServer_getMessages_result__isset;

class EngineServer_getMessages_result
{
public:

	EngineServer_getMessages_result()
	{
	}

	virtual ~EngineServer_getMessages_result() throw() {}

	std::vector<Message>  success;

	_EngineServer_getMessages_result__isset __isset;

	void __set_success(const std::vector<Message>& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getMessages_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getMessages_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getMessages_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getMessages_presult__isset
{
	_EngineServer_getMessages_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getMessages_presult__isset;

class EngineServer_getMessages_presult
{
public:


	virtual ~EngineServer_getMessages_presult() throw() {}

	std::vector<Message>* success;

	_EngineServer_getMessages_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_eraseMesage_args__isset
{
	_EngineServer_eraseMesage_args__isset() : mid(false) {}
	bool mid;
} _EngineServer_eraseMesage_args__isset;

class EngineServer_eraseMesage_args
{
public:

	EngineServer_eraseMesage_args() : mid(0)
	{
	}

	virtual ~EngineServer_eraseMesage_args() throw() {}

	Message_ID mid;

	_EngineServer_eraseMesage_args__isset __isset;

	void __set_mid(const Message_ID val)
	{
		mid = val;
	}

	bool operator == (const EngineServer_eraseMesage_args& rhs) const
	{
		if(!(mid == rhs.mid))
			return false;
		return true;
	}
	bool operator != (const EngineServer_eraseMesage_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_eraseMesage_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_eraseMesage_pargs
{
public:


	virtual ~EngineServer_eraseMesage_pargs() throw() {}

	const Message_ID* mid;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_eraseMesage_result
{
public:

	EngineServer_eraseMesage_result()
	{
	}

	virtual ~EngineServer_eraseMesage_result() throw() {}


	bool operator == (const EngineServer_eraseMesage_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_eraseMesage_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_eraseMesage_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_eraseMesage_presult
{
public:


	virtual ~EngineServer_eraseMesage_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_addFriendshipRequest_args__isset
{
	_EngineServer_addFriendshipRequest_args__isset() : playerA(false), playerB(false) {}
	bool playerA;
	bool playerB;
} _EngineServer_addFriendshipRequest_args__isset;

class EngineServer_addFriendshipRequest_args
{
public:

	EngineServer_addFriendshipRequest_args() : playerA(0), playerB(0)
	{
	}

	virtual ~EngineServer_addFriendshipRequest_args() throw() {}

	Player_ID playerA;
	Player_ID playerB;

	_EngineServer_addFriendshipRequest_args__isset __isset;

	void __set_playerA(const Player_ID val)
	{
		playerA = val;
	}

	void __set_playerB(const Player_ID val)
	{
		playerB = val;
	}

	bool operator == (const EngineServer_addFriendshipRequest_args& rhs) const
	{
		if(!(playerA == rhs.playerA))
			return false;
		if(!(playerB == rhs.playerB))
			return false;
		return true;
	}
	bool operator != (const EngineServer_addFriendshipRequest_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_addFriendshipRequest_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_addFriendshipRequest_pargs
{
public:


	virtual ~EngineServer_addFriendshipRequest_pargs() throw() {}

	const Player_ID* playerA;
	const Player_ID* playerB;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_addFriendshipRequest_result
{
public:

	EngineServer_addFriendshipRequest_result()
	{
	}

	virtual ~EngineServer_addFriendshipRequest_result() throw() {}


	bool operator == (const EngineServer_addFriendshipRequest_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_addFriendshipRequest_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_addFriendshipRequest_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_addFriendshipRequest_presult
{
public:


	virtual ~EngineServer_addFriendshipRequest_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_acceptFriendshipRequest_args__isset
{
	_EngineServer_acceptFriendshipRequest_args__isset() : playerA(false), playerB(false), accept(false) {}
	bool playerA;
	bool playerB;
	bool accept;
} _EngineServer_acceptFriendshipRequest_args__isset;

class EngineServer_acceptFriendshipRequest_args
{
public:

	EngineServer_acceptFriendshipRequest_args() : playerA(0), playerB(0), accept(0)
	{
	}

	virtual ~EngineServer_acceptFriendshipRequest_args() throw() {}

	Player_ID playerA;
	Player_ID playerB;
	bool accept;

	_EngineServer_acceptFriendshipRequest_args__isset __isset;

	void __set_playerA(const Player_ID val)
	{
		playerA = val;
	}

	void __set_playerB(const Player_ID val)
	{
		playerB = val;
	}

	void __set_accept(const bool val)
	{
		accept = val;
	}

	bool operator == (const EngineServer_acceptFriendshipRequest_args& rhs) const
	{
		if(!(playerA == rhs.playerA))
			return false;
		if(!(playerB == rhs.playerB))
			return false;
		if(!(accept == rhs.accept))
			return false;
		return true;
	}
	bool operator != (const EngineServer_acceptFriendshipRequest_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_acceptFriendshipRequest_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_acceptFriendshipRequest_pargs
{
public:


	virtual ~EngineServer_acceptFriendshipRequest_pargs() throw() {}

	const Player_ID* playerA;
	const Player_ID* playerB;
	const bool* accept;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_acceptFriendshipRequest_result
{
public:

	EngineServer_acceptFriendshipRequest_result()
	{
	}

	virtual ~EngineServer_acceptFriendshipRequest_result() throw() {}


	bool operator == (const EngineServer_acceptFriendshipRequest_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_acceptFriendshipRequest_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_acceptFriendshipRequest_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_acceptFriendshipRequest_presult
{
public:


	virtual ~EngineServer_acceptFriendshipRequest_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_closeFriendship_args__isset
{
	_EngineServer_closeFriendship_args__isset() : playerA(false), playerB(false) {}
	bool playerA;
	bool playerB;
} _EngineServer_closeFriendship_args__isset;

class EngineServer_closeFriendship_args
{
public:

	EngineServer_closeFriendship_args() : playerA(0), playerB(0)
	{
	}

	virtual ~EngineServer_closeFriendship_args() throw() {}

	Player_ID playerA;
	Player_ID playerB;

	_EngineServer_closeFriendship_args__isset __isset;

	void __set_playerA(const Player_ID val)
	{
		playerA = val;
	}

	void __set_playerB(const Player_ID val)
	{
		playerB = val;
	}

	bool operator == (const EngineServer_closeFriendship_args& rhs) const
	{
		if(!(playerA == rhs.playerA))
			return false;
		if(!(playerB == rhs.playerB))
			return false;
		return true;
	}
	bool operator != (const EngineServer_closeFriendship_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_closeFriendship_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_closeFriendship_pargs
{
public:


	virtual ~EngineServer_closeFriendship_pargs() throw() {}

	const Player_ID* playerA;
	const Player_ID* playerB;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_closeFriendship_result
{
public:

	EngineServer_closeFriendship_result()
	{
	}

	virtual ~EngineServer_closeFriendship_result() throw() {}


	bool operator == (const EngineServer_closeFriendship_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_closeFriendship_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_closeFriendship_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_closeFriendship_presult
{
public:


	virtual ~EngineServer_closeFriendship_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_getFriends_args__isset
{
	_EngineServer_getFriends_args__isset() : player(false) {}
	bool player;
} _EngineServer_getFriends_args__isset;

class EngineServer_getFriends_args
{
public:

	EngineServer_getFriends_args() : player(0)
	{
	}

	virtual ~EngineServer_getFriends_args() throw() {}

	Player_ID player;

	_EngineServer_getFriends_args__isset __isset;

	void __set_player(const Player_ID val)
	{
		player = val;
	}

	bool operator == (const EngineServer_getFriends_args& rhs) const
	{
		if(!(player == rhs.player))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getFriends_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getFriends_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getFriends_pargs
{
public:


	virtual ~EngineServer_getFriends_pargs() throw() {}

	const Player_ID* player;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getFriends_result__isset
{
	_EngineServer_getFriends_result__isset() : success(false) {}
	bool success;
} _EngineServer_getFriends_result__isset;

class EngineServer_getFriends_result
{
public:

	EngineServer_getFriends_result()
	{
	}

	virtual ~EngineServer_getFriends_result() throw() {}

	std::vector<Player>  success;

	_EngineServer_getFriends_result__isset __isset;

	void __set_success(const std::vector<Player>& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getFriends_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getFriends_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getFriends_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getFriends_presult__isset
{
	_EngineServer_getFriends_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getFriends_presult__isset;

class EngineServer_getFriends_presult
{
public:


	virtual ~EngineServer_getFriends_presult() throw() {}

	std::vector<Player>* success;

	_EngineServer_getFriends_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_getFriendshipRequest_args__isset
{
	_EngineServer_getFriendshipRequest_args__isset() : player(false) {}
	bool player;
} _EngineServer_getFriendshipRequest_args__isset;

class EngineServer_getFriendshipRequest_args
{
public:

	EngineServer_getFriendshipRequest_args() : player(0)
	{
	}

	virtual ~EngineServer_getFriendshipRequest_args() throw() {}

	Player_ID player;

	_EngineServer_getFriendshipRequest_args__isset __isset;

	void __set_player(const Player_ID val)
	{
		player = val;
	}

	bool operator == (const EngineServer_getFriendshipRequest_args& rhs) const
	{
		if(!(player == rhs.player))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getFriendshipRequest_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getFriendshipRequest_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getFriendshipRequest_pargs
{
public:


	virtual ~EngineServer_getFriendshipRequest_pargs() throw() {}

	const Player_ID* player;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getFriendshipRequest_result__isset
{
	_EngineServer_getFriendshipRequest_result__isset() : success(false) {}
	bool success;
} _EngineServer_getFriendshipRequest_result__isset;

class EngineServer_getFriendshipRequest_result
{
public:

	EngineServer_getFriendshipRequest_result()
	{
	}

	virtual ~EngineServer_getFriendshipRequest_result() throw() {}

	FriendshipRequests success;

	_EngineServer_getFriendshipRequest_result__isset __isset;

	void __set_success(const FriendshipRequests& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getFriendshipRequest_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getFriendshipRequest_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getFriendshipRequest_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getFriendshipRequest_presult__isset
{
	_EngineServer_getFriendshipRequest_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getFriendshipRequest_presult__isset;

class EngineServer_getFriendshipRequest_presult
{
public:


	virtual ~EngineServer_getFriendshipRequest_presult() throw() {}

	FriendshipRequests* success;

	_EngineServer_getFriendshipRequest_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_addAlliance_args__isset
{
	_EngineServer_addAlliance_args__isset() : pid(false), name(false), description(false) {}
	bool pid;
	bool name;
	bool description;
} _EngineServer_addAlliance_args__isset;

class EngineServer_addAlliance_args
{
public:

	EngineServer_addAlliance_args() : pid(0), name(), description()
	{
	}

	virtual ~EngineServer_addAlliance_args() throw() {}

	Player_ID pid;
	std::string name;
	std::string description;

	_EngineServer_addAlliance_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	void __set_name(const std::string& val)
	{
		name = val;
	}

	void __set_description(const std::string& val)
	{
		description = val;
	}

	bool operator == (const EngineServer_addAlliance_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		if(!(name == rhs.name))
			return false;
		if(!(description == rhs.description))
			return false;
		return true;
	}
	bool operator != (const EngineServer_addAlliance_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_addAlliance_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_addAlliance_pargs
{
public:


	virtual ~EngineServer_addAlliance_pargs() throw() {}

	const Player_ID* pid;
	const std::string* name;
	const std::string* description;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_addAlliance_result__isset
{
	_EngineServer_addAlliance_result__isset() : success(false) {}
	bool success;
} _EngineServer_addAlliance_result__isset;

class EngineServer_addAlliance_result
{
public:

	EngineServer_addAlliance_result() : success(0)
	{
	}

	virtual ~EngineServer_addAlliance_result() throw() {}

	Alliance_ID success;

	_EngineServer_addAlliance_result__isset __isset;

	void __set_success(const Alliance_ID val)
	{
		success = val;
	}

	bool operator == (const EngineServer_addAlliance_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_addAlliance_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_addAlliance_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_addAlliance_presult__isset
{
	_EngineServer_addAlliance_presult__isset() : success(false) {}
	bool success;
} _EngineServer_addAlliance_presult__isset;

class EngineServer_addAlliance_presult
{
public:


	virtual ~EngineServer_addAlliance_presult() throw() {}

	Alliance_ID* success;

	_EngineServer_addAlliance_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_getAlliance_args__isset
{
	_EngineServer_getAlliance_args__isset() : aid(false) {}
	bool aid;
} _EngineServer_getAlliance_args__isset;

class EngineServer_getAlliance_args
{
public:

	EngineServer_getAlliance_args() : aid(0)
	{
	}

	virtual ~EngineServer_getAlliance_args() throw() {}

	Alliance_ID aid;

	_EngineServer_getAlliance_args__isset __isset;

	void __set_aid(const Alliance_ID val)
	{
		aid = val;
	}

	bool operator == (const EngineServer_getAlliance_args& rhs) const
	{
		if(!(aid == rhs.aid))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getAlliance_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getAlliance_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_getAlliance_pargs
{
public:


	virtual ~EngineServer_getAlliance_pargs() throw() {}

	const Alliance_ID* aid;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getAlliance_result__isset
{
	_EngineServer_getAlliance_result__isset() : success(false) {}
	bool success;
} _EngineServer_getAlliance_result__isset;

class EngineServer_getAlliance_result
{
public:

	EngineServer_getAlliance_result()
	{
	}

	virtual ~EngineServer_getAlliance_result() throw() {}

	Alliance success;

	_EngineServer_getAlliance_result__isset __isset;

	void __set_success(const Alliance& val)
	{
		success = val;
	}

	bool operator == (const EngineServer_getAlliance_result& rhs) const
	{
		if(!(success == rhs.success))
			return false;
		return true;
	}
	bool operator != (const EngineServer_getAlliance_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_getAlliance_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EngineServer_getAlliance_presult__isset
{
	_EngineServer_getAlliance_presult__isset() : success(false) {}
	bool success;
} _EngineServer_getAlliance_presult__isset;

class EngineServer_getAlliance_presult
{
public:


	virtual ~EngineServer_getAlliance_presult() throw() {}

	Alliance* success;

	_EngineServer_getAlliance_presult__isset __isset;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_updateAlliance_args__isset
{
	_EngineServer_updateAlliance_args__isset() : alliance(false) {}
	bool alliance;
} _EngineServer_updateAlliance_args__isset;

class EngineServer_updateAlliance_args
{
public:

	EngineServer_updateAlliance_args()
	{
	}

	virtual ~EngineServer_updateAlliance_args() throw() {}

	Alliance alliance;

	_EngineServer_updateAlliance_args__isset __isset;

	void __set_alliance(const Alliance& val)
	{
		alliance = val;
	}

	bool operator == (const EngineServer_updateAlliance_args& rhs) const
	{
		if(!(alliance == rhs.alliance))
			return false;
		return true;
	}
	bool operator != (const EngineServer_updateAlliance_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_updateAlliance_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_updateAlliance_pargs
{
public:


	virtual ~EngineServer_updateAlliance_pargs() throw() {}

	const Alliance* alliance;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_updateAlliance_result
{
public:

	EngineServer_updateAlliance_result()
	{
	}

	virtual ~EngineServer_updateAlliance_result() throw() {}


	bool operator == (const EngineServer_updateAlliance_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_updateAlliance_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_updateAlliance_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_updateAlliance_presult
{
public:


	virtual ~EngineServer_updateAlliance_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_transfertAlliance_args__isset
{
	_EngineServer_transfertAlliance_args__isset() : aid(false), pid(false) {}
	bool aid;
	bool pid;
} _EngineServer_transfertAlliance_args__isset;

class EngineServer_transfertAlliance_args
{
public:

	EngineServer_transfertAlliance_args() : aid(0), pid(0)
	{
	}

	virtual ~EngineServer_transfertAlliance_args() throw() {}

	Alliance_ID aid;
	Player_ID pid;

	_EngineServer_transfertAlliance_args__isset __isset;

	void __set_aid(const Alliance_ID val)
	{
		aid = val;
	}

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	bool operator == (const EngineServer_transfertAlliance_args& rhs) const
	{
		if(!(aid == rhs.aid))
			return false;
		if(!(pid == rhs.pid))
			return false;
		return true;
	}
	bool operator != (const EngineServer_transfertAlliance_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_transfertAlliance_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_transfertAlliance_pargs
{
public:


	virtual ~EngineServer_transfertAlliance_pargs() throw() {}

	const Alliance_ID* aid;
	const Player_ID* pid;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_transfertAlliance_result
{
public:

	EngineServer_transfertAlliance_result()
	{
	}

	virtual ~EngineServer_transfertAlliance_result() throw() {}


	bool operator == (const EngineServer_transfertAlliance_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_transfertAlliance_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_transfertAlliance_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_transfertAlliance_presult
{
public:


	virtual ~EngineServer_transfertAlliance_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_eraseAlliance_args__isset
{
	_EngineServer_eraseAlliance_args__isset() : aid(false) {}
	bool aid;
} _EngineServer_eraseAlliance_args__isset;

class EngineServer_eraseAlliance_args
{
public:

	EngineServer_eraseAlliance_args() : aid(0)
	{
	}

	virtual ~EngineServer_eraseAlliance_args() throw() {}

	Alliance_ID aid;

	_EngineServer_eraseAlliance_args__isset __isset;

	void __set_aid(const Alliance_ID val)
	{
		aid = val;
	}

	bool operator == (const EngineServer_eraseAlliance_args& rhs) const
	{
		if(!(aid == rhs.aid))
			return false;
		return true;
	}
	bool operator != (const EngineServer_eraseAlliance_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_eraseAlliance_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_eraseAlliance_pargs
{
public:


	virtual ~EngineServer_eraseAlliance_pargs() throw() {}

	const Alliance_ID* aid;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_eraseAlliance_result
{
public:

	EngineServer_eraseAlliance_result()
	{
	}

	virtual ~EngineServer_eraseAlliance_result() throw() {}


	bool operator == (const EngineServer_eraseAlliance_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_eraseAlliance_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_eraseAlliance_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_eraseAlliance_presult
{
public:


	virtual ~EngineServer_eraseAlliance_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_joinAlliance_args__isset
{
	_EngineServer_joinAlliance_args__isset() : pid(false), aid(false) {}
	bool pid;
	bool aid;
} _EngineServer_joinAlliance_args__isset;

class EngineServer_joinAlliance_args
{
public:

	EngineServer_joinAlliance_args() : pid(0), aid(0)
	{
	}

	virtual ~EngineServer_joinAlliance_args() throw() {}

	Player_ID pid;
	Alliance_ID aid;

	_EngineServer_joinAlliance_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	void __set_aid(const Alliance_ID val)
	{
		aid = val;
	}

	bool operator == (const EngineServer_joinAlliance_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		if(!(aid == rhs.aid))
			return false;
		return true;
	}
	bool operator != (const EngineServer_joinAlliance_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_joinAlliance_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_joinAlliance_pargs
{
public:


	virtual ~EngineServer_joinAlliance_pargs() throw() {}

	const Player_ID* pid;
	const Alliance_ID* aid;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_joinAlliance_result
{
public:

	EngineServer_joinAlliance_result()
	{
	}

	virtual ~EngineServer_joinAlliance_result() throw() {}


	bool operator == (const EngineServer_joinAlliance_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_joinAlliance_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_joinAlliance_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_joinAlliance_presult
{
public:


	virtual ~EngineServer_joinAlliance_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EngineServer_quitAlliance_args__isset
{
	_EngineServer_quitAlliance_args__isset() : pid(false) {}
	bool pid;
} _EngineServer_quitAlliance_args__isset;

class EngineServer_quitAlliance_args
{
public:

	EngineServer_quitAlliance_args() : pid(0)
	{
	}

	virtual ~EngineServer_quitAlliance_args() throw() {}

	Player_ID pid;

	_EngineServer_quitAlliance_args__isset __isset;

	void __set_pid(const Player_ID val)
	{
		pid = val;
	}

	bool operator == (const EngineServer_quitAlliance_args& rhs) const
	{
		if(!(pid == rhs.pid))
			return false;
		return true;
	}
	bool operator != (const EngineServer_quitAlliance_args& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_quitAlliance_args&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_quitAlliance_pargs
{
public:


	virtual ~EngineServer_quitAlliance_pargs() throw() {}

	const Player_ID* pid;

	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_quitAlliance_result
{
public:

	EngineServer_quitAlliance_result()
	{
	}

	virtual ~EngineServer_quitAlliance_result() throw() {}


	bool operator == (const EngineServer_quitAlliance_result& /* rhs */) const
	{
		return true;
	}
	bool operator != (const EngineServer_quitAlliance_result& rhs) const
	{
		return !(*this == rhs);
	}

	bool operator < (const EngineServer_quitAlliance_result&) const;

	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
	uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EngineServer_quitAlliance_presult
{
public:


	virtual ~EngineServer_quitAlliance_presult() throw() {}


	uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EngineServerClient : virtual public EngineServerIf
{
public:
	EngineServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
		piprot_(prot),
		poprot_(prot)
	{
		iprot_ = prot.get();
		oprot_ = prot.get();
	}
	EngineServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
		piprot_(iprot),
		poprot_(oprot)
	{
		iprot_ = iprot.get();
		oprot_ = oprot.get();
	}
	boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol()
	{
		return piprot_;
	}
	boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol()
	{
		return poprot_;
	}
	void start();
	void send_start();
	void recv_start();
	void stop();
	void send_stop();
	void recv_stop();
	bool addPlayer(const std::string& login, const std::string& password);
	void send_addPlayer(const std::string& login, const std::string& password);
	bool recv_addPlayer();
	void getPlayerFleets(FleetList& _return, const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc, const int32_t value);
	void send_getPlayerFleets(const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc, const int32_t value);
	void recv_getPlayerFleets(FleetList& _return);
	void getPlayerPlanets(PlanetList& _return, const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc, const int32_t value);
	void send_getPlayerPlanets(const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc, const int32_t value);
	void recv_getPlayerPlanets(PlanetList& _return);
	void setPlayerFleetCode(const Player_ID pid, const std::string& code);
	void send_setPlayerFleetCode(const Player_ID pid, const std::string& code);
	void recv_setPlayerFleetCode();
	void setPlayerPlanetCode(const Player_ID pid, const std::string& code);
	void send_setPlayerPlanetCode(const Player_ID pid, const std::string& code);
	void recv_setPlayerPlanetCode();
	void setPlayerFleetBlocklyCode(const Player_ID pid, const std::string& code);
	void send_setPlayerFleetBlocklyCode(const Player_ID pid, const std::string& code);
	void recv_setPlayerFleetBlocklyCode();
	void setPlayerPlanetBlocklyCode(const Player_ID pid, const std::string& code);
	void send_setPlayerPlanetBlocklyCode(const Player_ID pid, const std::string& code);
	void recv_setPlayerPlanetBlocklyCode();
	void getPlayerFleetCode(CodeData& _return, const Player_ID pid);
	void send_getPlayerFleetCode(const Player_ID pid);
	void recv_getPlayerFleetCode(CodeData& _return);
	void getPlayerPlanetCode(CodeData& _return, const Player_ID pid);
	void send_getPlayerPlanetCode(const Player_ID pid);
	void recv_getPlayerPlanetCode(CodeData& _return);
	void getPlayers(std::vector<Player>& _return);
	void send_getPlayers();
	void recv_getPlayers(std::vector<Player>& _return);
	void getPlayer(Player& _return, const Player_ID pid);
	void send_getPlayer(const Player_ID pid);
	void recv_getPlayer(Player& _return);
	void getPlanet(std::vector<Planet>& _return, const Coord& coord);
	void send_getPlanet(const Coord& coord);
	void recv_getPlanet(std::vector<Planet>& _return);
	void getFleet(Fleet& _return, const Fleet_ID fid);
	void send_getFleet(const Fleet_ID fid);
	void recv_getFleet(Fleet& _return);
	void logPlayer(OptionalPlayer& _return, const std::string& login, const std::string& password);
	void send_logPlayer(const std::string& login, const std::string& password);
	void recv_logPlayer(OptionalPlayer& _return);
	void incrementTutoDisplayed(const Player_ID pid, const std::string& tutoName, const int32_t value);
	void send_incrementTutoDisplayed(const Player_ID pid, const std::string& tutoName, const int32_t value);
	void recv_incrementTutoDisplayed();
	void getFightReport(FightReport& _return, const int32_t id);
	void send_getFightReport(const int32_t id);
	void recv_getFightReport(FightReport& _return);
	void getTimeInfo(TimeInfo& _return);
	void send_getTimeInfo();
	void recv_getTimeInfo(TimeInfo& _return);
	bool eraseAccount(const Player_ID pid, const std::string& password);
	void send_eraseAccount(const Player_ID pid, const std::string& password);
	bool recv_eraseAccount();
	void getPlayerEvents(std::vector<Event>& _return, const Player_ID pid);
	void send_getPlayerEvents(const Player_ID pid);
	void recv_getPlayerEvents(std::vector<Event>& _return);
	bool buySkill(const Player_ID pid, const int16_t skillID);
	void send_buySkill(const Player_ID pid, const int16_t skillID);
	bool recv_buySkill();
	void getBuildingsInfo(std::vector<Building>& _return);
	void send_getBuildingsInfo();
	void recv_getBuildingsInfo(std::vector<Building>& _return);
	void getCannonsInfo(std::vector<Cannon>& _return);
	void send_getCannonsInfo();
	void recv_getCannonsInfo(std::vector<Cannon>& _return);
	void getShipsInfo(std::vector<Ship>& _return);
	void send_getShipsInfo();
	void recv_getShipsInfo(std::vector<Ship>& _return);
	void addMessage(const Player_ID sender, const Player_ID recipient, const std::string& suject, const std::string& message);
	void send_addMessage(const Player_ID sender, const Player_ID recipient, const std::string& suject, const std::string& message);
	void recv_addMessage();
	void getMessages(std::vector<Message>& _return, const Player_ID recipient);
	void send_getMessages(const Player_ID recipient);
	void recv_getMessages(std::vector<Message>& _return);
	void eraseMesage(const Message_ID mid);
	void send_eraseMesage(const Message_ID mid);
	void recv_eraseMesage();
	void addFriendshipRequest(const Player_ID playerA, const Player_ID playerB);
	void send_addFriendshipRequest(const Player_ID playerA, const Player_ID playerB);
	void recv_addFriendshipRequest();
	void acceptFriendshipRequest(const Player_ID playerA, const Player_ID playerB, const bool accept);
	void send_acceptFriendshipRequest(const Player_ID playerA, const Player_ID playerB, const bool accept);
	void recv_acceptFriendshipRequest();
	void closeFriendship(const Player_ID playerA, const Player_ID playerB);
	void send_closeFriendship(const Player_ID playerA, const Player_ID playerB);
	void recv_closeFriendship();
	void getFriends(std::vector<Player>& _return, const Player_ID player);
	void send_getFriends(const Player_ID player);
	void recv_getFriends(std::vector<Player>& _return);
	void getFriendshipRequest(FriendshipRequests& _return, const Player_ID player);
	void send_getFriendshipRequest(const Player_ID player);
	void recv_getFriendshipRequest(FriendshipRequests& _return);
	Alliance_ID addAlliance(const Player_ID pid, const std::string& name, const std::string& description);
	void send_addAlliance(const Player_ID pid, const std::string& name, const std::string& description);
	Alliance_ID recv_addAlliance();
	void getAlliance(Alliance& _return, const Alliance_ID aid);
	void send_getAlliance(const Alliance_ID aid);
	void recv_getAlliance(Alliance& _return);
	void updateAlliance(const Alliance& alliance);
	void send_updateAlliance(const Alliance& alliance);
	void recv_updateAlliance();
	void transfertAlliance(const Alliance_ID aid, const Player_ID pid);
	void send_transfertAlliance(const Alliance_ID aid, const Player_ID pid);
	void recv_transfertAlliance();
	void eraseAlliance(const Alliance_ID aid);
	void send_eraseAlliance(const Alliance_ID aid);
	void recv_eraseAlliance();
	void joinAlliance(const Player_ID pid, const Alliance_ID aid);
	void send_joinAlliance(const Player_ID pid, const Alliance_ID aid);
	void recv_joinAlliance();
	void quitAlliance(const Player_ID pid);
	void send_quitAlliance(const Player_ID pid);
	void recv_quitAlliance();
protected:
	boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
	boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
	::apache::thrift::protocol::TProtocol* iprot_;
	::apache::thrift::protocol::TProtocol* oprot_;
};

class EngineServerProcessor : public ::apache::thrift::TDispatchProcessor
{
protected:
	boost::shared_ptr<EngineServerIf> iface_;
	virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
private:
	typedef  void (EngineServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
	typedef std::map<std::string, ProcessFunction> ProcessMap;
	ProcessMap processMap_;
	void process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_addPlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getPlayerFleets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getPlayerPlanets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_setPlayerFleetCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_setPlayerPlanetCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_setPlayerFleetBlocklyCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_setPlayerPlanetBlocklyCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getPlayerFleetCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getPlayerPlanetCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getPlayers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getPlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getPlanet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getFleet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_logPlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_incrementTutoDisplayed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getFightReport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getTimeInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_eraseAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getPlayerEvents(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_buySkill(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getBuildingsInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getCannonsInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getShipsInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_addMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_eraseMesage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_addFriendshipRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_acceptFriendshipRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_closeFriendship(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getFriends(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getFriendshipRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_addAlliance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_getAlliance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_updateAlliance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_transfertAlliance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_eraseAlliance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_joinAlliance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
	void process_quitAlliance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
public:
	EngineServerProcessor(boost::shared_ptr<EngineServerIf> iface) :
		iface_(iface)
	{
		processMap_["start"] = &EngineServerProcessor::process_start;
		processMap_["stop"] = &EngineServerProcessor::process_stop;
		processMap_["addPlayer"] = &EngineServerProcessor::process_addPlayer;
		processMap_["getPlayerFleets"] = &EngineServerProcessor::process_getPlayerFleets;
		processMap_["getPlayerPlanets"] = &EngineServerProcessor::process_getPlayerPlanets;
		processMap_["setPlayerFleetCode"] = &EngineServerProcessor::process_setPlayerFleetCode;
		processMap_["setPlayerPlanetCode"] = &EngineServerProcessor::process_setPlayerPlanetCode;
		processMap_["setPlayerFleetBlocklyCode"] = &EngineServerProcessor::process_setPlayerFleetBlocklyCode;
		processMap_["setPlayerPlanetBlocklyCode"] = &EngineServerProcessor::process_setPlayerPlanetBlocklyCode;
		processMap_["getPlayerFleetCode"] = &EngineServerProcessor::process_getPlayerFleetCode;
		processMap_["getPlayerPlanetCode"] = &EngineServerProcessor::process_getPlayerPlanetCode;
		processMap_["getPlayers"] = &EngineServerProcessor::process_getPlayers;
		processMap_["getPlayer"] = &EngineServerProcessor::process_getPlayer;
		processMap_["getPlanet"] = &EngineServerProcessor::process_getPlanet;
		processMap_["getFleet"] = &EngineServerProcessor::process_getFleet;
		processMap_["logPlayer"] = &EngineServerProcessor::process_logPlayer;
		processMap_["incrementTutoDisplayed"] = &EngineServerProcessor::process_incrementTutoDisplayed;
		processMap_["getFightReport"] = &EngineServerProcessor::process_getFightReport;
		processMap_["getTimeInfo"] = &EngineServerProcessor::process_getTimeInfo;
		processMap_["eraseAccount"] = &EngineServerProcessor::process_eraseAccount;
		processMap_["getPlayerEvents"] = &EngineServerProcessor::process_getPlayerEvents;
		processMap_["buySkill"] = &EngineServerProcessor::process_buySkill;
		processMap_["getBuildingsInfo"] = &EngineServerProcessor::process_getBuildingsInfo;
		processMap_["getCannonsInfo"] = &EngineServerProcessor::process_getCannonsInfo;
		processMap_["getShipsInfo"] = &EngineServerProcessor::process_getShipsInfo;
		processMap_["addMessage"] = &EngineServerProcessor::process_addMessage;
		processMap_["getMessages"] = &EngineServerProcessor::process_getMessages;
		processMap_["eraseMesage"] = &EngineServerProcessor::process_eraseMesage;
		processMap_["addFriendshipRequest"] = &EngineServerProcessor::process_addFriendshipRequest;
		processMap_["acceptFriendshipRequest"] = &EngineServerProcessor::process_acceptFriendshipRequest;
		processMap_["closeFriendship"] = &EngineServerProcessor::process_closeFriendship;
		processMap_["getFriends"] = &EngineServerProcessor::process_getFriends;
		processMap_["getFriendshipRequest"] = &EngineServerProcessor::process_getFriendshipRequest;
		processMap_["addAlliance"] = &EngineServerProcessor::process_addAlliance;
		processMap_["getAlliance"] = &EngineServerProcessor::process_getAlliance;
		processMap_["updateAlliance"] = &EngineServerProcessor::process_updateAlliance;
		processMap_["transfertAlliance"] = &EngineServerProcessor::process_transfertAlliance;
		processMap_["eraseAlliance"] = &EngineServerProcessor::process_eraseAlliance;
		processMap_["joinAlliance"] = &EngineServerProcessor::process_joinAlliance;
		processMap_["quitAlliance"] = &EngineServerProcessor::process_quitAlliance;
	}

	virtual ~EngineServerProcessor() {}
};

class EngineServerProcessorFactory : public ::apache::thrift::TProcessorFactory
{
public:
	EngineServerProcessorFactory(const ::boost::shared_ptr< EngineServerIfFactory >& handlerFactory) :
		handlerFactory_(handlerFactory) {}

	::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

protected:
	::boost::shared_ptr< EngineServerIfFactory > handlerFactory_;
};

class EngineServerMultiface : virtual public EngineServerIf
{
public:
	EngineServerMultiface(std::vector<boost::shared_ptr<EngineServerIf> >& ifaces) : ifaces_(ifaces)
	{
	}
	virtual ~EngineServerMultiface() {}
protected:
	std::vector<boost::shared_ptr<EngineServerIf> > ifaces_;
	EngineServerMultiface() {}
	void add(boost::shared_ptr<EngineServerIf> iface)
	{
		ifaces_.push_back(iface);
	}
public:
	void start()
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->start();
		}
		ifaces_[i]->start();
	}

	void stop()
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->stop();
		}
		ifaces_[i]->stop();
	}

	bool addPlayer(const std::string& login, const std::string& password)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->addPlayer(login, password);
		}
		return ifaces_[i]->addPlayer(login, password);
	}

	void getPlayerFleets(FleetList& _return, const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc, const int32_t value)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getPlayerFleets(_return, pid, beginIndex, endIndex, sortType, asc, value);
		}
		ifaces_[i]->getPlayerFleets(_return, pid, beginIndex, endIndex, sortType, asc, value);
		return;
	}

	void getPlayerPlanets(PlanetList& _return, const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc, const int32_t value)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getPlayerPlanets(_return, pid, beginIndex, endIndex, sortType, asc, value);
		}
		ifaces_[i]->getPlayerPlanets(_return, pid, beginIndex, endIndex, sortType, asc, value);
		return;
	}

	void setPlayerFleetCode(const Player_ID pid, const std::string& code)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->setPlayerFleetCode(pid, code);
		}
		ifaces_[i]->setPlayerFleetCode(pid, code);
	}

	void setPlayerPlanetCode(const Player_ID pid, const std::string& code)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->setPlayerPlanetCode(pid, code);
		}
		ifaces_[i]->setPlayerPlanetCode(pid, code);
	}

	void setPlayerFleetBlocklyCode(const Player_ID pid, const std::string& code)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->setPlayerFleetBlocklyCode(pid, code);
		}
		ifaces_[i]->setPlayerFleetBlocklyCode(pid, code);
	}

	void setPlayerPlanetBlocklyCode(const Player_ID pid, const std::string& code)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->setPlayerPlanetBlocklyCode(pid, code);
		}
		ifaces_[i]->setPlayerPlanetBlocklyCode(pid, code);
	}

	void getPlayerFleetCode(CodeData& _return, const Player_ID pid)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getPlayerFleetCode(_return, pid);
		}
		ifaces_[i]->getPlayerFleetCode(_return, pid);
		return;
	}

	void getPlayerPlanetCode(CodeData& _return, const Player_ID pid)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getPlayerPlanetCode(_return, pid);
		}
		ifaces_[i]->getPlayerPlanetCode(_return, pid);
		return;
	}

	void getPlayers(std::vector<Player>& _return)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getPlayers(_return);
		}
		ifaces_[i]->getPlayers(_return);
		return;
	}

	void getPlayer(Player& _return, const Player_ID pid)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getPlayer(_return, pid);
		}
		ifaces_[i]->getPlayer(_return, pid);
		return;
	}

	void getPlanet(std::vector<Planet>& _return, const Coord& coord)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getPlanet(_return, coord);
		}
		ifaces_[i]->getPlanet(_return, coord);
		return;
	}

	void getFleet(Fleet& _return, const Fleet_ID fid)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getFleet(_return, fid);
		}
		ifaces_[i]->getFleet(_return, fid);
		return;
	}

	void logPlayer(OptionalPlayer& _return, const std::string& login, const std::string& password)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->logPlayer(_return, login, password);
		}
		ifaces_[i]->logPlayer(_return, login, password);
		return;
	}

	void incrementTutoDisplayed(const Player_ID pid, const std::string& tutoName, const int32_t value)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->incrementTutoDisplayed(pid, tutoName, value);
		}
		ifaces_[i]->incrementTutoDisplayed(pid, tutoName, value);
	}

	void getFightReport(FightReport& _return, const int32_t id)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getFightReport(_return, id);
		}
		ifaces_[i]->getFightReport(_return, id);
		return;
	}

	void getTimeInfo(TimeInfo& _return)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getTimeInfo(_return);
		}
		ifaces_[i]->getTimeInfo(_return);
		return;
	}

	bool eraseAccount(const Player_ID pid, const std::string& password)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->eraseAccount(pid, password);
		}
		return ifaces_[i]->eraseAccount(pid, password);
	}

	void getPlayerEvents(std::vector<Event>& _return, const Player_ID pid)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getPlayerEvents(_return, pid);
		}
		ifaces_[i]->getPlayerEvents(_return, pid);
		return;
	}

	bool buySkill(const Player_ID pid, const int16_t skillID)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->buySkill(pid, skillID);
		}
		return ifaces_[i]->buySkill(pid, skillID);
	}

	void getBuildingsInfo(std::vector<Building>& _return)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getBuildingsInfo(_return);
		}
		ifaces_[i]->getBuildingsInfo(_return);
		return;
	}

	void getCannonsInfo(std::vector<Cannon>& _return)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getCannonsInfo(_return);
		}
		ifaces_[i]->getCannonsInfo(_return);
		return;
	}

	void getShipsInfo(std::vector<Ship>& _return)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getShipsInfo(_return);
		}
		ifaces_[i]->getShipsInfo(_return);
		return;
	}

	void addMessage(const Player_ID sender, const Player_ID recipient, const std::string& suject, const std::string& message)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->addMessage(sender, recipient, suject, message);
		}
		ifaces_[i]->addMessage(sender, recipient, suject, message);
	}

	void getMessages(std::vector<Message>& _return, const Player_ID recipient)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getMessages(_return, recipient);
		}
		ifaces_[i]->getMessages(_return, recipient);
		return;
	}

	void eraseMesage(const Message_ID mid)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->eraseMesage(mid);
		}
		ifaces_[i]->eraseMesage(mid);
	}

	void addFriendshipRequest(const Player_ID playerA, const Player_ID playerB)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->addFriendshipRequest(playerA, playerB);
		}
		ifaces_[i]->addFriendshipRequest(playerA, playerB);
	}

	void acceptFriendshipRequest(const Player_ID playerA, const Player_ID playerB, const bool accept)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->acceptFriendshipRequest(playerA, playerB, accept);
		}
		ifaces_[i]->acceptFriendshipRequest(playerA, playerB, accept);
	}

	void closeFriendship(const Player_ID playerA, const Player_ID playerB)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->closeFriendship(playerA, playerB);
		}
		ifaces_[i]->closeFriendship(playerA, playerB);
	}

	void getFriends(std::vector<Player>& _return, const Player_ID player)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getFriends(_return, player);
		}
		ifaces_[i]->getFriends(_return, player);
		return;
	}

	void getFriendshipRequest(FriendshipRequests& _return, const Player_ID player)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getFriendshipRequest(_return, player);
		}
		ifaces_[i]->getFriendshipRequest(_return, player);
		return;
	}

	Alliance_ID addAlliance(const Player_ID pid, const std::string& name, const std::string& description)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->addAlliance(pid, name, description);
		}
		return ifaces_[i]->addAlliance(pid, name, description);
	}

	void getAlliance(Alliance& _return, const Alliance_ID aid)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->getAlliance(_return, aid);
		}
		ifaces_[i]->getAlliance(_return, aid);
		return;
	}

	void updateAlliance(const Alliance& alliance)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->updateAlliance(alliance);
		}
		ifaces_[i]->updateAlliance(alliance);
	}

	void transfertAlliance(const Alliance_ID aid, const Player_ID pid)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->transfertAlliance(aid, pid);
		}
		ifaces_[i]->transfertAlliance(aid, pid);
	}

	void eraseAlliance(const Alliance_ID aid)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->eraseAlliance(aid);
		}
		ifaces_[i]->eraseAlliance(aid);
	}

	void joinAlliance(const Player_ID pid, const Alliance_ID aid)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->joinAlliance(pid, aid);
		}
		ifaces_[i]->joinAlliance(pid, aid);
	}

	void quitAlliance(const Player_ID pid)
	{
		size_t sz = ifaces_.size();
		size_t i = 0;
		for(; i < (sz - 1); ++i)
		{
			ifaces_[i]->quitAlliance(pid);
		}
		ifaces_[i]->quitAlliance(pid);
	}

};

} // namespace

#endif
