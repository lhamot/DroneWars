/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift_types.h"

#include <algorithm>

namespace ndw
{

int _kEvent_TypeValues[] =
{
	Event_Type::FleetCodeError,
	Event_Type::FleetCodeExecError,
	Event_Type::PlanetCodeError,
	Event_Type::PlanetCodeExecError,
	Event_Type::Upgraded,
	Event_Type::ShipMade,
	Event_Type::PlanetHarvested,
	Event_Type::FleetWin,
	Event_Type::FleetDraw,
	Event_Type::FleetsGather,
	Event_Type::PlanetColonized,
	Event_Type::FleetLose,
	Event_Type::FleetDrop,
	Event_Type::PlanetLose,
	Event_Type::PlanetWin,
	Event_Type::CannonMade,
	Event_Type::FightAvoided,
	Event_Type::PlayerLog,
	Event_Type::Count
};
const char* _kEvent_TypeNames[] =
{
	"FleetCodeError",
	"FleetCodeExecError",
	"PlanetCodeError",
	"PlanetCodeExecError",
	"Upgraded",
	"ShipMade",
	"PlanetHarvested",
	"FleetWin",
	"FleetDraw",
	"FleetsGather",
	"PlanetColonized",
	"FleetLose",
	"FleetDrop",
	"PlanetLose",
	"PlanetWin",
	"CannonMade",
	"FightAvoided",
	"PlayerLog",
	"Count"
};
const std::map<int, const char*> _Event_Type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(19, _kEvent_TypeValues, _kEvent_TypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRessourceValues[] =
{
	Ressource::Metal,
	Ressource::Carbon,
	Ressource::Loicium,
	Ressource::Count
};
const char* _kRessourceNames[] =
{
	"Metal",
	"Carbon",
	"Loicium",
	"Count"
};
const std::map<int, const char*> _Ressource_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kRessourceValues, _kRessourceNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPlanetTask_EnumValues[] =
{
	PlanetTask_Enum::UpgradeBuilding,
	PlanetTask_Enum::MakeShip,
	PlanetTask_Enum::MakeCannon,
	PlanetTask_Enum::Count
};
const char* _kPlanetTask_EnumNames[] =
{
	"UpgradeBuilding",
	"MakeShip",
	"MakeCannon",
	"Count"
};
const std::map<int, const char*> _PlanetTask_Enum_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPlanetTask_EnumValues, _kPlanetTask_EnumNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kBuilding_EnumValues[] =
{
	Building_Enum::CommandCenter,
	Building_Enum::MetalMine,
	Building_Enum::CarbonMine,
	Building_Enum::LoiciumFilter,
	Building_Enum::Factory,
	Building_Enum::Laboratory,
	Building_Enum::CarbonicCentral,
	Building_Enum::SolarCentral,
	Building_Enum::GeothermicCentral,
	Building_Enum::Count
};
const char* _kBuilding_EnumNames[] =
{
	"CommandCenter",
	"MetalMine",
	"CarbonMine",
	"LoiciumFilter",
	"Factory",
	"Laboratory",
	"CarbonicCentral",
	"SolarCentral",
	"GeothermicCentral",
	"Count"
};
const std::map<int, const char*> _Building_Enum_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kBuilding_EnumValues, _kBuilding_EnumNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kShip_EnumValues[] =
{
	Ship_Enum::Mosquito,
	Ship_Enum::Hornet,
	Ship_Enum::Vulture,
	Ship_Enum::Dragon,
	Ship_Enum::Behemoth,
	Ship_Enum::Azathoth,
	Ship_Enum::Queen,
	Ship_Enum::Cargo,
	Ship_Enum::LargeCargo,
	Ship_Enum::Count
};
const char* _kShip_EnumNames[] =
{
	"Mosquito",
	"Hornet",
	"Vulture",
	"Dragon",
	"Behemoth",
	"Azathoth",
	"Queen",
	"Cargo",
	"LargeCargo",
	"Count"
};
const std::map<int, const char*> _Ship_Enum_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kShip_EnumValues, _kShip_EnumNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCannon_EnumValues[] =
{
	Cannon_Enum::Cannon1,
	Cannon_Enum::Cannon2,
	Cannon_Enum::Cannon3,
	Cannon_Enum::Cannon4,
	Cannon_Enum::Cannon5,
	Cannon_Enum::Cannon6,
	Cannon_Enum::Count
};
const char* _kCannon_EnumNames[] =
{
	"Cannon1",
	"Cannon2",
	"Cannon3",
	"Cannon4",
	"Cannon5",
	"Cannon6",
	"Count"
};
const std::map<int, const char*> _Cannon_Enum_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kCannon_EnumValues, _kCannon_EnumNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFleetTask_EnumValues[] =
{
	FleetTask_Enum::Move,
	FleetTask_Enum::Harvest,
	FleetTask_Enum::Colonize,
	FleetTask_Enum::Count
};
const char* _kFleetTask_EnumNames[] =
{
	"Move",
	"Harvest",
	"Colonize",
	"Count"
};
const std::map<int, const char*> _FleetTask_Enum_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kFleetTask_EnumValues, _kFleetTask_EnumNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFleetAction_TypeValues[] =
{
	FleetAction_Type::Nothing,
	FleetAction_Type::Move,
	FleetAction_Type::Harvest,
	FleetAction_Type::Colonize
};
const char* _kFleetAction_TypeNames[] =
{
	"Nothing",
	"Move",
	"Harvest",
	"Colonize"
};
const std::map<int, const char*> _FleetAction_Type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kFleetAction_TypeValues, _kFleetAction_TypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSort_TypeValues[] =
{
	Sort_Type::Name,
	Sort_Type::X,
	Sort_Type::Y,
	Sort_Type::Z,
	Sort_Type::M,
	Sort_Type::C,
	Sort_Type::L
};
const char* _kSort_TypeNames[] =
{
	"Name",
	"X",
	"Y",
	"Z",
	"M",
	"C",
	"L"
};
const std::map<int, const char*> _Sort_Type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kSort_TypeValues, _kSort_TypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Coord::ascii_fingerprint = "CA961494BB2E3F092A20C7271AA01847";
const uint8_t Coord::binary_fingerprint[16] = {0xCA, 0x96, 0x14, 0x94, 0xBB, 0x2E, 0x3F, 0x09, 0x2A, 0x20, 0xC7, 0x27, 0x1A, 0xA0, 0x18, 0x47};

uint32_t Coord::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I16)
			{
				xfer += iprot->readI16(this->X);
				this->__isset.X = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I16)
			{
				xfer += iprot->readI16(this->Y);
				this->__isset.Y = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I16)
			{
				xfer += iprot->readI16(this->Z);
				this->__isset.Z = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Coord::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Coord");

	xfer += oprot->writeFieldBegin("X", ::apache::thrift::protocol::T_I16, 10);
	xfer += oprot->writeI16(this->X);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("Y", ::apache::thrift::protocol::T_I16, 20);
	xfer += oprot->writeI16(this->Y);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("Z", ::apache::thrift::protocol::T_I16, 30);
	xfer += oprot->writeI16(this->Z);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Coord& a, Coord& b)
{
	using ::std::swap;
	swap(a.X, b.X);
	swap(a.Y, b.Y);
	swap(a.Z, b.Z);
	swap(a.__isset, b.__isset);
}

const char* Event::ascii_fingerprint = "05279B715ECA17E118DE09443DAACE7E";
const uint8_t Event::binary_fingerprint[16] = {0x05, 0x27, 0x9B, 0x71, 0x5E, 0xCA, 0x17, 0xE1, 0x18, 0xDE, 0x09, 0x44, 0x3D, 0xAA, 0xCE, 0x7E};

uint32_t Event::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->id);
				this->__isset.id = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->time);
				this->__isset.time = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				int32_t ecast0;
				xfer += iprot->readI32(ecast0);
				this->type = (Event_Type::type)ecast0;
				this->__isset.type = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->comment);
				this->__isset.comment = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 50:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->value);
				this->__isset.value = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 60:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->value2);
				this->__isset.value2 = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 70:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->viewed);
				this->__isset.viewed = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Event::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Event");

	xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->id);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->time);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32((int32_t)this->type);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 40);
	xfer += oprot->writeString(this->comment);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 50);
	xfer += oprot->writeI32(this->value);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("value2", ::apache::thrift::protocol::T_I32, 60);
	xfer += oprot->writeI32(this->value2);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("viewed", ::apache::thrift::protocol::T_BOOL, 70);
	xfer += oprot->writeBool(this->viewed);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Event& a, Event& b)
{
	using ::std::swap;
	swap(a.id, b.id);
	swap(a.time, b.time);
	swap(a.type, b.type);
	swap(a.comment, b.comment);
	swap(a.value, b.value);
	swap(a.value2, b.value2);
	swap(a.viewed, b.viewed);
	swap(a.__isset, b.__isset);
}

const char* CodeData::ascii_fingerprint = "E6CD2A5AF21635774A095F87B4F891AA";
const uint8_t CodeData::binary_fingerprint[16] = {0xE6, 0xCD, 0x2A, 0x5A, 0xF2, 0x16, 0x35, 0x77, 0x4A, 0x09, 0x5F, 0x87, 0xB4, 0xF8, 0x91, 0xAA};

uint32_t CodeData::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->blocklyCode);
				this->__isset.blocklyCode = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->blocklyCodeDate);
				this->__isset.blocklyCodeDate = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->code);
				this->__isset.code = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->codeDate);
				this->__isset.codeDate = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 50:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->lastError);
				this->__isset.lastError = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t CodeData::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("CodeData");

	xfer += oprot->writeFieldBegin("blocklyCode", ::apache::thrift::protocol::T_STRING, 10);
	xfer += oprot->writeString(this->blocklyCode);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("blocklyCodeDate", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->blocklyCodeDate);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 30);
	xfer += oprot->writeString(this->code);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("codeDate", ::apache::thrift::protocol::T_I32, 40);
	xfer += oprot->writeI32(this->codeDate);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("lastError", ::apache::thrift::protocol::T_STRING, 50);
	xfer += oprot->writeString(this->lastError);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(CodeData& a, CodeData& b)
{
	using ::std::swap;
	swap(a.blocklyCode, b.blocklyCode);
	swap(a.blocklyCodeDate, b.blocklyCodeDate);
	swap(a.code, b.code);
	swap(a.codeDate, b.codeDate);
	swap(a.lastError, b.lastError);
	swap(a.__isset, b.__isset);
}

const char* Alliance::ascii_fingerprint = "D053B794D972C573CD6C2B05D5062B3A";
const uint8_t Alliance::binary_fingerprint[16] = {0xD0, 0x53, 0xB7, 0x94, 0xD9, 0x72, 0xC5, 0x73, 0xCD, 0x6C, 0x2B, 0x05, 0xD5, 0x06, 0x2B, 0x3A};

uint32_t Alliance::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->id);
				this->__isset.id = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->masterID);
				this->__isset.masterID = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->name);
				this->__isset.name = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->description);
				this->__isset.description = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 50:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->masterLogin);
				this->__isset.masterLogin = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Alliance::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Alliance");

	xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->id);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("masterID", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->masterID);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 30);
	xfer += oprot->writeString(this->name);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 40);
	xfer += oprot->writeString(this->description);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("masterLogin", ::apache::thrift::protocol::T_STRING, 50);
	xfer += oprot->writeString(this->masterLogin);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Alliance& a, Alliance& b)
{
	using ::std::swap;
	swap(a.id, b.id);
	swap(a.masterID, b.masterID);
	swap(a.name, b.name);
	swap(a.description, b.description);
	swap(a.masterLogin, b.masterLogin);
	swap(a.__isset, b.__isset);
}

const char* Skill::ascii_fingerprint = "AD2770DBF5B05009C3E548C832BE37C4";
const uint8_t Skill::binary_fingerprint[16] = {0xAD, 0x27, 0x70, 0xDB, 0xF5, 0xB0, 0x50, 0x09, 0xC3, 0xE5, 0x48, 0xC8, 0x32, 0xBE, 0x37, 0xC4};

uint32_t Skill::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->name);
				this->__isset.name = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->level);
				this->__isset.level = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->cost);
				this->__isset.cost = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->canUpdate);
				this->__isset.canUpdate = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 50:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->effectMessage);
				this->__isset.effectMessage = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 60:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->nextLevelMessage);
				this->__isset.nextLevelMessage = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Skill::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Skill");

	xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 10);
	xfer += oprot->writeString(this->name);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->level);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("cost", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32(this->cost);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("canUpdate", ::apache::thrift::protocol::T_BOOL, 40);
	xfer += oprot->writeBool(this->canUpdate);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("effectMessage", ::apache::thrift::protocol::T_STRING, 50);
	xfer += oprot->writeString(this->effectMessage);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("nextLevelMessage", ::apache::thrift::protocol::T_STRING, 60);
	xfer += oprot->writeString(this->nextLevelMessage);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Skill& a, Skill& b)
{
	using ::std::swap;
	swap(a.name, b.name);
	swap(a.level, b.level);
	swap(a.cost, b.cost);
	swap(a.canUpdate, b.canUpdate);
	swap(a.effectMessage, b.effectMessage);
	swap(a.nextLevelMessage, b.nextLevelMessage);
	swap(a.__isset, b.__isset);
}

const char* Player::ascii_fingerprint = "626A10876AEA8D693715A58F96837EBA";
const uint8_t Player::binary_fingerprint[16] = {0x62, 0x6A, 0x10, 0x87, 0x6A, 0xEA, 0x8D, 0x69, 0x37, 0x15, 0xA5, 0x8F, 0x96, 0x83, 0x7E, 0xBA};

uint32_t Player::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->id);
				this->__isset.id = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->login);
				this->__isset.login = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->password);
				this->__isset.password = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->fleetsCode.read(iprot);
				this->__isset.fleetsCode = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 50:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->planetsCode.read(iprot);
				this->__isset.planetsCode = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 70:
			if(ftype == ::apache::thrift::protocol::T_MAP)
			{
				{
					this->tutoDisplayed.clear();
					uint32_t _size1;
					::apache::thrift::protocol::TType _ktype2;
					::apache::thrift::protocol::TType _vtype3;
					xfer += iprot->readMapBegin(_ktype2, _vtype3, _size1);
					uint32_t _i5;
					for(_i5 = 0; _i5 < _size1; ++_i5)
					{
						std::string _key6;
						xfer += iprot->readString(_key6);
						int32_t& _val7 = this->tutoDisplayed[_key6];
						xfer += iprot->readI32(_val7);
					}
					xfer += iprot->readMapEnd();
				}
				this->__isset.tutoDisplayed = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 80:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->mainPlanet.read(iprot);
				this->__isset.mainPlanet = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 90:
			if(ftype == ::apache::thrift::protocol::T_I64)
			{
				xfer += iprot->readI64(this->score);
				this->__isset.score = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 100:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->allianceID);
				this->__isset.allianceID = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 110:
			if(ftype == ::apache::thrift::protocol::T_I64)
			{
				xfer += iprot->readI64(this->experience);
				this->__isset.experience = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 120:
			if(ftype == ::apache::thrift::protocol::T_I64)
			{
				xfer += iprot->readI64(this->skillpoints);
				this->__isset.skillpoints = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 130:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->skilltab.clear();
					uint32_t _size8;
					::apache::thrift::protocol::TType _etype11;
					xfer += iprot->readListBegin(_etype11, _size8);
					this->skilltab.resize(_size8);
					uint32_t _i12;
					for(_i12 = 0; _i12 < _size8; ++_i12)
					{
						xfer += this->skilltab[_i12].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.skilltab = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 160:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->allianceName);
				this->__isset.allianceName = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 170:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->unreadMessagesCount);
				this->__isset.unreadMessagesCount = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Player::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Player");

	xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->id);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->login);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 30);
	xfer += oprot->writeString(this->password);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("fleetsCode", ::apache::thrift::protocol::T_STRUCT, 40);
	xfer += this->fleetsCode.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("planetsCode", ::apache::thrift::protocol::T_STRUCT, 50);
	xfer += this->planetsCode.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("tutoDisplayed", ::apache::thrift::protocol::T_MAP, 70);
	{
		xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->tutoDisplayed.size()));
		std::map<std::string, int32_t> ::const_iterator _iter13;
		for(_iter13 = this->tutoDisplayed.begin(); _iter13 != this->tutoDisplayed.end(); ++_iter13)
		{
			xfer += oprot->writeString(_iter13->first);
			xfer += oprot->writeI32(_iter13->second);
		}
		xfer += oprot->writeMapEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("mainPlanet", ::apache::thrift::protocol::T_STRUCT, 80);
	xfer += this->mainPlanet.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("score", ::apache::thrift::protocol::T_I64, 90);
	xfer += oprot->writeI64(this->score);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("allianceID", ::apache::thrift::protocol::T_I32, 100);
	xfer += oprot->writeI32(this->allianceID);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("experience", ::apache::thrift::protocol::T_I64, 110);
	xfer += oprot->writeI64(this->experience);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("skillpoints", ::apache::thrift::protocol::T_I64, 120);
	xfer += oprot->writeI64(this->skillpoints);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("skilltab", ::apache::thrift::protocol::T_LIST, 130);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->skilltab.size()));
		std::vector<Skill> ::const_iterator _iter14;
		for(_iter14 = this->skilltab.begin(); _iter14 != this->skilltab.end(); ++_iter14)
		{
			xfer += (*_iter14).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("allianceName", ::apache::thrift::protocol::T_STRING, 160);
	xfer += oprot->writeString(this->allianceName);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("unreadMessagesCount", ::apache::thrift::protocol::T_I32, 170);
	xfer += oprot->writeI32(this->unreadMessagesCount);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Player& a, Player& b)
{
	using ::std::swap;
	swap(a.id, b.id);
	swap(a.login, b.login);
	swap(a.password, b.password);
	swap(a.fleetsCode, b.fleetsCode);
	swap(a.planetsCode, b.planetsCode);
	swap(a.tutoDisplayed, b.tutoDisplayed);
	swap(a.mainPlanet, b.mainPlanet);
	swap(a.score, b.score);
	swap(a.allianceID, b.allianceID);
	swap(a.experience, b.experience);
	swap(a.skillpoints, b.skillpoints);
	swap(a.skilltab, b.skilltab);
	swap(a.allianceName, b.allianceName);
	swap(a.unreadMessagesCount, b.unreadMessagesCount);
	swap(a.__isset, b.__isset);
}

const char* RessourceSet::ascii_fingerprint = "A803C54EAD95E24D90C5E66FB98EA72B";
const uint8_t RessourceSet::binary_fingerprint[16] = {0xA8, 0x03, 0xC5, 0x4E, 0xAD, 0x95, 0xE2, 0x4D, 0x90, 0xC5, 0xE6, 0x6F, 0xB9, 0x8E, 0xA7, 0x2B};

uint32_t RessourceSet::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->tab.clear();
					uint32_t _size15;
					::apache::thrift::protocol::TType _etype18;
					xfer += iprot->readListBegin(_etype18, _size15);
					this->tab.resize(_size15);
					uint32_t _i19;
					for(_i19 = 0; _i19 < _size15; ++_i19)
					{
						xfer += iprot->readI32(this->tab[_i19]);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.tab = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t RessourceSet::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("RessourceSet");

	xfer += oprot->writeFieldBegin("tab", ::apache::thrift::protocol::T_LIST, 1);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->tab.size()));
		std::vector<int32_t> ::const_iterator _iter20;
		for(_iter20 = this->tab.begin(); _iter20 != this->tab.end(); ++_iter20)
		{
			xfer += oprot->writeI32((*_iter20));
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(RessourceSet& a, RessourceSet& b)
{
	using ::std::swap;
	swap(a.tab, b.tab);
	swap(a.__isset, b.__isset);
}

const char* PlanetTask::ascii_fingerprint = "19D77FE5BA23B2E932882446FD75CA83";
const uint8_t PlanetTask::binary_fingerprint[16] = {0x19, 0xD7, 0x7F, 0xE5, 0xBA, 0x23, 0xB2, 0xE9, 0x32, 0x88, 0x24, 0x46, 0xFD, 0x75, 0xCA, 0x83};

uint32_t PlanetTask::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				int32_t ecast21;
				xfer += iprot->readI32(ecast21);
				this->type = (PlanetTask_Enum::type)ecast21;
				this->__isset.type = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->value);
				this->__isset.value = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->value2);
				this->__isset.value2 = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 4:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->lauchTime);
				this->__isset.lauchTime = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 5:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->duration);
				this->__isset.duration = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 6:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->startCos.read(iprot);
				this->__isset.startCos = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 7:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->expired);
				this->__isset.expired = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t PlanetTask::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("PlanetTask");

	xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
	xfer += oprot->writeI32((int32_t)this->type);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 2);
	xfer += oprot->writeI32(this->value);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("value2", ::apache::thrift::protocol::T_I32, 3);
	xfer += oprot->writeI32(this->value2);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("lauchTime", ::apache::thrift::protocol::T_I32, 4);
	xfer += oprot->writeI32(this->lauchTime);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_I32, 5);
	xfer += oprot->writeI32(this->duration);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("startCos", ::apache::thrift::protocol::T_STRUCT, 6);
	xfer += this->startCos.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("expired", ::apache::thrift::protocol::T_BOOL, 7);
	xfer += oprot->writeBool(this->expired);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(PlanetTask& a, PlanetTask& b)
{
	using ::std::swap;
	swap(a.type, b.type);
	swap(a.value, b.value);
	swap(a.value2, b.value2);
	swap(a.lauchTime, b.lauchTime);
	swap(a.duration, b.duration);
	swap(a.startCos, b.startCos);
	swap(a.expired, b.expired);
	swap(a.__isset, b.__isset);
}

const char* Building::ascii_fingerprint = "FD09D2C02D33B253CB5884E10282D019";
const uint8_t Building::binary_fingerprint[16] = {0xFD, 0x09, 0xD2, 0xC0, 0x2D, 0x33, 0xB2, 0x53, 0xCB, 0x58, 0x84, 0xE1, 0x02, 0x82, 0xD0, 0x19};

uint32_t Building::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->index);
				this->__isset.index = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->price.read(iprot);
				this->__isset.price = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_DOUBLE)
			{
				xfer += iprot->readDouble(this->coef);
				this->__isset.coef = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Building::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Building");

	xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->index);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_STRUCT, 20);
	xfer += this->price.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("coef", ::apache::thrift::protocol::T_DOUBLE, 30);
	xfer += oprot->writeDouble(this->coef);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Building& a, Building& b)
{
	using ::std::swap;
	swap(a.index, b.index);
	swap(a.price, b.price);
	swap(a.coef, b.coef);
	swap(a.__isset, b.__isset);
}

const char* Ship::ascii_fingerprint = "947CF187B243FAE37B6AB77F54D6D8FA";
const uint8_t Ship::binary_fingerprint[16] = {0x94, 0x7C, 0xF1, 0x87, 0xB2, 0x43, 0xFA, 0xE3, 0x7B, 0x6A, 0xB7, 0x7F, 0x54, 0xD6, 0xD8, 0xFA};

uint32_t Ship::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->index);
				this->__isset.index = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->price.read(iprot);
				this->__isset.price = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->life);
				this->__isset.life = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->power);
				this->__isset.power = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Ship::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Ship");

	xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->index);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_STRUCT, 20);
	xfer += this->price.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("life", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32(this->life);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("power", ::apache::thrift::protocol::T_I32, 40);
	xfer += oprot->writeI32(this->power);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Ship& a, Ship& b)
{
	using ::std::swap;
	swap(a.index, b.index);
	swap(a.price, b.price);
	swap(a.life, b.life);
	swap(a.power, b.power);
	swap(a.__isset, b.__isset);
}

const char* Cannon::ascii_fingerprint = "947CF187B243FAE37B6AB77F54D6D8FA";
const uint8_t Cannon::binary_fingerprint[16] = {0x94, 0x7C, 0xF1, 0x87, 0xB2, 0x43, 0xFA, 0xE3, 0x7B, 0x6A, 0xB7, 0x7F, 0x54, 0xD6, 0xD8, 0xFA};

uint32_t Cannon::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->index);
				this->__isset.index = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->price.read(iprot);
				this->__isset.price = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->life);
				this->__isset.life = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->power);
				this->__isset.power = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Cannon::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Cannon");

	xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->index);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_STRUCT, 20);
	xfer += this->price.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("life", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32(this->life);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("power", ::apache::thrift::protocol::T_I32, 40);
	xfer += oprot->writeI32(this->power);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Cannon& a, Cannon& b)
{
	using ::std::swap;
	swap(a.index, b.index);
	swap(a.price, b.price);
	swap(a.life, b.life);
	swap(a.power, b.power);
	swap(a.__isset, b.__isset);
}

const char* FleetTask::ascii_fingerprint = "143BF505F8C7FC02D011519505B27DD1";
const uint8_t FleetTask::binary_fingerprint[16] = {0x14, 0x3B, 0xF5, 0x05, 0xF8, 0xC7, 0xFC, 0x02, 0xD0, 0x11, 0x51, 0x95, 0x05, 0xB2, 0x7D, 0xD1};

uint32_t FleetTask::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				int32_t ecast22;
				xfer += iprot->readI32(ecast22);
				this->type = (FleetTask_Enum::type)ecast22;
				this->__isset.type = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->lauchTime);
				this->__isset.lauchTime = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->duration);
				this->__isset.duration = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 4:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->position.read(iprot);
				this->__isset.position = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 5:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->expired);
				this->__isset.expired = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t FleetTask::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("FleetTask");

	xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
	xfer += oprot->writeI32((int32_t)this->type);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("lauchTime", ::apache::thrift::protocol::T_I32, 2);
	xfer += oprot->writeI32(this->lauchTime);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_I32, 3);
	xfer += oprot->writeI32(this->duration);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRUCT, 4);
	xfer += this->position.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("expired", ::apache::thrift::protocol::T_BOOL, 5);
	xfer += oprot->writeBool(this->expired);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(FleetTask& a, FleetTask& b)
{
	using ::std::swap;
	swap(a.type, b.type);
	swap(a.lauchTime, b.lauchTime);
	swap(a.duration, b.duration);
	swap(a.position, b.position);
	swap(a.expired, b.expired);
	swap(a.__isset, b.__isset);
}

const char* Planet::ascii_fingerprint = "3B9778BA937561137A329BB8966E30E1";
const uint8_t Planet::binary_fingerprint[16] = {0x3B, 0x97, 0x78, 0xBA, 0x93, 0x75, 0x61, 0x13, 0x7A, 0x32, 0x9B, 0xB8, 0x96, 0x6E, 0x30, 0xE1};

uint32_t Planet::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->name);
				this->__isset.name = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->coord.read(iprot);
				this->__isset.coord = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->playerId);
				this->__isset.playerId = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->buildingList.clear();
					uint32_t _size23;
					::apache::thrift::protocol::TType _etype26;
					xfer += iprot->readListBegin(_etype26, _size23);
					this->buildingList.resize(_size23);
					uint32_t _i27;
					for(_i27 = 0; _i27 < _size23; ++_i27)
					{
						xfer += iprot->readI32(this->buildingList[_i27]);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.buildingList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 50:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->taskQueue.clear();
					uint32_t _size28;
					::apache::thrift::protocol::TType _etype31;
					xfer += iprot->readListBegin(_etype31, _size28);
					this->taskQueue.resize(_size28);
					uint32_t _i32;
					for(_i32 = 0; _i32 < _size28; ++_i32)
					{
						xfer += this->taskQueue[_i32].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.taskQueue = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 60:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->ressourceSet.read(iprot);
				this->__isset.ressourceSet = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 70:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->eventList.clear();
					uint32_t _size33;
					::apache::thrift::protocol::TType _etype36;
					xfer += iprot->readListBegin(_etype36, _size33);
					this->eventList.resize(_size33);
					uint32_t _i37;
					for(_i37 = 0; _i37 < _size33; ++_i37)
					{
						xfer += this->eventList[_i37].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.eventList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 80:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->cannonTab.clear();
					uint32_t _size38;
					::apache::thrift::protocol::TType _etype41;
					xfer += iprot->readListBegin(_etype41, _size38);
					this->cannonTab.resize(_size38);
					uint32_t _i42;
					for(_i42 = 0; _i42 < _size38; ++_i42)
					{
						xfer += iprot->readI32(this->cannonTab[_i42]);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.cannonTab = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 90:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->hangar.clear();
					uint32_t _size43;
					::apache::thrift::protocol::TType _etype46;
					xfer += iprot->readListBegin(_etype46, _size43);
					this->hangar.resize(_size43);
					uint32_t _i47;
					for(_i47 = 0; _i47 < _size43; ++_i47)
					{
						xfer += iprot->readI32(this->hangar[_i47]);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.hangar = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 100:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->playerLogin);
				this->__isset.playerLogin = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 110:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->allianceID);
				this->__isset.allianceID = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Planet::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Planet");

	xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 10);
	xfer += oprot->writeString(this->name);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("coord", ::apache::thrift::protocol::T_STRUCT, 20);
	xfer += this->coord.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("playerId", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32(this->playerId);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("buildingList", ::apache::thrift::protocol::T_LIST, 40);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->buildingList.size()));
		std::vector<int32_t> ::const_iterator _iter48;
		for(_iter48 = this->buildingList.begin(); _iter48 != this->buildingList.end(); ++_iter48)
		{
			xfer += oprot->writeI32((*_iter48));
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("taskQueue", ::apache::thrift::protocol::T_LIST, 50);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->taskQueue.size()));
		std::vector<PlanetTask> ::const_iterator _iter49;
		for(_iter49 = this->taskQueue.begin(); _iter49 != this->taskQueue.end(); ++_iter49)
		{
			xfer += (*_iter49).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("ressourceSet", ::apache::thrift::protocol::T_STRUCT, 60);
	xfer += this->ressourceSet.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("eventList", ::apache::thrift::protocol::T_LIST, 70);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->eventList.size()));
		std::vector<Event> ::const_iterator _iter50;
		for(_iter50 = this->eventList.begin(); _iter50 != this->eventList.end(); ++_iter50)
		{
			xfer += (*_iter50).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("cannonTab", ::apache::thrift::protocol::T_LIST, 80);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->cannonTab.size()));
		std::vector<int32_t> ::const_iterator _iter51;
		for(_iter51 = this->cannonTab.begin(); _iter51 != this->cannonTab.end(); ++_iter51)
		{
			xfer += oprot->writeI32((*_iter51));
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("hangar", ::apache::thrift::protocol::T_LIST, 90);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->hangar.size()));
		std::vector<int32_t> ::const_iterator _iter52;
		for(_iter52 = this->hangar.begin(); _iter52 != this->hangar.end(); ++_iter52)
		{
			xfer += oprot->writeI32((*_iter52));
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("playerLogin", ::apache::thrift::protocol::T_STRING, 100);
	xfer += oprot->writeString(this->playerLogin);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("allianceID", ::apache::thrift::protocol::T_I32, 110);
	xfer += oprot->writeI32(this->allianceID);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Planet& a, Planet& b)
{
	using ::std::swap;
	swap(a.name, b.name);
	swap(a.coord, b.coord);
	swap(a.playerId, b.playerId);
	swap(a.buildingList, b.buildingList);
	swap(a.taskQueue, b.taskQueue);
	swap(a.ressourceSet, b.ressourceSet);
	swap(a.eventList, b.eventList);
	swap(a.cannonTab, b.cannonTab);
	swap(a.hangar, b.hangar);
	swap(a.playerLogin, b.playerLogin);
	swap(a.allianceID, b.allianceID);
	swap(a.__isset, b.__isset);
}

const char* Fleet::ascii_fingerprint = "C76E0C77EF72949CBD758C64E10BF712";
const uint8_t Fleet::binary_fingerprint[16] = {0xC7, 0x6E, 0x0C, 0x77, 0xEF, 0x72, 0x94, 0x9C, 0xBD, 0x75, 0x8C, 0x64, 0xE1, 0x0B, 0xF7, 0x12};

uint32_t Fleet::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I64)
			{
				xfer += iprot->readI64(this->id);
				this->__isset.id = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->playerId);
				this->__isset.playerId = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->coord.read(iprot);
				this->__isset.coord = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->origin.read(iprot);
				this->__isset.origin = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 50:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->name);
				this->__isset.name = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 60:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->shipList.clear();
					uint32_t _size53;
					::apache::thrift::protocol::TType _etype56;
					xfer += iprot->readListBegin(_etype56, _size53);
					this->shipList.resize(_size53);
					uint32_t _i57;
					for(_i57 = 0; _i57 < _size53; ++_i57)
					{
						xfer += iprot->readI32(this->shipList[_i57]);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.shipList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 70:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->ressourceSet.read(iprot);
				this->__isset.ressourceSet = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 80:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->taskQueue.clear();
					uint32_t _size58;
					::apache::thrift::protocol::TType _etype61;
					xfer += iprot->readListBegin(_etype61, _size58);
					this->taskQueue.resize(_size58);
					uint32_t _i62;
					for(_i62 = 0; _i62 < _size58; ++_i62)
					{
						xfer += this->taskQueue[_i62].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.taskQueue = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 90:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->eventList.clear();
					uint32_t _size63;
					::apache::thrift::protocol::TType _etype66;
					xfer += iprot->readListBegin(_etype66, _size63);
					this->eventList.resize(_size63);
					uint32_t _i67;
					for(_i67 = 0; _i67 < _size63; ++_i67)
					{
						xfer += this->eventList[_i67].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.eventList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 100:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->playerLogin);
				this->__isset.playerLogin = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 110:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->allianceID);
				this->__isset.allianceID = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Fleet::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Fleet");

	xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 10);
	xfer += oprot->writeI64(this->id);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("playerId", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->playerId);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("coord", ::apache::thrift::protocol::T_STRUCT, 30);
	xfer += this->coord.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("origin", ::apache::thrift::protocol::T_STRUCT, 40);
	xfer += this->origin.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 50);
	xfer += oprot->writeString(this->name);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("shipList", ::apache::thrift::protocol::T_LIST, 60);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->shipList.size()));
		std::vector<int32_t> ::const_iterator _iter68;
		for(_iter68 = this->shipList.begin(); _iter68 != this->shipList.end(); ++_iter68)
		{
			xfer += oprot->writeI32((*_iter68));
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("ressourceSet", ::apache::thrift::protocol::T_STRUCT, 70);
	xfer += this->ressourceSet.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("taskQueue", ::apache::thrift::protocol::T_LIST, 80);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->taskQueue.size()));
		std::vector<FleetTask> ::const_iterator _iter69;
		for(_iter69 = this->taskQueue.begin(); _iter69 != this->taskQueue.end(); ++_iter69)
		{
			xfer += (*_iter69).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("eventList", ::apache::thrift::protocol::T_LIST, 90);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->eventList.size()));
		std::vector<Event> ::const_iterator _iter70;
		for(_iter70 = this->eventList.begin(); _iter70 != this->eventList.end(); ++_iter70)
		{
			xfer += (*_iter70).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("playerLogin", ::apache::thrift::protocol::T_STRING, 100);
	xfer += oprot->writeString(this->playerLogin);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("allianceID", ::apache::thrift::protocol::T_I32, 110);
	xfer += oprot->writeI32(this->allianceID);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Fleet& a, Fleet& b)
{
	using ::std::swap;
	swap(a.id, b.id);
	swap(a.playerId, b.playerId);
	swap(a.coord, b.coord);
	swap(a.origin, b.origin);
	swap(a.name, b.name);
	swap(a.shipList, b.shipList);
	swap(a.ressourceSet, b.ressourceSet);
	swap(a.taskQueue, b.taskQueue);
	swap(a.eventList, b.eventList);
	swap(a.playerLogin, b.playerLogin);
	swap(a.allianceID, b.allianceID);
	swap(a.__isset, b.__isset);
}

const char* FleetAction::ascii_fingerprint = "F6EF2A530E978464FF841B86E72EEFE1";
const uint8_t FleetAction::binary_fingerprint[16] = {0xF6, 0xEF, 0x2A, 0x53, 0x0E, 0x97, 0x84, 0x64, 0xFF, 0x84, 0x1B, 0x86, 0xE7, 0x2E, 0xEF, 0xE1};

uint32_t FleetAction::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				int32_t ecast71;
				xfer += iprot->readI32(ecast71);
				this->action = (FleetAction_Type::type)ecast71;
				this->__isset.action = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->target.read(iprot);
				this->__isset.target = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t FleetAction::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("FleetAction");

	xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_I32, 1);
	xfer += oprot->writeI32((int32_t)this->action);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("target", ::apache::thrift::protocol::T_STRUCT, 2);
	xfer += this->target.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(FleetAction& a, FleetAction& b)
{
	using ::std::swap;
	swap(a.action, b.action);
	swap(a.target, b.target);
	swap(a.__isset, b.__isset);
}

const char* FleetFightInfo::ascii_fingerprint = "2153DC56A03DDECF054E13EF1F872649";
const uint8_t FleetFightInfo::binary_fingerprint[16] = {0x21, 0x53, 0xDC, 0x56, 0xA0, 0x3D, 0xDE, 0xCF, 0x05, 0x4E, 0x13, 0xEF, 0x1F, 0x87, 0x26, 0x49};

uint32_t FleetFightInfo::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->before.read(iprot);
				this->__isset.before = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->after.read(iprot);
				this->__isset.after = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t FleetFightInfo::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("FleetFightInfo");

	xfer += oprot->writeFieldBegin("before", ::apache::thrift::protocol::T_STRUCT, 10);
	xfer += this->before.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("after", ::apache::thrift::protocol::T_STRUCT, 20);
	xfer += this->after.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(FleetFightInfo& a, FleetFightInfo& b)
{
	using ::std::swap;
	swap(a.before, b.before);
	swap(a.after, b.after);
	swap(a.__isset, b.__isset);
}

const char* FleetReport::ascii_fingerprint = "2387BF8CC4D127D206B7B76E73798CB1";
const uint8_t FleetReport::binary_fingerprint[16] = {0x23, 0x87, 0xBF, 0x8C, 0xC4, 0xD1, 0x27, 0xD2, 0x06, 0xB7, 0xB7, 0x6E, 0x73, 0x79, 0x8C, 0xB1};

uint32_t FleetReport::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->isDead);
				this->__isset.isDead = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->hasFight);
				this->__isset.hasFight = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->experience);
				this->__isset.experience = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_SET)
			{
				{
					this->enemySet.clear();
					uint32_t _size72;
					::apache::thrift::protocol::TType _etype75;
					xfer += iprot->readSetBegin(_etype75, _size72);
					uint32_t _i76;
					for(_i76 = 0; _i76 < _size72; ++_i76)
					{
						int32_t _elem77;
						xfer += iprot->readI32(_elem77);
						this->enemySet.insert(_elem77);
					}
					xfer += iprot->readSetEnd();
				}
				this->__isset.enemySet = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 50:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->fightInfo.read(iprot);
				this->__isset.fightInfo = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 60:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->wantEscape);
				this->__isset.wantEscape = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 70:
			if(ftype == ::apache::thrift::protocol::T_DOUBLE)
			{
				xfer += iprot->readDouble(this->escapeProba);
				this->__isset.escapeProba = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t FleetReport::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("FleetReport");

	xfer += oprot->writeFieldBegin("isDead", ::apache::thrift::protocol::T_BOOL, 10);
	xfer += oprot->writeBool(this->isDead);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("hasFight", ::apache::thrift::protocol::T_BOOL, 20);
	xfer += oprot->writeBool(this->hasFight);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("experience", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32(this->experience);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("enemySet", ::apache::thrift::protocol::T_SET, 40);
	{
		xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->enemySet.size()));
		std::set<int32_t> ::const_iterator _iter78;
		for(_iter78 = this->enemySet.begin(); _iter78 != this->enemySet.end(); ++_iter78)
		{
			xfer += oprot->writeI32((*_iter78));
		}
		xfer += oprot->writeSetEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("fightInfo", ::apache::thrift::protocol::T_STRUCT, 50);
	xfer += this->fightInfo.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("wantEscape", ::apache::thrift::protocol::T_BOOL, 60);
	xfer += oprot->writeBool(this->wantEscape);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("escapeProba", ::apache::thrift::protocol::T_DOUBLE, 70);
	xfer += oprot->writeDouble(this->escapeProba);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(FleetReport& a, FleetReport& b)
{
	using ::std::swap;
	swap(a.isDead, b.isDead);
	swap(a.hasFight, b.hasFight);
	swap(a.experience, b.experience);
	swap(a.enemySet, b.enemySet);
	swap(a.fightInfo, b.fightInfo);
	swap(a.wantEscape, b.wantEscape);
	swap(a.escapeProba, b.escapeProba);
	swap(a.__isset, b.__isset);
}

const char* PlanetFightInfo::ascii_fingerprint = "5608EB01A7A7F683795E4389C2972997";
const uint8_t PlanetFightInfo::binary_fingerprint[16] = {0x56, 0x08, 0xEB, 0x01, 0xA7, 0xA7, 0xF6, 0x83, 0x79, 0x5E, 0x43, 0x89, 0xC2, 0x97, 0x29, 0x97};

uint32_t PlanetFightInfo::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->before.read(iprot);
				this->__isset.before = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->after.read(iprot);
				this->__isset.after = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t PlanetFightInfo::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("PlanetFightInfo");

	xfer += oprot->writeFieldBegin("before", ::apache::thrift::protocol::T_STRUCT, 10);
	xfer += this->before.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("after", ::apache::thrift::protocol::T_STRUCT, 20);
	xfer += this->after.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(PlanetFightInfo& a, PlanetFightInfo& b)
{
	using ::std::swap;
	swap(a.before, b.before);
	swap(a.after, b.after);
	swap(a.__isset, b.__isset);
}

const char* PlanetReport::ascii_fingerprint = "9477BE1F803C67F44DE1908D1FD832C5";
const uint8_t PlanetReport::binary_fingerprint[16] = {0x94, 0x77, 0xBE, 0x1F, 0x80, 0x3C, 0x67, 0xF4, 0x4D, 0xE1, 0x90, 0x8D, 0x1F, 0xD8, 0x32, 0xC5};

uint32_t PlanetReport::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->isDead);
				this->__isset.isDead = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->hasFight);
				this->__isset.hasFight = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->experience);
				this->__isset.experience = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_SET)
			{
				{
					this->enemySet.clear();
					uint32_t _size79;
					::apache::thrift::protocol::TType _etype82;
					xfer += iprot->readSetBegin(_etype82, _size79);
					uint32_t _i83;
					for(_i83 = 0; _i83 < _size79; ++_i83)
					{
						int32_t _elem84;
						xfer += iprot->readI32(_elem84);
						this->enemySet.insert(_elem84);
					}
					xfer += iprot->readSetEnd();
				}
				this->__isset.enemySet = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 50:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->fightInfo.read(iprot);
				this->__isset.fightInfo = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t PlanetReport::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("PlanetReport");

	xfer += oprot->writeFieldBegin("isDead", ::apache::thrift::protocol::T_BOOL, 10);
	xfer += oprot->writeBool(this->isDead);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("hasFight", ::apache::thrift::protocol::T_BOOL, 20);
	xfer += oprot->writeBool(this->hasFight);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("experience", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32(this->experience);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("enemySet", ::apache::thrift::protocol::T_SET, 40);
	{
		xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->enemySet.size()));
		std::set<int32_t> ::const_iterator _iter85;
		for(_iter85 = this->enemySet.begin(); _iter85 != this->enemySet.end(); ++_iter85)
		{
			xfer += oprot->writeI32((*_iter85));
		}
		xfer += oprot->writeSetEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("fightInfo", ::apache::thrift::protocol::T_STRUCT, 50);
	xfer += this->fightInfo.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(PlanetReport& a, PlanetReport& b)
{
	using ::std::swap;
	swap(a.isDead, b.isDead);
	swap(a.hasFight, b.hasFight);
	swap(a.experience, b.experience);
	swap(a.enemySet, b.enemySet);
	swap(a.fightInfo, b.fightInfo);
	swap(a.__isset, b.__isset);
}

const char* FightReport::ascii_fingerprint = "1AB014877511737B47095628DF9B7D4D";
const uint8_t FightReport::binary_fingerprint[16] = {0x1A, 0xB0, 0x14, 0x87, 0x75, 0x11, 0x73, 0x7B, 0x47, 0x09, 0x56, 0x28, 0xDF, 0x9B, 0x7D, 0x4D};

uint32_t FightReport::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->fleetList.clear();
					uint32_t _size86;
					::apache::thrift::protocol::TType _etype89;
					xfer += iprot->readListBegin(_etype89, _size86);
					this->fleetList.resize(_size86);
					uint32_t _i90;
					for(_i90 = 0; _i90 < _size86; ++_i90)
					{
						xfer += this->fleetList[_i90].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.fleetList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->hasPlanet);
				this->__isset.hasPlanet = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->planet.read(iprot);
				this->__isset.planet = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t FightReport::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("FightReport");

	xfer += oprot->writeFieldBegin("fleetList", ::apache::thrift::protocol::T_LIST, 10);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fleetList.size()));
		std::vector<FleetReport> ::const_iterator _iter91;
		for(_iter91 = this->fleetList.begin(); _iter91 != this->fleetList.end(); ++_iter91)
		{
			xfer += (*_iter91).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("hasPlanet", ::apache::thrift::protocol::T_BOOL, 20);
	xfer += oprot->writeBool(this->hasPlanet);
	xfer += oprot->writeFieldEnd();

	if(this->__isset.planet)
	{
		xfer += oprot->writeFieldBegin("planet", ::apache::thrift::protocol::T_STRUCT, 30);
		xfer += this->planet.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(FightReport& a, FightReport& b)
{
	using ::std::swap;
	swap(a.fleetList, b.fleetList);
	swap(a.hasPlanet, b.hasPlanet);
	swap(a.planet, b.planet);
	swap(a.__isset, b.__isset);
}

const char* Universe::ascii_fingerprint = "6D54B59D0E89C07CA87D04FB0285735D";
const uint8_t Universe::binary_fingerprint[16] = {0x6D, 0x54, 0xB5, 0x9D, 0x0E, 0x89, 0xC0, 0x7C, 0xA8, 0x7D, 0x04, 0xFB, 0x02, 0x85, 0x73, 0x5D};

uint32_t Universe::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_MAP)
			{
				{
					this->playerMap.clear();
					uint32_t _size92;
					::apache::thrift::protocol::TType _ktype93;
					::apache::thrift::protocol::TType _vtype94;
					xfer += iprot->readMapBegin(_ktype93, _vtype94, _size92);
					uint32_t _i96;
					for(_i96 = 0; _i96 < _size92; ++_i96)
					{
						Player_ID _key97;
						xfer += iprot->readI32(_key97);
						Player& _val98 = this->playerMap[_key97];
						xfer += _val98.read(iprot);
					}
					xfer += iprot->readMapEnd();
				}
				this->__isset.playerMap = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 2:
			if(ftype == ::apache::thrift::protocol::T_MAP)
			{
				{
					this->planetMap.clear();
					uint32_t _size99;
					::apache::thrift::protocol::TType _ktype100;
					::apache::thrift::protocol::TType _vtype101;
					xfer += iprot->readMapBegin(_ktype100, _vtype101, _size99);
					uint32_t _i103;
					for(_i103 = 0; _i103 < _size99; ++_i103)
					{
						Coord _key104;
						xfer += _key104.read(iprot);
						Planet& _val105 = this->planetMap[_key104];
						xfer += _val105.read(iprot);
					}
					xfer += iprot->readMapEnd();
				}
				this->__isset.planetMap = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 3:
			if(ftype == ::apache::thrift::protocol::T_MAP)
			{
				{
					this->fleetMap.clear();
					uint32_t _size106;
					::apache::thrift::protocol::TType _ktype107;
					::apache::thrift::protocol::TType _vtype108;
					xfer += iprot->readMapBegin(_ktype107, _vtype108, _size106);
					uint32_t _i110;
					for(_i110 = 0; _i110 < _size106; ++_i110)
					{
						Fleet_ID _key111;
						xfer += iprot->readI64(_key111);
						Fleet& _val112 = this->fleetMap[_key111];
						xfer += _val112.read(iprot);
					}
					xfer += iprot->readMapEnd();
				}
				this->__isset.fleetMap = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 4:
			if(ftype == ::apache::thrift::protocol::T_MAP)
			{
				{
					this->reportMap.clear();
					uint32_t _size113;
					::apache::thrift::protocol::TType _ktype114;
					::apache::thrift::protocol::TType _vtype115;
					xfer += iprot->readMapBegin(_ktype114, _vtype115, _size113);
					uint32_t _i117;
					for(_i117 = 0; _i117 < _size113; ++_i117)
					{
						int32_t _key118;
						xfer += iprot->readI32(_key118);
						FightReport& _val119 = this->reportMap[_key118];
						xfer += _val119.read(iprot);
					}
					xfer += iprot->readMapEnd();
				}
				this->__isset.reportMap = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 5:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->nextPlayerID);
				this->__isset.nextPlayerID = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 6:
			if(ftype == ::apache::thrift::protocol::T_I64)
			{
				xfer += iprot->readI64(this->nextFleetID);
				this->__isset.nextFleetID = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 7:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->time);
				this->__isset.time = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Universe::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Universe");

	xfer += oprot->writeFieldBegin("playerMap", ::apache::thrift::protocol::T_MAP, 1);
	{
		xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->playerMap.size()));
		std::map<Player_ID, Player> ::const_iterator _iter120;
		for(_iter120 = this->playerMap.begin(); _iter120 != this->playerMap.end(); ++_iter120)
		{
			xfer += oprot->writeI32(_iter120->first);
			xfer += _iter120->second.write(oprot);
		}
		xfer += oprot->writeMapEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("planetMap", ::apache::thrift::protocol::T_MAP, 2);
	{
		xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRUCT, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->planetMap.size()));
		std::map<Coord, Planet> ::const_iterator _iter121;
		for(_iter121 = this->planetMap.begin(); _iter121 != this->planetMap.end(); ++_iter121)
		{
			xfer += _iter121->first.write(oprot);
			xfer += _iter121->second.write(oprot);
		}
		xfer += oprot->writeMapEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("fleetMap", ::apache::thrift::protocol::T_MAP, 3);
	{
		xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fleetMap.size()));
		std::map<Fleet_ID, Fleet> ::const_iterator _iter122;
		for(_iter122 = this->fleetMap.begin(); _iter122 != this->fleetMap.end(); ++_iter122)
		{
			xfer += oprot->writeI64(_iter122->first);
			xfer += _iter122->second.write(oprot);
		}
		xfer += oprot->writeMapEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("reportMap", ::apache::thrift::protocol::T_MAP, 4);
	{
		xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->reportMap.size()));
		std::map<int32_t, FightReport> ::const_iterator _iter123;
		for(_iter123 = this->reportMap.begin(); _iter123 != this->reportMap.end(); ++_iter123)
		{
			xfer += oprot->writeI32(_iter123->first);
			xfer += _iter123->second.write(oprot);
		}
		xfer += oprot->writeMapEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("nextPlayerID", ::apache::thrift::protocol::T_I32, 5);
	xfer += oprot->writeI32(this->nextPlayerID);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("nextFleetID", ::apache::thrift::protocol::T_I64, 6);
	xfer += oprot->writeI64(this->nextFleetID);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I32, 7);
	xfer += oprot->writeI32(this->time);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Universe& a, Universe& b)
{
	using ::std::swap;
	swap(a.playerMap, b.playerMap);
	swap(a.planetMap, b.planetMap);
	swap(a.fleetMap, b.fleetMap);
	swap(a.reportMap, b.reportMap);
	swap(a.nextPlayerID, b.nextPlayerID);
	swap(a.nextFleetID, b.nextFleetID);
	swap(a.time, b.time);
	swap(a.__isset, b.__isset);
}

const char* OptionalPlayer::ascii_fingerprint = "301875F38C300BE8859F93153862C87A";
const uint8_t OptionalPlayer::binary_fingerprint[16] = {0x30, 0x18, 0x75, 0xF3, 0x8C, 0x30, 0x0B, 0xE8, 0x85, 0x9F, 0x93, 0x15, 0x38, 0x62, 0xC8, 0x7A};

uint32_t OptionalPlayer::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 1:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->player.read(iprot);
				this->__isset.player = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t OptionalPlayer::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("OptionalPlayer");

	if(this->__isset.player)
	{
		xfer += oprot->writeFieldBegin("player", ::apache::thrift::protocol::T_STRUCT, 1);
		xfer += this->player.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(OptionalPlayer& a, OptionalPlayer& b)
{
	using ::std::swap;
	swap(a.player, b.player);
	swap(a.__isset, b.__isset);
}

const char* TimeInfo::ascii_fingerprint = "9EA78140CD5F29ED0DA93A6F86CC34E1";
const uint8_t TimeInfo::binary_fingerprint[16] = {0x9E, 0xA7, 0x81, 0x40, 0xCD, 0x5F, 0x29, 0xED, 0x0D, 0xA9, 0x3A, 0x6F, 0x86, 0xCC, 0x34, 0xE1};

uint32_t TimeInfo::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_DOUBLE)
			{
				xfer += iprot->readDouble(this->roundDuration);
				this->__isset.roundDuration = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_DOUBLE)
			{
				xfer += iprot->readDouble(this->univTime);
				this->__isset.univTime = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t TimeInfo::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("TimeInfo");

	xfer += oprot->writeFieldBegin("roundDuration", ::apache::thrift::protocol::T_DOUBLE, 10);
	xfer += oprot->writeDouble(this->roundDuration);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("univTime", ::apache::thrift::protocol::T_DOUBLE, 20);
	xfer += oprot->writeDouble(this->univTime);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(TimeInfo& a, TimeInfo& b)
{
	using ::std::swap;
	swap(a.roundDuration, b.roundDuration);
	swap(a.univTime, b.univTime);
	swap(a.__isset, b.__isset);
}

const char* FleetList::ascii_fingerprint = "3AE3833BF5733C62EFD2D4BB4A753F7E";
const uint8_t FleetList::binary_fingerprint[16] = {0x3A, 0xE3, 0x83, 0x3B, 0xF5, 0x73, 0x3C, 0x62, 0xEF, 0xD2, 0xD4, 0xBB, 0x4A, 0x75, 0x3F, 0x7E};

uint32_t FleetList::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->fleetList.clear();
					uint32_t _size124;
					::apache::thrift::protocol::TType _etype127;
					xfer += iprot->readListBegin(_etype127, _size124);
					this->fleetList.resize(_size124);
					uint32_t _i128;
					for(_i128 = 0; _i128 < _size124; ++_i128)
					{
						xfer += this->fleetList[_i128].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.fleetList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->planetList.clear();
					uint32_t _size129;
					::apache::thrift::protocol::TType _etype132;
					xfer += iprot->readListBegin(_etype132, _size129);
					this->planetList.resize(_size129);
					uint32_t _i133;
					for(_i133 = 0; _i133 < _size129; ++_i133)
					{
						xfer += this->planetList[_i133].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.planetList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->fleetCount);
				this->__isset.fleetCount = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t FleetList::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("FleetList");

	xfer += oprot->writeFieldBegin("fleetList", ::apache::thrift::protocol::T_LIST, 10);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fleetList.size()));
		std::vector<Fleet> ::const_iterator _iter134;
		for(_iter134 = this->fleetList.begin(); _iter134 != this->fleetList.end(); ++_iter134)
		{
			xfer += (*_iter134).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("planetList", ::apache::thrift::protocol::T_LIST, 20);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->planetList.size()));
		std::vector<Planet> ::const_iterator _iter135;
		for(_iter135 = this->planetList.begin(); _iter135 != this->planetList.end(); ++_iter135)
		{
			xfer += (*_iter135).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("fleetCount", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32(this->fleetCount);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(FleetList& a, FleetList& b)
{
	using ::std::swap;
	swap(a.fleetList, b.fleetList);
	swap(a.planetList, b.planetList);
	swap(a.fleetCount, b.fleetCount);
	swap(a.__isset, b.__isset);
}

const char* PlanetList::ascii_fingerprint = "BDDD1282588ED992A4A6DEBF58CF7985";
const uint8_t PlanetList::binary_fingerprint[16] = {0xBD, 0xDD, 0x12, 0x82, 0x58, 0x8E, 0xD9, 0x92, 0xA4, 0xA6, 0xDE, 0xBF, 0x58, 0xCF, 0x79, 0x85};

uint32_t PlanetList::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->planetList.clear();
					uint32_t _size136;
					::apache::thrift::protocol::TType _etype139;
					xfer += iprot->readListBegin(_etype139, _size136);
					this->planetList.resize(_size136);
					uint32_t _i140;
					for(_i140 = 0; _i140 < _size136; ++_i140)
					{
						xfer += this->planetList[_i140].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.planetList = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->planetCount);
				this->__isset.planetCount = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t PlanetList::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("PlanetList");

	xfer += oprot->writeFieldBegin("planetList", ::apache::thrift::protocol::T_LIST, 10);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->planetList.size()));
		std::vector<Planet> ::const_iterator _iter141;
		for(_iter141 = this->planetList.begin(); _iter141 != this->planetList.end(); ++_iter141)
		{
			xfer += (*_iter141).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("planetCount", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->planetCount);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(PlanetList& a, PlanetList& b)
{
	using ::std::swap;
	swap(a.planetList, b.planetList);
	swap(a.planetCount, b.planetCount);
	swap(a.__isset, b.__isset);
}

const char* Message::ascii_fingerprint = "5CC9038C07BF78A8A3E0F4D71F63E8A0";
const uint8_t Message::binary_fingerprint[16] = {0x5C, 0xC9, 0x03, 0x8C, 0x07, 0xBF, 0x78, 0xA8, 0xA3, 0xE0, 0xF4, 0xD7, 0x1F, 0x63, 0xE8, 0xA0};

uint32_t Message::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->id);
				this->__isset.id = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->sender);
				this->__isset.sender = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->recipient);
				this->__isset.recipient = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->time);
				this->__isset.time = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 50:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->subject);
				this->__isset.subject = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 60:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->message);
				this->__isset.message = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 70:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->senderLogin);
				this->__isset.senderLogin = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t Message::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("Message");

	xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->id);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("sender", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->sender);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("recipient", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32(this->recipient);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I32, 40);
	xfer += oprot->writeI32(this->time);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("subject", ::apache::thrift::protocol::T_STRING, 50);
	xfer += oprot->writeString(this->subject);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 60);
	xfer += oprot->writeString(this->message);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("senderLogin", ::apache::thrift::protocol::T_STRING, 70);
	xfer += oprot->writeString(this->senderLogin);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(Message& a, Message& b)
{
	using ::std::swap;
	swap(a.id, b.id);
	swap(a.sender, b.sender);
	swap(a.recipient, b.recipient);
	swap(a.time, b.time);
	swap(a.subject, b.subject);
	swap(a.message, b.message);
	swap(a.senderLogin, b.senderLogin);
	swap(a.__isset, b.__isset);
}

const char* FriendshipRequests::ascii_fingerprint = "6FEEBE81F97BC79B5C1335C39ABB11B8";
const uint8_t FriendshipRequests::binary_fingerprint[16] = {0x6F, 0xEE, 0xBE, 0x81, 0xF9, 0x7B, 0xC7, 0x9B, 0x5C, 0x13, 0x35, 0xC3, 0x9A, 0xBB, 0x11, 0xB8};

uint32_t FriendshipRequests::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->sent.clear();
					uint32_t _size142;
					::apache::thrift::protocol::TType _etype145;
					xfer += iprot->readListBegin(_etype145, _size142);
					this->sent.resize(_size142);
					uint32_t _i146;
					for(_i146 = 0; _i146 < _size142; ++_i146)
					{
						xfer += this->sent[_i146].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.sent = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->received.clear();
					uint32_t _size147;
					::apache::thrift::protocol::TType _etype150;
					xfer += iprot->readListBegin(_etype150, _size147);
					this->received.resize(_size147);
					uint32_t _i151;
					for(_i151 = 0; _i151 < _size147; ++_i151)
					{
						xfer += this->received[_i151].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.received = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t FriendshipRequests::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("FriendshipRequests");

	xfer += oprot->writeFieldBegin("sent", ::apache::thrift::protocol::T_LIST, 10);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sent.size()));
		std::vector<Player> ::const_iterator _iter152;
		for(_iter152 = this->sent.begin(); _iter152 != this->sent.end(); ++_iter152)
		{
			xfer += (*_iter152).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("received", ::apache::thrift::protocol::T_LIST, 20);
	{
		xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->received.size()));
		std::vector<Player> ::const_iterator _iter153;
		for(_iter153 = this->received.begin(); _iter153 != this->received.end(); ++_iter153)
		{
			xfer += (*_iter153).write(oprot);
		}
		xfer += oprot->writeListEnd();
	}
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

void swap(FriendshipRequests& a, FriendshipRequests& b)
{
	using ::std::swap;
	swap(a.sent, b.sent);
	swap(a.received, b.received);
	swap(a.__isset, b.__isset);
}

} // namespace
