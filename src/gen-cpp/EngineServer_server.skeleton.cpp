// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "EngineServer.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::ndw;

class EngineServerHandler : virtual public EngineServerIf
{
public:
	EngineServerHandler()
	{
		// Your initialization goes here
	}

	void start()
	{
		// Your implementation goes here
		printf("start\n");
	}

	void stop()
	{
		// Your implementation goes here
		printf("stop\n");
	}

	bool addPlayer(const std::string& login, const std::string& password)
	{
		// Your implementation goes here
		printf("addPlayer\n");
	}

	void getPlayerFleets(std::vector<Fleet>& _return, const Player_ID pid)
	{
		// Your implementation goes here
		printf("getPlayerFleets\n");
	}

	void getPlayerPlanets(std::vector<Planet>& _return, const Player_ID pid)
	{
		// Your implementation goes here
		printf("getPlayerPlanets\n");
	}

	void setPlayerFleetCode(const Player_ID pid, const std::string& code)
	{
		// Your implementation goes here
		printf("setPlayerFleetCode\n");
	}

	void setPlayerPlanetCode(const Player_ID pid, const std::string& code)
	{
		// Your implementation goes here
		printf("setPlayerPlanetCode\n");
	}

	void setPlayerFleetBlocklyCode(const Player_ID pid, const std::string& code)
	{
		// Your implementation goes here
		printf("setPlayerFleetBlocklyCode\n");
	}

	void setPlayerPlanetBlocklyCode(const Player_ID pid, const std::string& code)
	{
		// Your implementation goes here
		printf("setPlayerPlanetBlocklyCode\n");
	}

	void getPlayerFleetCode(CodeData& _return, const Player_ID pid)
	{
		// Your implementation goes here
		printf("getPlayerFleetCode\n");
	}

	void getPlayerPlanetCode(CodeData& _return, const Player_ID pid)
	{
		// Your implementation goes here
		printf("getPlayerPlanetCode\n");
	}

	void getPlayers(std::vector<Player>& _return)
	{
		// Your implementation goes here
		printf("getPlayers\n");
	}

	void getPlayer(Player& _return, const Player_ID pid)
	{
		// Your implementation goes here
		printf("getPlayer\n");
	}

	void getPlanet(Planet& _return, const Coord& coord)
	{
		// Your implementation goes here
		printf("getPlanet\n");
	}

	void getFleet(Fleet& _return, const Fleet_ID fid)
	{
		// Your implementation goes here
		printf("getFleet\n");
	}

	void logPlayer(OptionalPlayer& _return, const std::string& login, const std::string& password)
	{
		// Your implementation goes here
		printf("logPlayer\n");
	}

};

int main(int argc, char** argv)
{
	int port = 9090;
	shared_ptr<EngineServerHandler> handler(new EngineServerHandler());
	shared_ptr<TProcessor> processor(new EngineServerProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	server.serve();
	return 0;
}

