/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "EngineServer.h"

namespace ndw
{

uint32_t EngineServer_start_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_start_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_start_args");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_start_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_start_pargs");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_start_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_start_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_start_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_start_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_stop_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_stop_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_stop_args");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_stop_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_stop_pargs");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_stop_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_stop_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_stop_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_stop_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_addPlayer_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->login);
				this->__isset.login = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->password);
				this->__isset.password = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_addPlayer_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_addPlayer_args");

	xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_STRING, 10);
	xfer += oprot->writeString(this->login);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->password);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_addPlayer_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_addPlayer_pargs");

	xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_STRING, 10);
	xfer += oprot->writeString((*(this->login)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->password)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_addPlayer_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->success);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_addPlayer_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_addPlayer_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 0);
		xfer += oprot->writeBool(this->success);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_addPlayer_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool((*(this->success)));
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerFleets_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->beginIndex);
				this->__isset.beginIndex = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->endIndex);
				this->__isset.endIndex = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				int32_t ecast136;
				xfer += iprot->readI32(ecast136);
				this->sortType = (Sort_Type::type)ecast136;
				this->__isset.sortType = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 50:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->asc);
				this->__isset.asc = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerFleets_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerFleets_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("beginIndex", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->beginIndex);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("endIndex", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32(this->endIndex);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("sortType", ::apache::thrift::protocol::T_I32, 40);
	xfer += oprot->writeI32((int32_t)this->sortType);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("asc", ::apache::thrift::protocol::T_BOOL, 50);
	xfer += oprot->writeBool(this->asc);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerFleets_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerFleets_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("beginIndex", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32((*(this->beginIndex)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("endIndex", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32((*(this->endIndex)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("sortType", ::apache::thrift::protocol::T_I32, 40);
	xfer += oprot->writeI32((int32_t)(*(this->sortType)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("asc", ::apache::thrift::protocol::T_BOOL, 50);
	xfer += oprot->writeBool((*(this->asc)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerFleets_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerFleets_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getPlayerFleets_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerFleets_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerPlanets_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->beginIndex);
				this->__isset.beginIndex = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->endIndex);
				this->__isset.endIndex = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				int32_t ecast137;
				xfer += iprot->readI32(ecast137);
				this->sortType = (Sort_Type::type)ecast137;
				this->__isset.sortType = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 50:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->asc);
				this->__isset.asc = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerPlanets_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerPlanets_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("beginIndex", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->beginIndex);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("endIndex", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32(this->endIndex);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("sortType", ::apache::thrift::protocol::T_I32, 40);
	xfer += oprot->writeI32((int32_t)this->sortType);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("asc", ::apache::thrift::protocol::T_BOOL, 50);
	xfer += oprot->writeBool(this->asc);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerPlanets_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerPlanets_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("beginIndex", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32((*(this->beginIndex)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("endIndex", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32((*(this->endIndex)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("sortType", ::apache::thrift::protocol::T_I32, 40);
	xfer += oprot->writeI32((int32_t)(*(this->sortType)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("asc", ::apache::thrift::protocol::T_BOOL, 50);
	xfer += oprot->writeBool((*(this->asc)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerPlanets_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerPlanets_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getPlayerPlanets_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerPlanets_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerFleetCode_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->code);
				this->__isset.code = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerFleetCode_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerFleetCode_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->code);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerFleetCode_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerFleetCode_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->code)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerFleetCode_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerFleetCode_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_setPlayerFleetCode_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerFleetCode_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerPlanetCode_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->code);
				this->__isset.code = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerPlanetCode_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerPlanetCode_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->code);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerPlanetCode_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerPlanetCode_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->code)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerPlanetCode_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerPlanetCode_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_setPlayerPlanetCode_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerPlanetCode_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerFleetBlocklyCode_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->code);
				this->__isset.code = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerFleetBlocklyCode_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerFleetBlocklyCode_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->code);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerFleetBlocklyCode_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerFleetBlocklyCode_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->code)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerFleetBlocklyCode_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerFleetBlocklyCode_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_setPlayerFleetBlocklyCode_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerFleetBlocklyCode_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerPlanetBlocklyCode_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->code);
				this->__isset.code = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerPlanetBlocklyCode_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerPlanetBlocklyCode_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->code);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerPlanetBlocklyCode_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerPlanetBlocklyCode_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->code)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerPlanetBlocklyCode_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerPlanetBlocklyCode_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_setPlayerPlanetBlocklyCode_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerPlanetBlocklyCode_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerFleetCode_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerFleetCode_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerFleetCode_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerFleetCode_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerFleetCode_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerFleetCode_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerFleetCode_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getPlayerFleetCode_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerFleetCode_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerPlanetCode_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerPlanetCode_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerPlanetCode_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerPlanetCode_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerPlanetCode_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerPlanetCode_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerPlanetCode_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getPlayerPlanetCode_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerPlanetCode_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayers_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayers_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayers_args");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayers_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayers_pargs");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayers_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->success.clear();
					uint32_t _size138;
					::apache::thrift::protocol::TType _etype141;
					xfer += iprot->readListBegin(_etype141, _size138);
					this->success.resize(_size138);
					uint32_t _i142;
					for(_i142 = 0; _i142 < _size138; ++_i142)
					{
						xfer += this->success[_i142].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayers_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getPlayers_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
		{
			xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
			std::vector<Player> ::const_iterator _iter143;
			for(_iter143 = this->success.begin(); _iter143 != this->success.end(); ++_iter143)
			{
				xfer += (*_iter143).write(oprot);
			}
			xfer += oprot->writeListEnd();
		}
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayers_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					(*(this->success)).clear();
					uint32_t _size144;
					::apache::thrift::protocol::TType _etype147;
					xfer += iprot->readListBegin(_etype147, _size144);
					(*(this->success)).resize(_size144);
					uint32_t _i148;
					for(_i148 = 0; _i148 < _size144; ++_i148)
					{
						xfer += (*(this->success))[_i148].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayer_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayer_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayer_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayer_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayer_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayer_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayer_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getPlayer_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayer_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlanet_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->coord.read(iprot);
				this->__isset.coord = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlanet_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlanet_args");

	xfer += oprot->writeFieldBegin("coord", ::apache::thrift::protocol::T_STRUCT, 10);
	xfer += this->coord.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlanet_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlanet_pargs");

	xfer += oprot->writeFieldBegin("coord", ::apache::thrift::protocol::T_STRUCT, 10);
	xfer += (*(this->coord)).write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlanet_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->success.clear();
					uint32_t _size149;
					::apache::thrift::protocol::TType _etype152;
					xfer += iprot->readListBegin(_etype152, _size149);
					this->success.resize(_size149);
					uint32_t _i153;
					for(_i153 = 0; _i153 < _size149; ++_i153)
					{
						xfer += this->success[_i153].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlanet_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getPlanet_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
		{
			xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
			std::vector<Planet> ::const_iterator _iter154;
			for(_iter154 = this->success.begin(); _iter154 != this->success.end(); ++_iter154)
			{
				xfer += (*_iter154).write(oprot);
			}
			xfer += oprot->writeListEnd();
		}
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlanet_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					(*(this->success)).clear();
					uint32_t _size155;
					::apache::thrift::protocol::TType _etype158;
					xfer += iprot->readListBegin(_etype158, _size155);
					(*(this->success)).resize(_size155);
					uint32_t _i159;
					for(_i159 = 0; _i159 < _size155; ++_i159)
					{
						xfer += (*(this->success))[_i159].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFleet_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I64)
			{
				xfer += iprot->readI64(this->fid);
				this->__isset.fid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFleet_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getFleet_args");

	xfer += oprot->writeFieldBegin("fid", ::apache::thrift::protocol::T_I64, 10);
	xfer += oprot->writeI64(this->fid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFleet_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getFleet_pargs");

	xfer += oprot->writeFieldBegin("fid", ::apache::thrift::protocol::T_I64, 10);
	xfer += oprot->writeI64((*(this->fid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFleet_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFleet_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getFleet_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFleet_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_logPlayer_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->login);
				this->__isset.login = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->password);
				this->__isset.password = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_logPlayer_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_logPlayer_args");

	xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_STRING, 10);
	xfer += oprot->writeString(this->login);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->password);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_logPlayer_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_logPlayer_pargs");

	xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_STRING, 10);
	xfer += oprot->writeString((*(this->login)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->password)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_logPlayer_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_logPlayer_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_logPlayer_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_logPlayer_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_incrementTutoDisplayed_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->tutoName);
				this->__isset.tutoName = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_incrementTutoDisplayed_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_incrementTutoDisplayed_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("tutoName", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->tutoName);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_incrementTutoDisplayed_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_incrementTutoDisplayed_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("tutoName", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->tutoName)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_incrementTutoDisplayed_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_incrementTutoDisplayed_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_incrementTutoDisplayed_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_incrementTutoDisplayed_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFightReport_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->id);
				this->__isset.id = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFightReport_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getFightReport_args");

	xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->id);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFightReport_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getFightReport_pargs");

	xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->id)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFightReport_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFightReport_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getFightReport_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFightReport_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getTimeInfo_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getTimeInfo_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getTimeInfo_args");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getTimeInfo_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getTimeInfo_pargs");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getTimeInfo_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getTimeInfo_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getTimeInfo_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getTimeInfo_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_eraseAccount_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->password);
				this->__isset.password = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_eraseAccount_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_eraseAccount_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->password);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_eraseAccount_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_eraseAccount_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->password)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_eraseAccount_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->success);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_eraseAccount_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_eraseAccount_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 0);
		xfer += oprot->writeBool(this->success);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_eraseAccount_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool((*(this->success)));
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getBuildingsInfo_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getBuildingsInfo_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getBuildingsInfo_args");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getBuildingsInfo_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getBuildingsInfo_pargs");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getBuildingsInfo_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->success.clear();
					uint32_t _size160;
					::apache::thrift::protocol::TType _etype163;
					xfer += iprot->readListBegin(_etype163, _size160);
					this->success.resize(_size160);
					uint32_t _i164;
					for(_i164 = 0; _i164 < _size160; ++_i164)
					{
						xfer += this->success[_i164].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getBuildingsInfo_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getBuildingsInfo_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
		{
			xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
			std::vector<Building> ::const_iterator _iter165;
			for(_iter165 = this->success.begin(); _iter165 != this->success.end(); ++_iter165)
			{
				xfer += (*_iter165).write(oprot);
			}
			xfer += oprot->writeListEnd();
		}
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getBuildingsInfo_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					(*(this->success)).clear();
					uint32_t _size166;
					::apache::thrift::protocol::TType _etype169;
					xfer += iprot->readListBegin(_etype169, _size166);
					(*(this->success)).resize(_size166);
					uint32_t _i170;
					for(_i170 = 0; _i170 < _size166; ++_i170)
					{
						xfer += (*(this->success))[_i170].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getCannonsInfo_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getCannonsInfo_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getCannonsInfo_args");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getCannonsInfo_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getCannonsInfo_pargs");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getCannonsInfo_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->success.clear();
					uint32_t _size171;
					::apache::thrift::protocol::TType _etype174;
					xfer += iprot->readListBegin(_etype174, _size171);
					this->success.resize(_size171);
					uint32_t _i175;
					for(_i175 = 0; _i175 < _size171; ++_i175)
					{
						xfer += this->success[_i175].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getCannonsInfo_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getCannonsInfo_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
		{
			xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
			std::vector<Cannon> ::const_iterator _iter176;
			for(_iter176 = this->success.begin(); _iter176 != this->success.end(); ++_iter176)
			{
				xfer += (*_iter176).write(oprot);
			}
			xfer += oprot->writeListEnd();
		}
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getCannonsInfo_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					(*(this->success)).clear();
					uint32_t _size177;
					::apache::thrift::protocol::TType _etype180;
					xfer += iprot->readListBegin(_etype180, _size177);
					(*(this->success)).resize(_size177);
					uint32_t _i181;
					for(_i181 = 0; _i181 < _size177; ++_i181)
					{
						xfer += (*(this->success))[_i181].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getShipsInfo_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getShipsInfo_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getShipsInfo_args");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getShipsInfo_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getShipsInfo_pargs");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getShipsInfo_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->success.clear();
					uint32_t _size182;
					::apache::thrift::protocol::TType _etype185;
					xfer += iprot->readListBegin(_etype185, _size182);
					this->success.resize(_size182);
					uint32_t _i186;
					for(_i186 = 0; _i186 < _size182; ++_i186)
					{
						xfer += this->success[_i186].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getShipsInfo_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getShipsInfo_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
		{
			xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
			std::vector<Ship> ::const_iterator _iter187;
			for(_iter187 = this->success.begin(); _iter187 != this->success.end(); ++_iter187)
			{
				xfer += (*_iter187).write(oprot);
			}
			xfer += oprot->writeListEnd();
		}
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getShipsInfo_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					(*(this->success)).clear();
					uint32_t _size188;
					::apache::thrift::protocol::TType _etype191;
					xfer += iprot->readListBegin(_etype191, _size188);
					(*(this->success)).resize(_size188);
					uint32_t _i192;
					for(_i192 = 0; _i192 < _size188; ++_i192)
					{
						xfer += (*(this->success))[_i192].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

void EngineServerClient::start()
{
	send_start();
	recv_start();
}

void EngineServerClient::send_start()
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("start", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_start_pargs args;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_start()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("start") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_start_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::stop()
{
	send_stop();
	recv_stop();
}

void EngineServerClient::send_stop()
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("stop", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_stop_pargs args;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_stop()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("stop") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_stop_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

bool EngineServerClient::addPlayer(const std::string& login, const std::string& password)
{
	send_addPlayer(login, password);
	return recv_addPlayer();
}

void EngineServerClient::send_addPlayer(const std::string& login, const std::string& password)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("addPlayer", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_addPlayer_pargs args;
	args.login = &login;
	args.password = &password;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

bool EngineServerClient::recv_addPlayer()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("addPlayer") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	bool _return;
	EngineServer_addPlayer_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		return _return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "addPlayer failed: unknown result");
}

void EngineServerClient::getPlayerFleets(FleetList& _return, const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc)
{
	send_getPlayerFleets(pid, beginIndex, endIndex, sortType, asc);
	recv_getPlayerFleets(_return);
}

void EngineServerClient::send_getPlayerFleets(const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getPlayerFleets", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getPlayerFleets_pargs args;
	args.pid = &pid;
	args.beginIndex = &beginIndex;
	args.endIndex = &endIndex;
	args.sortType = &sortType;
	args.asc = &asc;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getPlayerFleets(FleetList& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getPlayerFleets") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getPlayerFleets_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPlayerFleets failed: unknown result");
}

void EngineServerClient::getPlayerPlanets(PlanetList& _return, const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc)
{
	send_getPlayerPlanets(pid, beginIndex, endIndex, sortType, asc);
	recv_getPlayerPlanets(_return);
}

void EngineServerClient::send_getPlayerPlanets(const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getPlayerPlanets", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getPlayerPlanets_pargs args;
	args.pid = &pid;
	args.beginIndex = &beginIndex;
	args.endIndex = &endIndex;
	args.sortType = &sortType;
	args.asc = &asc;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getPlayerPlanets(PlanetList& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getPlayerPlanets") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getPlayerPlanets_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPlayerPlanets failed: unknown result");
}

void EngineServerClient::setPlayerFleetCode(const Player_ID pid, const std::string& code)
{
	send_setPlayerFleetCode(pid, code);
	recv_setPlayerFleetCode();
}

void EngineServerClient::send_setPlayerFleetCode(const Player_ID pid, const std::string& code)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("setPlayerFleetCode", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_setPlayerFleetCode_pargs args;
	args.pid = &pid;
	args.code = &code;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_setPlayerFleetCode()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("setPlayerFleetCode") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_setPlayerFleetCode_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::setPlayerPlanetCode(const Player_ID pid, const std::string& code)
{
	send_setPlayerPlanetCode(pid, code);
	recv_setPlayerPlanetCode();
}

void EngineServerClient::send_setPlayerPlanetCode(const Player_ID pid, const std::string& code)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("setPlayerPlanetCode", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_setPlayerPlanetCode_pargs args;
	args.pid = &pid;
	args.code = &code;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_setPlayerPlanetCode()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("setPlayerPlanetCode") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_setPlayerPlanetCode_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::setPlayerFleetBlocklyCode(const Player_ID pid, const std::string& code)
{
	send_setPlayerFleetBlocklyCode(pid, code);
	recv_setPlayerFleetBlocklyCode();
}

void EngineServerClient::send_setPlayerFleetBlocklyCode(const Player_ID pid, const std::string& code)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("setPlayerFleetBlocklyCode", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_setPlayerFleetBlocklyCode_pargs args;
	args.pid = &pid;
	args.code = &code;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_setPlayerFleetBlocklyCode()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("setPlayerFleetBlocklyCode") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_setPlayerFleetBlocklyCode_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::setPlayerPlanetBlocklyCode(const Player_ID pid, const std::string& code)
{
	send_setPlayerPlanetBlocklyCode(pid, code);
	recv_setPlayerPlanetBlocklyCode();
}

void EngineServerClient::send_setPlayerPlanetBlocklyCode(const Player_ID pid, const std::string& code)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("setPlayerPlanetBlocklyCode", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_setPlayerPlanetBlocklyCode_pargs args;
	args.pid = &pid;
	args.code = &code;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_setPlayerPlanetBlocklyCode()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("setPlayerPlanetBlocklyCode") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_setPlayerPlanetBlocklyCode_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::getPlayerFleetCode(CodeData& _return, const Player_ID pid)
{
	send_getPlayerFleetCode(pid);
	recv_getPlayerFleetCode(_return);
}

void EngineServerClient::send_getPlayerFleetCode(const Player_ID pid)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getPlayerFleetCode", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getPlayerFleetCode_pargs args;
	args.pid = &pid;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getPlayerFleetCode(CodeData& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getPlayerFleetCode") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getPlayerFleetCode_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPlayerFleetCode failed: unknown result");
}

void EngineServerClient::getPlayerPlanetCode(CodeData& _return, const Player_ID pid)
{
	send_getPlayerPlanetCode(pid);
	recv_getPlayerPlanetCode(_return);
}

void EngineServerClient::send_getPlayerPlanetCode(const Player_ID pid)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getPlayerPlanetCode", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getPlayerPlanetCode_pargs args;
	args.pid = &pid;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getPlayerPlanetCode(CodeData& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getPlayerPlanetCode") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getPlayerPlanetCode_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPlayerPlanetCode failed: unknown result");
}

void EngineServerClient::getPlayers(std::vector<Player>& _return)
{
	send_getPlayers();
	recv_getPlayers(_return);
}

void EngineServerClient::send_getPlayers()
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getPlayers", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getPlayers_pargs args;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getPlayers(std::vector<Player>& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getPlayers") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getPlayers_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPlayers failed: unknown result");
}

void EngineServerClient::getPlayer(Player& _return, const Player_ID pid)
{
	send_getPlayer(pid);
	recv_getPlayer(_return);
}

void EngineServerClient::send_getPlayer(const Player_ID pid)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getPlayer", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getPlayer_pargs args;
	args.pid = &pid;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getPlayer(Player& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getPlayer") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getPlayer_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPlayer failed: unknown result");
}

void EngineServerClient::getPlanet(std::vector<Planet>& _return, const Coord& coord)
{
	send_getPlanet(coord);
	recv_getPlanet(_return);
}

void EngineServerClient::send_getPlanet(const Coord& coord)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getPlanet", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getPlanet_pargs args;
	args.coord = &coord;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getPlanet(std::vector<Planet>& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getPlanet") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getPlanet_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPlanet failed: unknown result");
}

void EngineServerClient::getFleet(Fleet& _return, const Fleet_ID fid)
{
	send_getFleet(fid);
	recv_getFleet(_return);
}

void EngineServerClient::send_getFleet(const Fleet_ID fid)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getFleet", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getFleet_pargs args;
	args.fid = &fid;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getFleet(Fleet& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getFleet") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getFleet_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getFleet failed: unknown result");
}

void EngineServerClient::logPlayer(OptionalPlayer& _return, const std::string& login, const std::string& password)
{
	send_logPlayer(login, password);
	recv_logPlayer(_return);
}

void EngineServerClient::send_logPlayer(const std::string& login, const std::string& password)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("logPlayer", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_logPlayer_pargs args;
	args.login = &login;
	args.password = &password;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_logPlayer(OptionalPlayer& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("logPlayer") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_logPlayer_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "logPlayer failed: unknown result");
}

void EngineServerClient::incrementTutoDisplayed(const Player_ID pid, const std::string& tutoName)
{
	send_incrementTutoDisplayed(pid, tutoName);
	recv_incrementTutoDisplayed();
}

void EngineServerClient::send_incrementTutoDisplayed(const Player_ID pid, const std::string& tutoName)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("incrementTutoDisplayed", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_incrementTutoDisplayed_pargs args;
	args.pid = &pid;
	args.tutoName = &tutoName;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_incrementTutoDisplayed()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("incrementTutoDisplayed") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_incrementTutoDisplayed_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::getFightReport(FightReport& _return, const int32_t id)
{
	send_getFightReport(id);
	recv_getFightReport(_return);
}

void EngineServerClient::send_getFightReport(const int32_t id)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getFightReport", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getFightReport_pargs args;
	args.id = &id;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getFightReport(FightReport& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getFightReport") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getFightReport_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getFightReport failed: unknown result");
}

void EngineServerClient::getTimeInfo(TimeInfo& _return)
{
	send_getTimeInfo();
	recv_getTimeInfo(_return);
}

void EngineServerClient::send_getTimeInfo()
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getTimeInfo", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getTimeInfo_pargs args;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getTimeInfo(TimeInfo& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getTimeInfo") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getTimeInfo_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getTimeInfo failed: unknown result");
}

bool EngineServerClient::eraseAccount(const int32_t pid, const std::string& password)
{
	send_eraseAccount(pid, password);
	return recv_eraseAccount();
}

void EngineServerClient::send_eraseAccount(const int32_t pid, const std::string& password)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("eraseAccount", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_eraseAccount_pargs args;
	args.pid = &pid;
	args.password = &password;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

bool EngineServerClient::recv_eraseAccount()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("eraseAccount") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	bool _return;
	EngineServer_eraseAccount_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		return _return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eraseAccount failed: unknown result");
}

void EngineServerClient::getBuildingsInfo(std::vector<Building>& _return)
{
	send_getBuildingsInfo();
	recv_getBuildingsInfo(_return);
}

void EngineServerClient::send_getBuildingsInfo()
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getBuildingsInfo", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getBuildingsInfo_pargs args;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getBuildingsInfo(std::vector<Building>& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getBuildingsInfo") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getBuildingsInfo_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getBuildingsInfo failed: unknown result");
}

void EngineServerClient::getCannonsInfo(std::vector<Cannon>& _return)
{
	send_getCannonsInfo();
	recv_getCannonsInfo(_return);
}

void EngineServerClient::send_getCannonsInfo()
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getCannonsInfo", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getCannonsInfo_pargs args;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getCannonsInfo(std::vector<Cannon>& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getCannonsInfo") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getCannonsInfo_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getCannonsInfo failed: unknown result");
}

void EngineServerClient::getShipsInfo(std::vector<Ship>& _return)
{
	send_getShipsInfo();
	recv_getShipsInfo(_return);
}

void EngineServerClient::send_getShipsInfo()
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getShipsInfo", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getShipsInfo_pargs args;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getShipsInfo(std::vector<Ship>& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getShipsInfo") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getShipsInfo_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getShipsInfo failed: unknown result");
}

bool EngineServerProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext)
{
	ProcessMap::iterator pfn;
	pfn = processMap_.find(fname);
	if(pfn == processMap_.end())
	{
		iprot->skip(::apache::thrift::protocol::T_STRUCT);
		iprot->readMessageEnd();
		iprot->getTransport()->readEnd();
		::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '" + fname + "'");
		oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return true;
	}
	(this->*(pfn->second))(seqid, iprot, oprot, callContext);
	return true;
}

void EngineServerProcessor::process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.start", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.start");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.start");
	}

	EngineServer_start_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.start", bytes);
	}

	EngineServer_start_result result;
	try
	{
		iface_->start();
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.start");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("start", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.start");
	}

	oprot->writeMessageBegin("start", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.start", bytes);
	}
}

void EngineServerProcessor::process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.stop", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.stop");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.stop");
	}

	EngineServer_stop_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.stop", bytes);
	}

	EngineServer_stop_result result;
	try
	{
		iface_->stop();
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.stop");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("stop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.stop");
	}

	oprot->writeMessageBegin("stop", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.stop", bytes);
	}
}

void EngineServerProcessor::process_addPlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.addPlayer", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.addPlayer");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.addPlayer");
	}

	EngineServer_addPlayer_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.addPlayer", bytes);
	}

	EngineServer_addPlayer_result result;
	try
	{
		result.success = iface_->addPlayer(args.login, args.password);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.addPlayer");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("addPlayer", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.addPlayer");
	}

	oprot->writeMessageBegin("addPlayer", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.addPlayer", bytes);
	}
}

void EngineServerProcessor::process_getPlayerFleets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getPlayerFleets", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getPlayerFleets");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getPlayerFleets");
	}

	EngineServer_getPlayerFleets_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getPlayerFleets", bytes);
	}

	EngineServer_getPlayerFleets_result result;
	try
	{
		iface_->getPlayerFleets(result.success, args.pid, args.beginIndex, args.endIndex, args.sortType, args.asc);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getPlayerFleets");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getPlayerFleets", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getPlayerFleets");
	}

	oprot->writeMessageBegin("getPlayerFleets", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getPlayerFleets", bytes);
	}
}

void EngineServerProcessor::process_getPlayerPlanets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getPlayerPlanets", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getPlayerPlanets");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getPlayerPlanets");
	}

	EngineServer_getPlayerPlanets_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getPlayerPlanets", bytes);
	}

	EngineServer_getPlayerPlanets_result result;
	try
	{
		iface_->getPlayerPlanets(result.success, args.pid, args.beginIndex, args.endIndex, args.sortType, args.asc);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getPlayerPlanets");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getPlayerPlanets", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getPlayerPlanets");
	}

	oprot->writeMessageBegin("getPlayerPlanets", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getPlayerPlanets", bytes);
	}
}

void EngineServerProcessor::process_setPlayerFleetCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.setPlayerFleetCode", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.setPlayerFleetCode");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.setPlayerFleetCode");
	}

	EngineServer_setPlayerFleetCode_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.setPlayerFleetCode", bytes);
	}

	EngineServer_setPlayerFleetCode_result result;
	try
	{
		iface_->setPlayerFleetCode(args.pid, args.code);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.setPlayerFleetCode");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("setPlayerFleetCode", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.setPlayerFleetCode");
	}

	oprot->writeMessageBegin("setPlayerFleetCode", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.setPlayerFleetCode", bytes);
	}
}

void EngineServerProcessor::process_setPlayerPlanetCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.setPlayerPlanetCode", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.setPlayerPlanetCode");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.setPlayerPlanetCode");
	}

	EngineServer_setPlayerPlanetCode_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.setPlayerPlanetCode", bytes);
	}

	EngineServer_setPlayerPlanetCode_result result;
	try
	{
		iface_->setPlayerPlanetCode(args.pid, args.code);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.setPlayerPlanetCode");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("setPlayerPlanetCode", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.setPlayerPlanetCode");
	}

	oprot->writeMessageBegin("setPlayerPlanetCode", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.setPlayerPlanetCode", bytes);
	}
}

void EngineServerProcessor::process_setPlayerFleetBlocklyCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.setPlayerFleetBlocklyCode", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.setPlayerFleetBlocklyCode");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.setPlayerFleetBlocklyCode");
	}

	EngineServer_setPlayerFleetBlocklyCode_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.setPlayerFleetBlocklyCode", bytes);
	}

	EngineServer_setPlayerFleetBlocklyCode_result result;
	try
	{
		iface_->setPlayerFleetBlocklyCode(args.pid, args.code);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.setPlayerFleetBlocklyCode");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("setPlayerFleetBlocklyCode", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.setPlayerFleetBlocklyCode");
	}

	oprot->writeMessageBegin("setPlayerFleetBlocklyCode", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.setPlayerFleetBlocklyCode", bytes);
	}
}

void EngineServerProcessor::process_setPlayerPlanetBlocklyCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.setPlayerPlanetBlocklyCode", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.setPlayerPlanetBlocklyCode");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.setPlayerPlanetBlocklyCode");
	}

	EngineServer_setPlayerPlanetBlocklyCode_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.setPlayerPlanetBlocklyCode", bytes);
	}

	EngineServer_setPlayerPlanetBlocklyCode_result result;
	try
	{
		iface_->setPlayerPlanetBlocklyCode(args.pid, args.code);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.setPlayerPlanetBlocklyCode");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("setPlayerPlanetBlocklyCode", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.setPlayerPlanetBlocklyCode");
	}

	oprot->writeMessageBegin("setPlayerPlanetBlocklyCode", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.setPlayerPlanetBlocklyCode", bytes);
	}
}

void EngineServerProcessor::process_getPlayerFleetCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getPlayerFleetCode", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getPlayerFleetCode");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getPlayerFleetCode");
	}

	EngineServer_getPlayerFleetCode_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getPlayerFleetCode", bytes);
	}

	EngineServer_getPlayerFleetCode_result result;
	try
	{
		iface_->getPlayerFleetCode(result.success, args.pid);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getPlayerFleetCode");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getPlayerFleetCode", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getPlayerFleetCode");
	}

	oprot->writeMessageBegin("getPlayerFleetCode", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getPlayerFleetCode", bytes);
	}
}

void EngineServerProcessor::process_getPlayerPlanetCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getPlayerPlanetCode", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getPlayerPlanetCode");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getPlayerPlanetCode");
	}

	EngineServer_getPlayerPlanetCode_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getPlayerPlanetCode", bytes);
	}

	EngineServer_getPlayerPlanetCode_result result;
	try
	{
		iface_->getPlayerPlanetCode(result.success, args.pid);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getPlayerPlanetCode");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getPlayerPlanetCode", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getPlayerPlanetCode");
	}

	oprot->writeMessageBegin("getPlayerPlanetCode", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getPlayerPlanetCode", bytes);
	}
}

void EngineServerProcessor::process_getPlayers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getPlayers", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getPlayers");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getPlayers");
	}

	EngineServer_getPlayers_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getPlayers", bytes);
	}

	EngineServer_getPlayers_result result;
	try
	{
		iface_->getPlayers(result.success);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getPlayers");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getPlayers", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getPlayers");
	}

	oprot->writeMessageBegin("getPlayers", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getPlayers", bytes);
	}
}

void EngineServerProcessor::process_getPlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getPlayer", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getPlayer");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getPlayer");
	}

	EngineServer_getPlayer_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getPlayer", bytes);
	}

	EngineServer_getPlayer_result result;
	try
	{
		iface_->getPlayer(result.success, args.pid);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getPlayer");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getPlayer", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getPlayer");
	}

	oprot->writeMessageBegin("getPlayer", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getPlayer", bytes);
	}
}

void EngineServerProcessor::process_getPlanet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getPlanet", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getPlanet");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getPlanet");
	}

	EngineServer_getPlanet_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getPlanet", bytes);
	}

	EngineServer_getPlanet_result result;
	try
	{
		iface_->getPlanet(result.success, args.coord);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getPlanet");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getPlanet", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getPlanet");
	}

	oprot->writeMessageBegin("getPlanet", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getPlanet", bytes);
	}
}

void EngineServerProcessor::process_getFleet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getFleet", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getFleet");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getFleet");
	}

	EngineServer_getFleet_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getFleet", bytes);
	}

	EngineServer_getFleet_result result;
	try
	{
		iface_->getFleet(result.success, args.fid);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getFleet");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getFleet", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getFleet");
	}

	oprot->writeMessageBegin("getFleet", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getFleet", bytes);
	}
}

void EngineServerProcessor::process_logPlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.logPlayer", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.logPlayer");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.logPlayer");
	}

	EngineServer_logPlayer_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.logPlayer", bytes);
	}

	EngineServer_logPlayer_result result;
	try
	{
		iface_->logPlayer(result.success, args.login, args.password);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.logPlayer");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("logPlayer", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.logPlayer");
	}

	oprot->writeMessageBegin("logPlayer", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.logPlayer", bytes);
	}
}

void EngineServerProcessor::process_incrementTutoDisplayed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.incrementTutoDisplayed", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.incrementTutoDisplayed");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.incrementTutoDisplayed");
	}

	EngineServer_incrementTutoDisplayed_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.incrementTutoDisplayed", bytes);
	}

	EngineServer_incrementTutoDisplayed_result result;
	try
	{
		iface_->incrementTutoDisplayed(args.pid, args.tutoName);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.incrementTutoDisplayed");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("incrementTutoDisplayed", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.incrementTutoDisplayed");
	}

	oprot->writeMessageBegin("incrementTutoDisplayed", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.incrementTutoDisplayed", bytes);
	}
}

void EngineServerProcessor::process_getFightReport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getFightReport", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getFightReport");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getFightReport");
	}

	EngineServer_getFightReport_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getFightReport", bytes);
	}

	EngineServer_getFightReport_result result;
	try
	{
		iface_->getFightReport(result.success, args.id);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getFightReport");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getFightReport", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getFightReport");
	}

	oprot->writeMessageBegin("getFightReport", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getFightReport", bytes);
	}
}

void EngineServerProcessor::process_getTimeInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getTimeInfo", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getTimeInfo");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getTimeInfo");
	}

	EngineServer_getTimeInfo_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getTimeInfo", bytes);
	}

	EngineServer_getTimeInfo_result result;
	try
	{
		iface_->getTimeInfo(result.success);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getTimeInfo");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getTimeInfo", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getTimeInfo");
	}

	oprot->writeMessageBegin("getTimeInfo", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getTimeInfo", bytes);
	}
}

void EngineServerProcessor::process_eraseAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.eraseAccount", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.eraseAccount");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.eraseAccount");
	}

	EngineServer_eraseAccount_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.eraseAccount", bytes);
	}

	EngineServer_eraseAccount_result result;
	try
	{
		result.success = iface_->eraseAccount(args.pid, args.password);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.eraseAccount");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("eraseAccount", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.eraseAccount");
	}

	oprot->writeMessageBegin("eraseAccount", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.eraseAccount", bytes);
	}
}

void EngineServerProcessor::process_getBuildingsInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getBuildingsInfo", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getBuildingsInfo");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getBuildingsInfo");
	}

	EngineServer_getBuildingsInfo_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getBuildingsInfo", bytes);
	}

	EngineServer_getBuildingsInfo_result result;
	try
	{
		iface_->getBuildingsInfo(result.success);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getBuildingsInfo");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getBuildingsInfo", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getBuildingsInfo");
	}

	oprot->writeMessageBegin("getBuildingsInfo", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getBuildingsInfo", bytes);
	}
}

void EngineServerProcessor::process_getCannonsInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getCannonsInfo", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getCannonsInfo");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getCannonsInfo");
	}

	EngineServer_getCannonsInfo_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getCannonsInfo", bytes);
	}

	EngineServer_getCannonsInfo_result result;
	try
	{
		iface_->getCannonsInfo(result.success);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getCannonsInfo");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getCannonsInfo", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getCannonsInfo");
	}

	oprot->writeMessageBegin("getCannonsInfo", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getCannonsInfo", bytes);
	}
}

void EngineServerProcessor::process_getShipsInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getShipsInfo", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getShipsInfo");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getShipsInfo");
	}

	EngineServer_getShipsInfo_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getShipsInfo", bytes);
	}

	EngineServer_getShipsInfo_result result;
	try
	{
		iface_->getShipsInfo(result.success);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getShipsInfo");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getShipsInfo", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getShipsInfo");
	}

	oprot->writeMessageBegin("getShipsInfo", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getShipsInfo", bytes);
	}
}

::boost::shared_ptr< ::apache::thrift::TProcessor > EngineServerProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo)
{
	::apache::thrift::ReleaseHandler< EngineServerIfFactory > cleanup(handlerFactory_);
	::boost::shared_ptr< EngineServerIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
	::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new EngineServerProcessor(handler));
	return processor;
}
} // namespace

