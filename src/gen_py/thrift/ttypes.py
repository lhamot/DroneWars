#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Event_Type:
  FleetCodeError = 0
  FleetCodeExecError = 1
  PlanetCodeError = 2
  PlanetCodeExecError = 3
  Upgraded = 4
  ShipMade = 5
  PlanetHarvested = 6
  FleetWin = 7
  FleetDraw = 8
  FleetsGather = 9
  PlanetColonized = 10
  FleetLose = 11
  FleetDrop = 12
  PlanetLose = 13
  PlanetWin = 14
  CannonMade = 15
  Count = 16

  _VALUES_TO_NAMES = {
    0: "FleetCodeError",
    1: "FleetCodeExecError",
    2: "PlanetCodeError",
    3: "PlanetCodeExecError",
    4: "Upgraded",
    5: "ShipMade",
    6: "PlanetHarvested",
    7: "FleetWin",
    8: "FleetDraw",
    9: "FleetsGather",
    10: "PlanetColonized",
    11: "FleetLose",
    12: "FleetDrop",
    13: "PlanetLose",
    14: "PlanetWin",
    15: "CannonMade",
    16: "Count",
  }

  _NAMES_TO_VALUES = {
    "FleetCodeError": 0,
    "FleetCodeExecError": 1,
    "PlanetCodeError": 2,
    "PlanetCodeExecError": 3,
    "Upgraded": 4,
    "ShipMade": 5,
    "PlanetHarvested": 6,
    "FleetWin": 7,
    "FleetDraw": 8,
    "FleetsGather": 9,
    "PlanetColonized": 10,
    "FleetLose": 11,
    "FleetDrop": 12,
    "PlanetLose": 13,
    "PlanetWin": 14,
    "CannonMade": 15,
    "Count": 16,
  }

class Ressource:
  Metal = 0
  Carbon = 1
  Loicium = 2
  Count = 3

  _VALUES_TO_NAMES = {
    0: "Metal",
    1: "Carbon",
    2: "Loicium",
    3: "Count",
  }

  _NAMES_TO_VALUES = {
    "Metal": 0,
    "Carbon": 1,
    "Loicium": 2,
    "Count": 3,
  }

class PlanetTask_Enum:
  UpgradeBuilding = 0
  MakeShip = 1
  MakeCannon = 2
  Count = 3

  _VALUES_TO_NAMES = {
    0: "UpgradeBuilding",
    1: "MakeShip",
    2: "MakeCannon",
    3: "Count",
  }

  _NAMES_TO_VALUES = {
    "UpgradeBuilding": 0,
    "MakeShip": 1,
    "MakeCannon": 2,
    "Count": 3,
  }

class Building_Enum:
  CommandCenter = 0
  MetalMine = 1
  CarbonMine = 2
  LoiciumFilter = 3
  Factory = 4
  Laboratory = 5
  CarbonicCentral = 6
  SolarCentral = 7
  GeothermicCentral = 8
  Count = 9

  _VALUES_TO_NAMES = {
    0: "CommandCenter",
    1: "MetalMine",
    2: "CarbonMine",
    3: "LoiciumFilter",
    4: "Factory",
    5: "Laboratory",
    6: "CarbonicCentral",
    7: "SolarCentral",
    8: "GeothermicCentral",
    9: "Count",
  }

  _NAMES_TO_VALUES = {
    "CommandCenter": 0,
    "MetalMine": 1,
    "CarbonMine": 2,
    "LoiciumFilter": 3,
    "Factory": 4,
    "Laboratory": 5,
    "CarbonicCentral": 6,
    "SolarCentral": 7,
    "GeothermicCentral": 8,
    "Count": 9,
  }

class Ship_Enum:
  Mosquito = 0
  Hornet = 1
  Vulture = 2
  Dragon = 3
  Behemoth = 4
  Azathoth = 5
  Queen = 6
  Cargo = 7
  LargeCargo = 8
  Count = 9

  _VALUES_TO_NAMES = {
    0: "Mosquito",
    1: "Hornet",
    2: "Vulture",
    3: "Dragon",
    4: "Behemoth",
    5: "Azathoth",
    6: "Queen",
    7: "Cargo",
    8: "LargeCargo",
    9: "Count",
  }

  _NAMES_TO_VALUES = {
    "Mosquito": 0,
    "Hornet": 1,
    "Vulture": 2,
    "Dragon": 3,
    "Behemoth": 4,
    "Azathoth": 5,
    "Queen": 6,
    "Cargo": 7,
    "LargeCargo": 8,
    "Count": 9,
  }

class Cannon_Enum:
  Cannon1 = 0
  Cannon2 = 1
  Cannon3 = 2
  Cannon4 = 3
  Cannon5 = 4
  Cannon6 = 5
  Count = 6

  _VALUES_TO_NAMES = {
    0: "Cannon1",
    1: "Cannon2",
    2: "Cannon3",
    3: "Cannon4",
    4: "Cannon5",
    5: "Cannon6",
    6: "Count",
  }

  _NAMES_TO_VALUES = {
    "Cannon1": 0,
    "Cannon2": 1,
    "Cannon3": 2,
    "Cannon4": 3,
    "Cannon5": 4,
    "Cannon6": 5,
    "Count": 6,
  }

class FleetTask_Enum:
  Move = 0
  Harvest = 1
  Colonize = 2
  Count = 3

  _VALUES_TO_NAMES = {
    0: "Move",
    1: "Harvest",
    2: "Colonize",
    3: "Count",
  }

  _NAMES_TO_VALUES = {
    "Move": 0,
    "Harvest": 1,
    "Colonize": 2,
    "Count": 3,
  }

class FleetAction_Type:
  Nothing = 0
  Move = 1
  Harvest = 2
  Colonize = 3

  _VALUES_TO_NAMES = {
    0: "Nothing",
    1: "Move",
    2: "Harvest",
    3: "Colonize",
  }

  _NAMES_TO_VALUES = {
    "Nothing": 0,
    "Move": 1,
    "Harvest": 2,
    "Colonize": 3,
  }


class Coord:
  """
  Attributes:
   - X
   - Y
   - Z
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'X', None, None, ), # 1
    (2, TType.I32, 'Y', None, None, ), # 2
    (3, TType.I32, 'Z', None, None, ), # 3
  )

  def __init__(self, X=None, Y=None, Z=None,):
    self.X = X
    self.Y = Y
    self.Z = Z

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.X = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.Y = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.Z = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Coord')
    if self.X is not None:
      oprot.writeFieldBegin('X', TType.I32, 1)
      oprot.writeI32(self.X)
      oprot.writeFieldEnd()
    if self.Y is not None:
      oprot.writeFieldBegin('Y', TType.I32, 2)
      oprot.writeI32(self.Y)
      oprot.writeFieldEnd()
    if self.Z is not None:
      oprot.writeFieldBegin('Z', TType.I32, 3)
      oprot.writeI32(self.Z)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Event:
  """
  Attributes:
   - id
   - time
   - type
   - comment
   - value
   - viewed
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'time', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.STRING, 'comment', None, None, ), # 4
    (5, TType.I32, 'value', None, None, ), # 5
    (6, TType.BOOL, 'viewed', None, None, ), # 6
  )

  def __init__(self, id=None, time=None, type=None, comment=None, value=None, viewed=None,):
    self.id = id
    self.time = time
    self.type = type
    self.comment = comment
    self.value = value
    self.viewed = viewed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.value = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.viewed = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Event')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I32, 2)
      oprot.writeI32(self.time)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 4)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.I32, 5)
      oprot.writeI32(self.value)
      oprot.writeFieldEnd()
    if self.viewed is not None:
      oprot.writeFieldBegin('viewed', TType.BOOL, 6)
      oprot.writeBool(self.viewed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CodeData:
  """
  Attributes:
   - blocklyCode
   - code
   - failCount
   - lastError
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'blocklyCode', None, None, ), # 1
    (2, TType.STRING, 'code', None, None, ), # 2
    (3, TType.I32, 'failCount', None, None, ), # 3
    (4, TType.STRING, 'lastError', None, None, ), # 4
  )

  def __init__(self, blocklyCode=None, code=None, failCount=None, lastError=None,):
    self.blocklyCode = blocklyCode
    self.code = code
    self.failCount = failCount
    self.lastError = lastError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.blocklyCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.failCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.lastError = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CodeData')
    if self.blocklyCode is not None:
      oprot.writeFieldBegin('blocklyCode', TType.STRING, 1)
      oprot.writeString(self.blocklyCode)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 2)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.failCount is not None:
      oprot.writeFieldBegin('failCount', TType.I32, 3)
      oprot.writeI32(self.failCount)
      oprot.writeFieldEnd()
    if self.lastError is not None:
      oprot.writeFieldBegin('lastError', TType.STRING, 4)
      oprot.writeString(self.lastError)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Player:
  """
  Attributes:
   - id
   - login
   - password
   - fleetsCode
   - planetsCode
   - eventList
   - tutoDisplayed
   - mainPlanet
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'login', None, None, ), # 2
    (3, TType.STRING, 'password', None, None, ), # 3
    (4, TType.STRUCT, 'fleetsCode', (CodeData, CodeData.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'planetsCode', (CodeData, CodeData.thrift_spec), None, ), # 5
    (6, TType.LIST, 'eventList', (TType.STRUCT,(Event, Event.thrift_spec)), None, ), # 6
    (7, TType.MAP, 'tutoDisplayed', (TType.STRING,None,TType.I32,None), None, ), # 7
    (8, TType.STRUCT, 'mainPlanet', (Coord, Coord.thrift_spec), None, ), # 8
  )

  def __init__(self, id=None, login=None, password=None, fleetsCode=None, planetsCode=None, eventList=None, tutoDisplayed=None, mainPlanet=None,):
    self.id = id
    self.login = login
    self.password = password
    self.fleetsCode = fleetsCode
    self.planetsCode = planetsCode
    self.eventList = eventList
    self.tutoDisplayed = tutoDisplayed
    self.mainPlanet = mainPlanet

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.login = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.fleetsCode = CodeData()
          self.fleetsCode.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.planetsCode = CodeData()
          self.planetsCode.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.eventList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Event()
            _elem5.read(iprot)
            self.eventList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.tutoDisplayed = {}
          (_ktype7, _vtype8, _size6 ) = iprot.readMapBegin() 
          for _i10 in xrange(_size6):
            _key11 = iprot.readString();
            _val12 = iprot.readI32();
            self.tutoDisplayed[_key11] = _val12
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.mainPlanet = Coord()
          self.mainPlanet.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Player')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.login is not None:
      oprot.writeFieldBegin('login', TType.STRING, 2)
      oprot.writeString(self.login)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 3)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.fleetsCode is not None:
      oprot.writeFieldBegin('fleetsCode', TType.STRUCT, 4)
      self.fleetsCode.write(oprot)
      oprot.writeFieldEnd()
    if self.planetsCode is not None:
      oprot.writeFieldBegin('planetsCode', TType.STRUCT, 5)
      self.planetsCode.write(oprot)
      oprot.writeFieldEnd()
    if self.eventList is not None:
      oprot.writeFieldBegin('eventList', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.eventList))
      for iter13 in self.eventList:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tutoDisplayed is not None:
      oprot.writeFieldBegin('tutoDisplayed', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.tutoDisplayed))
      for kiter14,viter15 in self.tutoDisplayed.items():
        oprot.writeString(kiter14)
        oprot.writeI32(viter15)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.mainPlanet is not None:
      oprot.writeFieldBegin('mainPlanet', TType.STRUCT, 8)
      self.mainPlanet.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RessourceSet:
  """
  Attributes:
   - tab
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'tab', (TType.I32,None), None, ), # 1
  )

  def __init__(self, tab=None,):
    self.tab = tab

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.tab = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in xrange(_size16):
            _elem21 = iprot.readI32();
            self.tab.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RessourceSet')
    if self.tab is not None:
      oprot.writeFieldBegin('tab', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.tab))
      for iter22 in self.tab:
        oprot.writeI32(iter22)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlanetTask:
  """
  Attributes:
   - type
   - value
   - value2
   - lauchTime
   - duration
   - startCos
   - expired
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None,     0, ), # 1
    (2, TType.I32, 'value', None, None, ), # 2
    (3, TType.I32, 'value2', None, None, ), # 3
    (4, TType.I32, 'lauchTime', None, None, ), # 4
    (5, TType.I32, 'duration', None, None, ), # 5
    (6, TType.STRUCT, 'startCos', (RessourceSet, RessourceSet.thrift_spec), None, ), # 6
    (7, TType.BOOL, 'expired', None, None, ), # 7
  )

  def __init__(self, type=thrift_spec[1][4], value=None, value2=None, lauchTime=None, duration=None, startCos=None, expired=None,):
    self.type = type
    self.value = value
    self.value2 = value2
    self.lauchTime = lauchTime
    self.duration = duration
    self.startCos = startCos
    self.expired = expired

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.value = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.value2 = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.lauchTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.duration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.startCos = RessourceSet()
          self.startCos.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.expired = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlanetTask')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.I32, 2)
      oprot.writeI32(self.value)
      oprot.writeFieldEnd()
    if self.value2 is not None:
      oprot.writeFieldBegin('value2', TType.I32, 3)
      oprot.writeI32(self.value2)
      oprot.writeFieldEnd()
    if self.lauchTime is not None:
      oprot.writeFieldBegin('lauchTime', TType.I32, 4)
      oprot.writeI32(self.lauchTime)
      oprot.writeFieldEnd()
    if self.duration is not None:
      oprot.writeFieldBegin('duration', TType.I32, 5)
      oprot.writeI32(self.duration)
      oprot.writeFieldEnd()
    if self.startCos is not None:
      oprot.writeFieldBegin('startCos', TType.STRUCT, 6)
      self.startCos.write(oprot)
      oprot.writeFieldEnd()
    if self.expired is not None:
      oprot.writeFieldBegin('expired', TType.BOOL, 7)
      oprot.writeBool(self.expired)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FleetTask:
  """
  Attributes:
   - type
   - lauchTime
   - duration
   - position
   - expired
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'lauchTime', None, None, ), # 2
    (3, TType.I32, 'duration', None, None, ), # 3
    (4, TType.STRUCT, 'position', (Coord, Coord.thrift_spec), None, ), # 4
    (5, TType.BOOL, 'expired', None, None, ), # 5
  )

  def __init__(self, type=None, lauchTime=None, duration=None, position=None, expired=None,):
    self.type = type
    self.lauchTime = lauchTime
    self.duration = duration
    self.position = position
    self.expired = expired

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.lauchTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.duration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.position = Coord()
          self.position.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.expired = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FleetTask')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.lauchTime is not None:
      oprot.writeFieldBegin('lauchTime', TType.I32, 2)
      oprot.writeI32(self.lauchTime)
      oprot.writeFieldEnd()
    if self.duration is not None:
      oprot.writeFieldBegin('duration', TType.I32, 3)
      oprot.writeI32(self.duration)
      oprot.writeFieldEnd()
    if self.position is not None:
      oprot.writeFieldBegin('position', TType.STRUCT, 4)
      self.position.write(oprot)
      oprot.writeFieldEnd()
    if self.expired is not None:
      oprot.writeFieldBegin('expired', TType.BOOL, 5)
      oprot.writeBool(self.expired)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Planet:
  """
  Attributes:
   - name
   - coord
   - playerId
   - buildingList
   - taskQueue
   - ressourceSet
   - eventList
   - cannonTab
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRUCT, 'coord', (Coord, Coord.thrift_spec), None, ), # 2
    (3, TType.I32, 'playerId', None, None, ), # 3
    (4, TType.LIST, 'buildingList', (TType.I32,None), None, ), # 4
    (5, TType.LIST, 'taskQueue', (TType.STRUCT,(PlanetTask, PlanetTask.thrift_spec)), None, ), # 5
    (6, TType.STRUCT, 'ressourceSet', (RessourceSet, RessourceSet.thrift_spec), None, ), # 6
    (7, TType.LIST, 'eventList', (TType.STRUCT,(Event, Event.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'cannonTab', (TType.I32,None), None, ), # 8
  )

  def __init__(self, name=None, coord=None, playerId=None, buildingList=None, taskQueue=None, ressourceSet=None, eventList=None, cannonTab=None,):
    self.name = name
    self.coord = coord
    self.playerId = playerId
    self.buildingList = buildingList
    self.taskQueue = taskQueue
    self.ressourceSet = ressourceSet
    self.eventList = eventList
    self.cannonTab = cannonTab

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.coord = Coord()
          self.coord.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.playerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.buildingList = []
          (_etype26, _size23) = iprot.readListBegin()
          for _i27 in xrange(_size23):
            _elem28 = iprot.readI32();
            self.buildingList.append(_elem28)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.taskQueue = []
          (_etype32, _size29) = iprot.readListBegin()
          for _i33 in xrange(_size29):
            _elem34 = PlanetTask()
            _elem34.read(iprot)
            self.taskQueue.append(_elem34)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.ressourceSet = RessourceSet()
          self.ressourceSet.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.eventList = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = Event()
            _elem40.read(iprot)
            self.eventList.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.cannonTab = []
          (_etype44, _size41) = iprot.readListBegin()
          for _i45 in xrange(_size41):
            _elem46 = iprot.readI32();
            self.cannonTab.append(_elem46)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Planet')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.coord is not None:
      oprot.writeFieldBegin('coord', TType.STRUCT, 2)
      self.coord.write(oprot)
      oprot.writeFieldEnd()
    if self.playerId is not None:
      oprot.writeFieldBegin('playerId', TType.I32, 3)
      oprot.writeI32(self.playerId)
      oprot.writeFieldEnd()
    if self.buildingList is not None:
      oprot.writeFieldBegin('buildingList', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.buildingList))
      for iter47 in self.buildingList:
        oprot.writeI32(iter47)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.taskQueue is not None:
      oprot.writeFieldBegin('taskQueue', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.taskQueue))
      for iter48 in self.taskQueue:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ressourceSet is not None:
      oprot.writeFieldBegin('ressourceSet', TType.STRUCT, 6)
      self.ressourceSet.write(oprot)
      oprot.writeFieldEnd()
    if self.eventList is not None:
      oprot.writeFieldBegin('eventList', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.eventList))
      for iter49 in self.eventList:
        iter49.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cannonTab is not None:
      oprot.writeFieldBegin('cannonTab', TType.LIST, 8)
      oprot.writeListBegin(TType.I32, len(self.cannonTab))
      for iter50 in self.cannonTab:
        oprot.writeI32(iter50)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Fleet:
  """
  Attributes:
   - id
   - playerId
   - coord
   - origin
   - name
   - shipList
   - ressourceSet
   - taskQueue
   - eventList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'playerId', None, None, ), # 2
    (3, TType.STRUCT, 'coord', (Coord, Coord.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'origin', (Coord, Coord.thrift_spec), None, ), # 4
    (5, TType.STRING, 'name', None, None, ), # 5
    (6, TType.LIST, 'shipList', (TType.I32,None), None, ), # 6
    (7, TType.STRUCT, 'ressourceSet', (RessourceSet, RessourceSet.thrift_spec), None, ), # 7
    (8, TType.LIST, 'taskQueue', (TType.STRUCT,(FleetTask, FleetTask.thrift_spec)), None, ), # 8
    (9, TType.LIST, 'eventList', (TType.STRUCT,(Event, Event.thrift_spec)), None, ), # 9
  )

  def __init__(self, id=None, playerId=None, coord=None, origin=None, name=None, shipList=None, ressourceSet=None, taskQueue=None, eventList=None,):
    self.id = id
    self.playerId = playerId
    self.coord = coord
    self.origin = origin
    self.name = name
    self.shipList = shipList
    self.ressourceSet = ressourceSet
    self.taskQueue = taskQueue
    self.eventList = eventList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.playerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.coord = Coord()
          self.coord.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.origin = Coord()
          self.origin.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.shipList = []
          (_etype54, _size51) = iprot.readListBegin()
          for _i55 in xrange(_size51):
            _elem56 = iprot.readI32();
            self.shipList.append(_elem56)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.ressourceSet = RessourceSet()
          self.ressourceSet.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.taskQueue = []
          (_etype60, _size57) = iprot.readListBegin()
          for _i61 in xrange(_size57):
            _elem62 = FleetTask()
            _elem62.read(iprot)
            self.taskQueue.append(_elem62)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.eventList = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = Event()
            _elem68.read(iprot)
            self.eventList.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Fleet')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.playerId is not None:
      oprot.writeFieldBegin('playerId', TType.I32, 2)
      oprot.writeI32(self.playerId)
      oprot.writeFieldEnd()
    if self.coord is not None:
      oprot.writeFieldBegin('coord', TType.STRUCT, 3)
      self.coord.write(oprot)
      oprot.writeFieldEnd()
    if self.origin is not None:
      oprot.writeFieldBegin('origin', TType.STRUCT, 4)
      self.origin.write(oprot)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 5)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.shipList is not None:
      oprot.writeFieldBegin('shipList', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.shipList))
      for iter69 in self.shipList:
        oprot.writeI32(iter69)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ressourceSet is not None:
      oprot.writeFieldBegin('ressourceSet', TType.STRUCT, 7)
      self.ressourceSet.write(oprot)
      oprot.writeFieldEnd()
    if self.taskQueue is not None:
      oprot.writeFieldBegin('taskQueue', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.taskQueue))
      for iter70 in self.taskQueue:
        iter70.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.eventList is not None:
      oprot.writeFieldBegin('eventList', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.eventList))
      for iter71 in self.eventList:
        iter71.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FleetAction:
  """
  Attributes:
   - action
   - target
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'action', None, None, ), # 1
    (2, TType.STRUCT, 'target', (Coord, Coord.thrift_spec), None, ), # 2
  )

  def __init__(self, action=None, target=None,):
    self.action = action
    self.target = target

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.action = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.target = Coord()
          self.target.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FleetAction')
    if self.action is not None:
      oprot.writeFieldBegin('action', TType.I32, 1)
      oprot.writeI32(self.action)
      oprot.writeFieldEnd()
    if self.target is not None:
      oprot.writeFieldBegin('target', TType.STRUCT, 2)
      self.target.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Universe:
  """
  Attributes:
   - playerMap
   - planetMap
   - fleetMap
   - nextPlayerID
   - nextFleetID
   - time
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'playerMap', (TType.I32,None,TType.STRUCT,(Player, Player.thrift_spec)), None, ), # 1
    (2, TType.MAP, 'planetMap', (TType.STRUCT,(Coord, Coord.thrift_spec),TType.STRUCT,(Planet, Planet.thrift_spec)), None, ), # 2
    (3, TType.MAP, 'fleetMap', (TType.I32,None,TType.STRUCT,(Fleet, Fleet.thrift_spec)), None, ), # 3
    (4, TType.I32, 'nextPlayerID', None, None, ), # 4
    (5, TType.I32, 'nextFleetID', None, None, ), # 5
    (6, TType.I32, 'time', None, None, ), # 6
  )

  def __init__(self, playerMap=None, planetMap=None, fleetMap=None, nextPlayerID=None, nextFleetID=None, time=None,):
    self.playerMap = playerMap
    self.planetMap = planetMap
    self.fleetMap = fleetMap
    self.nextPlayerID = nextPlayerID
    self.nextFleetID = nextFleetID
    self.time = time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.playerMap = {}
          (_ktype73, _vtype74, _size72 ) = iprot.readMapBegin() 
          for _i76 in xrange(_size72):
            _key77 = iprot.readI32();
            _val78 = Player()
            _val78.read(iprot)
            self.playerMap[_key77] = _val78
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.planetMap = {}
          (_ktype80, _vtype81, _size79 ) = iprot.readMapBegin() 
          for _i83 in xrange(_size79):
            _key84 = Coord()
            _key84.read(iprot)
            _val85 = Planet()
            _val85.read(iprot)
            self.planetMap[_key84] = _val85
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.fleetMap = {}
          (_ktype87, _vtype88, _size86 ) = iprot.readMapBegin() 
          for _i90 in xrange(_size86):
            _key91 = iprot.readI32();
            _val92 = Fleet()
            _val92.read(iprot)
            self.fleetMap[_key91] = _val92
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.nextPlayerID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.nextFleetID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.time = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Universe')
    if self.playerMap is not None:
      oprot.writeFieldBegin('playerMap', TType.MAP, 1)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.playerMap))
      for kiter93,viter94 in self.playerMap.items():
        oprot.writeI32(kiter93)
        viter94.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.planetMap is not None:
      oprot.writeFieldBegin('planetMap', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRUCT, TType.STRUCT, len(self.planetMap))
      for kiter95,viter96 in self.planetMap.items():
        kiter95.write(oprot)
        viter96.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.fleetMap is not None:
      oprot.writeFieldBegin('fleetMap', TType.MAP, 3)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.fleetMap))
      for kiter97,viter98 in self.fleetMap.items():
        oprot.writeI32(kiter97)
        viter98.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.nextPlayerID is not None:
      oprot.writeFieldBegin('nextPlayerID', TType.I32, 4)
      oprot.writeI32(self.nextPlayerID)
      oprot.writeFieldEnd()
    if self.nextFleetID is not None:
      oprot.writeFieldBegin('nextFleetID', TType.I32, 5)
      oprot.writeI32(self.nextFleetID)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I32, 6)
      oprot.writeI32(self.time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OptionalPlayer:
  """
  Attributes:
   - player
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'player', (Player, Player.thrift_spec), None, ), # 1
  )

  def __init__(self, player=None,):
    self.player = player

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.player = Player()
          self.player.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OptionalPlayer')
    if self.player is not None:
      oprot.writeFieldBegin('player', TType.STRUCT, 1)
      self.player.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
