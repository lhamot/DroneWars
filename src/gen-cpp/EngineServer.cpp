/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "EngineServer.h"

namespace ndw
{

uint32_t EngineServer_start_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_start_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_start_args");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_start_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_start_pargs");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_start_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_start_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_start_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_start_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_stop_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_stop_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_stop_args");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_stop_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_stop_pargs");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_stop_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_stop_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_stop_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_stop_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_addPlayer_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->login);
				this->__isset.login = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->password);
				this->__isset.password = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_addPlayer_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_addPlayer_args");

	xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_STRING, 10);
	xfer += oprot->writeString(this->login);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->password);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_addPlayer_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_addPlayer_pargs");

	xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_STRING, 10);
	xfer += oprot->writeString((*(this->login)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->password)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_addPlayer_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->success);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_addPlayer_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_addPlayer_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 0);
		xfer += oprot->writeBool(this->success);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_addPlayer_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool((*(this->success)));
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerFleets_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->beginIndex);
				this->__isset.beginIndex = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->endIndex);
				this->__isset.endIndex = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				int32_t ecast154;
				xfer += iprot->readI32(ecast154);
				this->sortType = (Sort_Type::type)ecast154;
				this->__isset.sortType = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 50:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->asc);
				this->__isset.asc = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 60:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->value);
				this->__isset.value = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerFleets_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerFleets_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("beginIndex", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->beginIndex);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("endIndex", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32(this->endIndex);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("sortType", ::apache::thrift::protocol::T_I32, 40);
	xfer += oprot->writeI32((int32_t)this->sortType);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("asc", ::apache::thrift::protocol::T_BOOL, 50);
	xfer += oprot->writeBool(this->asc);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 60);
	xfer += oprot->writeI32(this->value);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerFleets_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerFleets_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("beginIndex", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32((*(this->beginIndex)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("endIndex", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32((*(this->endIndex)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("sortType", ::apache::thrift::protocol::T_I32, 40);
	xfer += oprot->writeI32((int32_t)(*(this->sortType)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("asc", ::apache::thrift::protocol::T_BOOL, 50);
	xfer += oprot->writeBool((*(this->asc)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 60);
	xfer += oprot->writeI32((*(this->value)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerFleets_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerFleets_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getPlayerFleets_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerFleets_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerPlanets_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->beginIndex);
				this->__isset.beginIndex = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->endIndex);
				this->__isset.endIndex = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				int32_t ecast155;
				xfer += iprot->readI32(ecast155);
				this->sortType = (Sort_Type::type)ecast155;
				this->__isset.sortType = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 50:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->asc);
				this->__isset.asc = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 60:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->value);
				this->__isset.value = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerPlanets_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerPlanets_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("beginIndex", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->beginIndex);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("endIndex", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32(this->endIndex);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("sortType", ::apache::thrift::protocol::T_I32, 40);
	xfer += oprot->writeI32((int32_t)this->sortType);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("asc", ::apache::thrift::protocol::T_BOOL, 50);
	xfer += oprot->writeBool(this->asc);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 60);
	xfer += oprot->writeI32(this->value);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerPlanets_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerPlanets_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("beginIndex", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32((*(this->beginIndex)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("endIndex", ::apache::thrift::protocol::T_I32, 30);
	xfer += oprot->writeI32((*(this->endIndex)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("sortType", ::apache::thrift::protocol::T_I32, 40);
	xfer += oprot->writeI32((int32_t)(*(this->sortType)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("asc", ::apache::thrift::protocol::T_BOOL, 50);
	xfer += oprot->writeBool((*(this->asc)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 60);
	xfer += oprot->writeI32((*(this->value)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerPlanets_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerPlanets_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getPlayerPlanets_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerPlanets_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerFleetCode_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->code);
				this->__isset.code = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerFleetCode_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerFleetCode_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->code);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerFleetCode_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerFleetCode_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->code)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerFleetCode_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerFleetCode_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_setPlayerFleetCode_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerFleetCode_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerPlanetCode_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->code);
				this->__isset.code = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerPlanetCode_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerPlanetCode_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->code);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerPlanetCode_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerPlanetCode_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->code)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerPlanetCode_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerPlanetCode_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_setPlayerPlanetCode_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerPlanetCode_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerFleetBlocklyCode_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->code);
				this->__isset.code = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerFleetBlocklyCode_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerFleetBlocklyCode_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->code);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerFleetBlocklyCode_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerFleetBlocklyCode_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->code)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerFleetBlocklyCode_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerFleetBlocklyCode_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_setPlayerFleetBlocklyCode_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerFleetBlocklyCode_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerPlanetBlocklyCode_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->code);
				this->__isset.code = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerPlanetBlocklyCode_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerPlanetBlocklyCode_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->code);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerPlanetBlocklyCode_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_setPlayerPlanetBlocklyCode_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->code)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerPlanetBlocklyCode_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_setPlayerPlanetBlocklyCode_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_setPlayerPlanetBlocklyCode_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_setPlayerPlanetBlocklyCode_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerFleetCode_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerFleetCode_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerFleetCode_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerFleetCode_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerFleetCode_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerFleetCode_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerFleetCode_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getPlayerFleetCode_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerFleetCode_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerPlanetCode_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerPlanetCode_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerPlanetCode_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerPlanetCode_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerPlanetCode_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerPlanetCode_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerPlanetCode_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getPlayerPlanetCode_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerPlanetCode_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayers_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayers_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayers_args");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayers_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayers_pargs");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayers_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->success.clear();
					uint32_t _size156;
					::apache::thrift::protocol::TType _etype159;
					xfer += iprot->readListBegin(_etype159, _size156);
					this->success.resize(_size156);
					uint32_t _i160;
					for(_i160 = 0; _i160 < _size156; ++_i160)
					{
						xfer += this->success[_i160].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayers_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getPlayers_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
		{
			xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
			std::vector<Player> ::const_iterator _iter161;
			for(_iter161 = this->success.begin(); _iter161 != this->success.end(); ++_iter161)
			{
				xfer += (*_iter161).write(oprot);
			}
			xfer += oprot->writeListEnd();
		}
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayers_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					(*(this->success)).clear();
					uint32_t _size162;
					::apache::thrift::protocol::TType _etype165;
					xfer += iprot->readListBegin(_etype165, _size162);
					(*(this->success)).resize(_size162);
					uint32_t _i166;
					for(_i166 = 0; _i166 < _size162; ++_i166)
					{
						xfer += (*(this->success))[_i166].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayer_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayer_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayer_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayer_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayer_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayer_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayer_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getPlayer_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayer_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlanet_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->coord.read(iprot);
				this->__isset.coord = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlanet_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlanet_args");

	xfer += oprot->writeFieldBegin("coord", ::apache::thrift::protocol::T_STRUCT, 10);
	xfer += this->coord.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlanet_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlanet_pargs");

	xfer += oprot->writeFieldBegin("coord", ::apache::thrift::protocol::T_STRUCT, 10);
	xfer += (*(this->coord)).write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlanet_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->success.clear();
					uint32_t _size167;
					::apache::thrift::protocol::TType _etype170;
					xfer += iprot->readListBegin(_etype170, _size167);
					this->success.resize(_size167);
					uint32_t _i171;
					for(_i171 = 0; _i171 < _size167; ++_i171)
					{
						xfer += this->success[_i171].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlanet_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getPlanet_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
		{
			xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
			std::vector<Planet> ::const_iterator _iter172;
			for(_iter172 = this->success.begin(); _iter172 != this->success.end(); ++_iter172)
			{
				xfer += (*_iter172).write(oprot);
			}
			xfer += oprot->writeListEnd();
		}
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlanet_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					(*(this->success)).clear();
					uint32_t _size173;
					::apache::thrift::protocol::TType _etype176;
					xfer += iprot->readListBegin(_etype176, _size173);
					(*(this->success)).resize(_size173);
					uint32_t _i177;
					for(_i177 = 0; _i177 < _size173; ++_i177)
					{
						xfer += (*(this->success))[_i177].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFleet_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I64)
			{
				xfer += iprot->readI64(this->fid);
				this->__isset.fid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFleet_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getFleet_args");

	xfer += oprot->writeFieldBegin("fid", ::apache::thrift::protocol::T_I64, 10);
	xfer += oprot->writeI64(this->fid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFleet_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getFleet_pargs");

	xfer += oprot->writeFieldBegin("fid", ::apache::thrift::protocol::T_I64, 10);
	xfer += oprot->writeI64((*(this->fid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFleet_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFleet_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getFleet_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFleet_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_logPlayer_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->login);
				this->__isset.login = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->password);
				this->__isset.password = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_logPlayer_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_logPlayer_args");

	xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_STRING, 10);
	xfer += oprot->writeString(this->login);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->password);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_logPlayer_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_logPlayer_pargs");

	xfer += oprot->writeFieldBegin("login", ::apache::thrift::protocol::T_STRING, 10);
	xfer += oprot->writeString((*(this->login)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->password)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_logPlayer_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_logPlayer_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_logPlayer_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_logPlayer_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_incrementTutoDisplayed_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->tutoName);
				this->__isset.tutoName = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_incrementTutoDisplayed_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_incrementTutoDisplayed_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("tutoName", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->tutoName);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_incrementTutoDisplayed_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_incrementTutoDisplayed_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("tutoName", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->tutoName)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_incrementTutoDisplayed_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_incrementTutoDisplayed_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_incrementTutoDisplayed_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_incrementTutoDisplayed_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFightReport_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->id);
				this->__isset.id = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFightReport_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getFightReport_args");

	xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->id);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFightReport_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getFightReport_pargs");

	xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->id)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFightReport_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFightReport_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getFightReport_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFightReport_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getTimeInfo_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getTimeInfo_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getTimeInfo_args");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getTimeInfo_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getTimeInfo_pargs");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getTimeInfo_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getTimeInfo_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getTimeInfo_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getTimeInfo_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_eraseAccount_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->password);
				this->__isset.password = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_eraseAccount_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_eraseAccount_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->password);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_eraseAccount_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_eraseAccount_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->password)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_eraseAccount_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->success);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_eraseAccount_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_eraseAccount_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 0);
		xfer += oprot->writeBool(this->success);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_eraseAccount_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool((*(this->success)));
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerEvents_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerEvents_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerEvents_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerEvents_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getPlayerEvents_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerEvents_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->success.clear();
					uint32_t _size178;
					::apache::thrift::protocol::TType _etype181;
					xfer += iprot->readListBegin(_etype181, _size178);
					this->success.resize(_size178);
					uint32_t _i182;
					for(_i182 = 0; _i182 < _size178; ++_i182)
					{
						xfer += this->success[_i182].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getPlayerEvents_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getPlayerEvents_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
		{
			xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
			std::vector<Event> ::const_iterator _iter183;
			for(_iter183 = this->success.begin(); _iter183 != this->success.end(); ++_iter183)
			{
				xfer += (*_iter183).write(oprot);
			}
			xfer += oprot->writeListEnd();
		}
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getPlayerEvents_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					(*(this->success)).clear();
					uint32_t _size184;
					::apache::thrift::protocol::TType _etype187;
					xfer += iprot->readListBegin(_etype187, _size184);
					(*(this->success)).resize(_size184);
					uint32_t _i188;
					for(_i188 = 0; _i188 < _size184; ++_i188)
					{
						xfer += (*(this->success))[_i188].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_buySkill_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I16)
			{
				xfer += iprot->readI16(this->skillID);
				this->__isset.skillID = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_buySkill_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_buySkill_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("skillID", ::apache::thrift::protocol::T_I16, 20);
	xfer += oprot->writeI16(this->skillID);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_buySkill_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_buySkill_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("skillID", ::apache::thrift::protocol::T_I16, 20);
	xfer += oprot->writeI16((*(this->skillID)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_buySkill_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->success);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_buySkill_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_buySkill_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 0);
		xfer += oprot->writeBool(this->success);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_buySkill_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool((*(this->success)));
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getBuildingsInfo_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getBuildingsInfo_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getBuildingsInfo_args");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getBuildingsInfo_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getBuildingsInfo_pargs");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getBuildingsInfo_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->success.clear();
					uint32_t _size189;
					::apache::thrift::protocol::TType _etype192;
					xfer += iprot->readListBegin(_etype192, _size189);
					this->success.resize(_size189);
					uint32_t _i193;
					for(_i193 = 0; _i193 < _size189; ++_i193)
					{
						xfer += this->success[_i193].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getBuildingsInfo_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getBuildingsInfo_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
		{
			xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
			std::vector<Building> ::const_iterator _iter194;
			for(_iter194 = this->success.begin(); _iter194 != this->success.end(); ++_iter194)
			{
				xfer += (*_iter194).write(oprot);
			}
			xfer += oprot->writeListEnd();
		}
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getBuildingsInfo_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					(*(this->success)).clear();
					uint32_t _size195;
					::apache::thrift::protocol::TType _etype198;
					xfer += iprot->readListBegin(_etype198, _size195);
					(*(this->success)).resize(_size195);
					uint32_t _i199;
					for(_i199 = 0; _i199 < _size195; ++_i199)
					{
						xfer += (*(this->success))[_i199].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getCannonsInfo_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getCannonsInfo_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getCannonsInfo_args");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getCannonsInfo_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getCannonsInfo_pargs");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getCannonsInfo_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->success.clear();
					uint32_t _size200;
					::apache::thrift::protocol::TType _etype203;
					xfer += iprot->readListBegin(_etype203, _size200);
					this->success.resize(_size200);
					uint32_t _i204;
					for(_i204 = 0; _i204 < _size200; ++_i204)
					{
						xfer += this->success[_i204].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getCannonsInfo_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getCannonsInfo_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
		{
			xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
			std::vector<Cannon> ::const_iterator _iter205;
			for(_iter205 = this->success.begin(); _iter205 != this->success.end(); ++_iter205)
			{
				xfer += (*_iter205).write(oprot);
			}
			xfer += oprot->writeListEnd();
		}
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getCannonsInfo_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					(*(this->success)).clear();
					uint32_t _size206;
					::apache::thrift::protocol::TType _etype209;
					xfer += iprot->readListBegin(_etype209, _size206);
					(*(this->success)).resize(_size206);
					uint32_t _i210;
					for(_i210 = 0; _i210 < _size206; ++_i210)
					{
						xfer += (*(this->success))[_i210].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getShipsInfo_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getShipsInfo_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getShipsInfo_args");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getShipsInfo_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getShipsInfo_pargs");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getShipsInfo_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->success.clear();
					uint32_t _size211;
					::apache::thrift::protocol::TType _etype214;
					xfer += iprot->readListBegin(_etype214, _size211);
					this->success.resize(_size211);
					uint32_t _i215;
					for(_i215 = 0; _i215 < _size211; ++_i215)
					{
						xfer += this->success[_i215].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getShipsInfo_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getShipsInfo_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
		{
			xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
			std::vector<Ship> ::const_iterator _iter216;
			for(_iter216 = this->success.begin(); _iter216 != this->success.end(); ++_iter216)
			{
				xfer += (*_iter216).write(oprot);
			}
			xfer += oprot->writeListEnd();
		}
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getShipsInfo_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					(*(this->success)).clear();
					uint32_t _size217;
					::apache::thrift::protocol::TType _etype220;
					xfer += iprot->readListBegin(_etype220, _size217);
					(*(this->success)).resize(_size217);
					uint32_t _i221;
					for(_i221 = 0; _i221 < _size217; ++_i221)
					{
						xfer += (*(this->success))[_i221].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_addMessage_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->sender);
				this->__isset.sender = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->recipient);
				this->__isset.recipient = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->suject);
				this->__isset.suject = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 40:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->message);
				this->__isset.message = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_addMessage_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_addMessage_args");

	xfer += oprot->writeFieldBegin("sender", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->sender);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("recipient", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->recipient);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("suject", ::apache::thrift::protocol::T_STRING, 30);
	xfer += oprot->writeString(this->suject);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 40);
	xfer += oprot->writeString(this->message);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_addMessage_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_addMessage_pargs");

	xfer += oprot->writeFieldBegin("sender", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->sender)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("recipient", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32((*(this->recipient)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("suject", ::apache::thrift::protocol::T_STRING, 30);
	xfer += oprot->writeString((*(this->suject)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 40);
	xfer += oprot->writeString((*(this->message)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_addMessage_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_addMessage_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_addMessage_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_addMessage_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getMessages_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->recipient);
				this->__isset.recipient = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getMessages_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getMessages_args");

	xfer += oprot->writeFieldBegin("recipient", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->recipient);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getMessages_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getMessages_pargs");

	xfer += oprot->writeFieldBegin("recipient", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->recipient)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getMessages_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->success.clear();
					uint32_t _size222;
					::apache::thrift::protocol::TType _etype225;
					xfer += iprot->readListBegin(_etype225, _size222);
					this->success.resize(_size222);
					uint32_t _i226;
					for(_i226 = 0; _i226 < _size222; ++_i226)
					{
						xfer += this->success[_i226].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getMessages_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getMessages_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
		{
			xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
			std::vector<Message> ::const_iterator _iter227;
			for(_iter227 = this->success.begin(); _iter227 != this->success.end(); ++_iter227)
			{
				xfer += (*_iter227).write(oprot);
			}
			xfer += oprot->writeListEnd();
		}
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getMessages_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					(*(this->success)).clear();
					uint32_t _size228;
					::apache::thrift::protocol::TType _etype231;
					xfer += iprot->readListBegin(_etype231, _size228);
					(*(this->success)).resize(_size228);
					uint32_t _i232;
					for(_i232 = 0; _i232 < _size228; ++_i232)
					{
						xfer += (*(this->success))[_i232].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_eraseMesage_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->mid);
				this->__isset.mid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_eraseMesage_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_eraseMesage_args");

	xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->mid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_eraseMesage_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_eraseMesage_pargs");

	xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->mid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_eraseMesage_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_eraseMesage_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_eraseMesage_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_eraseMesage_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_addFriendshipRequest_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->playerA);
				this->__isset.playerA = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->playerB);
				this->__isset.playerB = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_addFriendshipRequest_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_addFriendshipRequest_args");

	xfer += oprot->writeFieldBegin("playerA", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->playerA);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("playerB", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->playerB);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_addFriendshipRequest_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_addFriendshipRequest_pargs");

	xfer += oprot->writeFieldBegin("playerA", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->playerA)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("playerB", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32((*(this->playerB)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_addFriendshipRequest_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_addFriendshipRequest_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_addFriendshipRequest_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_addFriendshipRequest_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_acceptFriendshipRequest_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->playerA);
				this->__isset.playerA = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->playerB);
				this->__isset.playerB = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_BOOL)
			{
				xfer += iprot->readBool(this->accept);
				this->__isset.accept = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_acceptFriendshipRequest_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_acceptFriendshipRequest_args");

	xfer += oprot->writeFieldBegin("playerA", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->playerA);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("playerB", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->playerB);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("accept", ::apache::thrift::protocol::T_BOOL, 30);
	xfer += oprot->writeBool(this->accept);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_acceptFriendshipRequest_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_acceptFriendshipRequest_pargs");

	xfer += oprot->writeFieldBegin("playerA", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->playerA)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("playerB", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32((*(this->playerB)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("accept", ::apache::thrift::protocol::T_BOOL, 30);
	xfer += oprot->writeBool((*(this->accept)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_acceptFriendshipRequest_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_acceptFriendshipRequest_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_acceptFriendshipRequest_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_acceptFriendshipRequest_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_closeFriendship_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->playerA);
				this->__isset.playerA = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->playerB);
				this->__isset.playerB = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_closeFriendship_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_closeFriendship_args");

	xfer += oprot->writeFieldBegin("playerA", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->playerA);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("playerB", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->playerB);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_closeFriendship_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_closeFriendship_pargs");

	xfer += oprot->writeFieldBegin("playerA", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->playerA)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("playerB", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32((*(this->playerB)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_closeFriendship_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_closeFriendship_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_closeFriendship_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_closeFriendship_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFriends_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->player);
				this->__isset.player = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFriends_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getFriends_args");

	xfer += oprot->writeFieldBegin("player", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->player);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFriends_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getFriends_pargs");

	xfer += oprot->writeFieldBegin("player", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->player)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFriends_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					this->success.clear();
					uint32_t _size233;
					::apache::thrift::protocol::TType _etype236;
					xfer += iprot->readListBegin(_etype236, _size233);
					this->success.resize(_size233);
					uint32_t _i237;
					for(_i237 = 0; _i237 < _size233; ++_i237)
					{
						xfer += this->success[_i237].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFriends_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getFriends_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
		{
			xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
			std::vector<Player> ::const_iterator _iter238;
			for(_iter238 = this->success.begin(); _iter238 != this->success.end(); ++_iter238)
			{
				xfer += (*_iter238).write(oprot);
			}
			xfer += oprot->writeListEnd();
		}
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFriends_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_LIST)
			{
				{
					(*(this->success)).clear();
					uint32_t _size239;
					::apache::thrift::protocol::TType _etype242;
					xfer += iprot->readListBegin(_etype242, _size239);
					(*(this->success)).resize(_size239);
					uint32_t _i243;
					for(_i243 = 0; _i243 < _size239; ++_i243)
					{
						xfer += (*(this->success))[_i243].read(iprot);
					}
					xfer += iprot->readListEnd();
				}
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFriendshipRequest_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->player);
				this->__isset.player = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFriendshipRequest_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getFriendshipRequest_args");

	xfer += oprot->writeFieldBegin("player", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->player);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFriendshipRequest_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getFriendshipRequest_pargs");

	xfer += oprot->writeFieldBegin("player", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->player)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFriendshipRequest_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getFriendshipRequest_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getFriendshipRequest_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getFriendshipRequest_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_addAlliance_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->name);
				this->__isset.name = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 30:
			if(ftype == ::apache::thrift::protocol::T_STRING)
			{
				xfer += iprot->readString(this->description);
				this->__isset.description = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_addAlliance_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_addAlliance_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString(this->name);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 30);
	xfer += oprot->writeString(this->description);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_addAlliance_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_addAlliance_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 20);
	xfer += oprot->writeString((*(this->name)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 30);
	xfer += oprot->writeString((*(this->description)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_addAlliance_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->success);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_addAlliance_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_addAlliance_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
		xfer += oprot->writeI32(this->success);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_addAlliance_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32((*(this->success)));
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getAlliance_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->aid);
				this->__isset.aid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getAlliance_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getAlliance_args");

	xfer += oprot->writeFieldBegin("aid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->aid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getAlliance_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_getAlliance_pargs");

	xfer += oprot->writeFieldBegin("aid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->aid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getAlliance_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->success.read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_getAlliance_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_getAlliance_result");

	if(this->__isset.success)
	{
		xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
		xfer += this->success.write(oprot);
		xfer += oprot->writeFieldEnd();
	}
	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_getAlliance_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 0:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += (*(this->success)).read(iprot);
				this->__isset.success = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_updateAlliance_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_STRUCT)
			{
				xfer += this->alliance.read(iprot);
				this->__isset.alliance = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_updateAlliance_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_updateAlliance_args");

	xfer += oprot->writeFieldBegin("alliance", ::apache::thrift::protocol::T_STRUCT, 10);
	xfer += this->alliance.write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_updateAlliance_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_updateAlliance_pargs");

	xfer += oprot->writeFieldBegin("alliance", ::apache::thrift::protocol::T_STRUCT, 10);
	xfer += (*(this->alliance)).write(oprot);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_updateAlliance_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_updateAlliance_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_updateAlliance_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_updateAlliance_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_transfertAlliance_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->aid);
				this->__isset.aid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_transfertAlliance_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_transfertAlliance_args");

	xfer += oprot->writeFieldBegin("aid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->aid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_transfertAlliance_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_transfertAlliance_pargs");

	xfer += oprot->writeFieldBegin("aid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->aid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_transfertAlliance_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_transfertAlliance_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_transfertAlliance_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_transfertAlliance_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_eraseAlliance_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->aid);
				this->__isset.aid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_eraseAlliance_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_eraseAlliance_args");

	xfer += oprot->writeFieldBegin("aid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->aid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_eraseAlliance_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_eraseAlliance_pargs");

	xfer += oprot->writeFieldBegin("aid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->aid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_eraseAlliance_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_eraseAlliance_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_eraseAlliance_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_eraseAlliance_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_joinAlliance_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		case 20:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->aid);
				this->__isset.aid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_joinAlliance_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_joinAlliance_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("aid", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32(this->aid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_joinAlliance_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_joinAlliance_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldBegin("aid", ::apache::thrift::protocol::T_I32, 20);
	xfer += oprot->writeI32((*(this->aid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_joinAlliance_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_joinAlliance_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_joinAlliance_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_joinAlliance_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_quitAlliance_args::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		switch(fid)
		{
		case 10:
			if(ftype == ::apache::thrift::protocol::T_I32)
			{
				xfer += iprot->readI32(this->pid);
				this->__isset.pid = true;
			}
			else
			{
				xfer += iprot->skip(ftype);
			}
			break;
		default:
			xfer += iprot->skip(ftype);
			break;
		}
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_quitAlliance_args::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_quitAlliance_args");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32(this->pid);
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_quitAlliance_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const
{
	uint32_t xfer = 0;
	xfer += oprot->writeStructBegin("EngineServer_quitAlliance_pargs");

	xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
	xfer += oprot->writeI32((*(this->pid)));
	xfer += oprot->writeFieldEnd();

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_quitAlliance_result::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

uint32_t EngineServer_quitAlliance_result::write(::apache::thrift::protocol::TProtocol* oprot) const
{

	uint32_t xfer = 0;

	xfer += oprot->writeStructBegin("EngineServer_quitAlliance_result");

	xfer += oprot->writeFieldStop();
	xfer += oprot->writeStructEnd();
	return xfer;
}

uint32_t EngineServer_quitAlliance_presult::read(::apache::thrift::protocol::TProtocol* iprot)
{

	uint32_t xfer = 0;
	std::string fname;
	::apache::thrift::protocol::TType ftype;
	int16_t fid;

	xfer += iprot->readStructBegin(fname);

	using ::apache::thrift::protocol::TProtocolException;


	while(true)
	{
		xfer += iprot->readFieldBegin(fname, ftype, fid);
		if(ftype == ::apache::thrift::protocol::T_STOP)
		{
			break;
		}
		xfer += iprot->skip(ftype);
		xfer += iprot->readFieldEnd();
	}

	xfer += iprot->readStructEnd();

	return xfer;
}

void EngineServerClient::start()
{
	send_start();
	recv_start();
}

void EngineServerClient::send_start()
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("start", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_start_pargs args;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_start()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("start") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_start_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::stop()
{
	send_stop();
	recv_stop();
}

void EngineServerClient::send_stop()
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("stop", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_stop_pargs args;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_stop()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("stop") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_stop_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

bool EngineServerClient::addPlayer(const std::string& login, const std::string& password)
{
	send_addPlayer(login, password);
	return recv_addPlayer();
}

void EngineServerClient::send_addPlayer(const std::string& login, const std::string& password)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("addPlayer", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_addPlayer_pargs args;
	args.login = &login;
	args.password = &password;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

bool EngineServerClient::recv_addPlayer()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("addPlayer") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	bool _return;
	EngineServer_addPlayer_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		return _return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "addPlayer failed: unknown result");
}

void EngineServerClient::getPlayerFleets(FleetList& _return, const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc, const int32_t value)
{
	send_getPlayerFleets(pid, beginIndex, endIndex, sortType, asc, value);
	recv_getPlayerFleets(_return);
}

void EngineServerClient::send_getPlayerFleets(const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc, const int32_t value)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getPlayerFleets", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getPlayerFleets_pargs args;
	args.pid = &pid;
	args.beginIndex = &beginIndex;
	args.endIndex = &endIndex;
	args.sortType = &sortType;
	args.asc = &asc;
	args.value = &value;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getPlayerFleets(FleetList& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getPlayerFleets") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getPlayerFleets_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPlayerFleets failed: unknown result");
}

void EngineServerClient::getPlayerPlanets(PlanetList& _return, const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc, const int32_t value)
{
	send_getPlayerPlanets(pid, beginIndex, endIndex, sortType, asc, value);
	recv_getPlayerPlanets(_return);
}

void EngineServerClient::send_getPlayerPlanets(const Player_ID pid, const int32_t beginIndex, const int32_t endIndex, const Sort_Type::type sortType, const bool asc, const int32_t value)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getPlayerPlanets", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getPlayerPlanets_pargs args;
	args.pid = &pid;
	args.beginIndex = &beginIndex;
	args.endIndex = &endIndex;
	args.sortType = &sortType;
	args.asc = &asc;
	args.value = &value;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getPlayerPlanets(PlanetList& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getPlayerPlanets") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getPlayerPlanets_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPlayerPlanets failed: unknown result");
}

void EngineServerClient::setPlayerFleetCode(const Player_ID pid, const std::string& code)
{
	send_setPlayerFleetCode(pid, code);
	recv_setPlayerFleetCode();
}

void EngineServerClient::send_setPlayerFleetCode(const Player_ID pid, const std::string& code)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("setPlayerFleetCode", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_setPlayerFleetCode_pargs args;
	args.pid = &pid;
	args.code = &code;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_setPlayerFleetCode()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("setPlayerFleetCode") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_setPlayerFleetCode_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::setPlayerPlanetCode(const Player_ID pid, const std::string& code)
{
	send_setPlayerPlanetCode(pid, code);
	recv_setPlayerPlanetCode();
}

void EngineServerClient::send_setPlayerPlanetCode(const Player_ID pid, const std::string& code)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("setPlayerPlanetCode", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_setPlayerPlanetCode_pargs args;
	args.pid = &pid;
	args.code = &code;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_setPlayerPlanetCode()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("setPlayerPlanetCode") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_setPlayerPlanetCode_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::setPlayerFleetBlocklyCode(const Player_ID pid, const std::string& code)
{
	send_setPlayerFleetBlocklyCode(pid, code);
	recv_setPlayerFleetBlocklyCode();
}

void EngineServerClient::send_setPlayerFleetBlocklyCode(const Player_ID pid, const std::string& code)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("setPlayerFleetBlocklyCode", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_setPlayerFleetBlocklyCode_pargs args;
	args.pid = &pid;
	args.code = &code;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_setPlayerFleetBlocklyCode()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("setPlayerFleetBlocklyCode") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_setPlayerFleetBlocklyCode_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::setPlayerPlanetBlocklyCode(const Player_ID pid, const std::string& code)
{
	send_setPlayerPlanetBlocklyCode(pid, code);
	recv_setPlayerPlanetBlocklyCode();
}

void EngineServerClient::send_setPlayerPlanetBlocklyCode(const Player_ID pid, const std::string& code)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("setPlayerPlanetBlocklyCode", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_setPlayerPlanetBlocklyCode_pargs args;
	args.pid = &pid;
	args.code = &code;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_setPlayerPlanetBlocklyCode()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("setPlayerPlanetBlocklyCode") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_setPlayerPlanetBlocklyCode_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::getPlayerFleetCode(CodeData& _return, const Player_ID pid)
{
	send_getPlayerFleetCode(pid);
	recv_getPlayerFleetCode(_return);
}

void EngineServerClient::send_getPlayerFleetCode(const Player_ID pid)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getPlayerFleetCode", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getPlayerFleetCode_pargs args;
	args.pid = &pid;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getPlayerFleetCode(CodeData& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getPlayerFleetCode") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getPlayerFleetCode_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPlayerFleetCode failed: unknown result");
}

void EngineServerClient::getPlayerPlanetCode(CodeData& _return, const Player_ID pid)
{
	send_getPlayerPlanetCode(pid);
	recv_getPlayerPlanetCode(_return);
}

void EngineServerClient::send_getPlayerPlanetCode(const Player_ID pid)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getPlayerPlanetCode", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getPlayerPlanetCode_pargs args;
	args.pid = &pid;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getPlayerPlanetCode(CodeData& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getPlayerPlanetCode") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getPlayerPlanetCode_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPlayerPlanetCode failed: unknown result");
}

void EngineServerClient::getPlayers(std::vector<Player>& _return)
{
	send_getPlayers();
	recv_getPlayers(_return);
}

void EngineServerClient::send_getPlayers()
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getPlayers", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getPlayers_pargs args;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getPlayers(std::vector<Player>& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getPlayers") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getPlayers_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPlayers failed: unknown result");
}

void EngineServerClient::getPlayer(Player& _return, const Player_ID pid)
{
	send_getPlayer(pid);
	recv_getPlayer(_return);
}

void EngineServerClient::send_getPlayer(const Player_ID pid)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getPlayer", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getPlayer_pargs args;
	args.pid = &pid;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getPlayer(Player& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getPlayer") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getPlayer_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPlayer failed: unknown result");
}

void EngineServerClient::getPlanet(std::vector<Planet>& _return, const Coord& coord)
{
	send_getPlanet(coord);
	recv_getPlanet(_return);
}

void EngineServerClient::send_getPlanet(const Coord& coord)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getPlanet", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getPlanet_pargs args;
	args.coord = &coord;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getPlanet(std::vector<Planet>& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getPlanet") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getPlanet_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPlanet failed: unknown result");
}

void EngineServerClient::getFleet(Fleet& _return, const Fleet_ID fid)
{
	send_getFleet(fid);
	recv_getFleet(_return);
}

void EngineServerClient::send_getFleet(const Fleet_ID fid)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getFleet", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getFleet_pargs args;
	args.fid = &fid;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getFleet(Fleet& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getFleet") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getFleet_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getFleet failed: unknown result");
}

void EngineServerClient::logPlayer(OptionalPlayer& _return, const std::string& login, const std::string& password)
{
	send_logPlayer(login, password);
	recv_logPlayer(_return);
}

void EngineServerClient::send_logPlayer(const std::string& login, const std::string& password)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("logPlayer", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_logPlayer_pargs args;
	args.login = &login;
	args.password = &password;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_logPlayer(OptionalPlayer& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("logPlayer") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_logPlayer_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "logPlayer failed: unknown result");
}

void EngineServerClient::incrementTutoDisplayed(const Player_ID pid, const std::string& tutoName)
{
	send_incrementTutoDisplayed(pid, tutoName);
	recv_incrementTutoDisplayed();
}

void EngineServerClient::send_incrementTutoDisplayed(const Player_ID pid, const std::string& tutoName)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("incrementTutoDisplayed", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_incrementTutoDisplayed_pargs args;
	args.pid = &pid;
	args.tutoName = &tutoName;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_incrementTutoDisplayed()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("incrementTutoDisplayed") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_incrementTutoDisplayed_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::getFightReport(FightReport& _return, const int32_t id)
{
	send_getFightReport(id);
	recv_getFightReport(_return);
}

void EngineServerClient::send_getFightReport(const int32_t id)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getFightReport", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getFightReport_pargs args;
	args.id = &id;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getFightReport(FightReport& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getFightReport") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getFightReport_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getFightReport failed: unknown result");
}

void EngineServerClient::getTimeInfo(TimeInfo& _return)
{
	send_getTimeInfo();
	recv_getTimeInfo(_return);
}

void EngineServerClient::send_getTimeInfo()
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getTimeInfo", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getTimeInfo_pargs args;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getTimeInfo(TimeInfo& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getTimeInfo") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getTimeInfo_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getTimeInfo failed: unknown result");
}

bool EngineServerClient::eraseAccount(const Player_ID pid, const std::string& password)
{
	send_eraseAccount(pid, password);
	return recv_eraseAccount();
}

void EngineServerClient::send_eraseAccount(const Player_ID pid, const std::string& password)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("eraseAccount", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_eraseAccount_pargs args;
	args.pid = &pid;
	args.password = &password;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

bool EngineServerClient::recv_eraseAccount()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("eraseAccount") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	bool _return;
	EngineServer_eraseAccount_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		return _return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eraseAccount failed: unknown result");
}

void EngineServerClient::getPlayerEvents(std::vector<Event>& _return, const Player_ID pid)
{
	send_getPlayerEvents(pid);
	recv_getPlayerEvents(_return);
}

void EngineServerClient::send_getPlayerEvents(const Player_ID pid)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getPlayerEvents", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getPlayerEvents_pargs args;
	args.pid = &pid;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getPlayerEvents(std::vector<Event>& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getPlayerEvents") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getPlayerEvents_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getPlayerEvents failed: unknown result");
}

bool EngineServerClient::buySkill(const Player_ID pid, const int16_t skillID)
{
	send_buySkill(pid, skillID);
	return recv_buySkill();
}

void EngineServerClient::send_buySkill(const Player_ID pid, const int16_t skillID)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("buySkill", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_buySkill_pargs args;
	args.pid = &pid;
	args.skillID = &skillID;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

bool EngineServerClient::recv_buySkill()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("buySkill") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	bool _return;
	EngineServer_buySkill_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		return _return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "buySkill failed: unknown result");
}

void EngineServerClient::getBuildingsInfo(std::vector<Building>& _return)
{
	send_getBuildingsInfo();
	recv_getBuildingsInfo(_return);
}

void EngineServerClient::send_getBuildingsInfo()
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getBuildingsInfo", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getBuildingsInfo_pargs args;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getBuildingsInfo(std::vector<Building>& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getBuildingsInfo") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getBuildingsInfo_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getBuildingsInfo failed: unknown result");
}

void EngineServerClient::getCannonsInfo(std::vector<Cannon>& _return)
{
	send_getCannonsInfo();
	recv_getCannonsInfo(_return);
}

void EngineServerClient::send_getCannonsInfo()
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getCannonsInfo", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getCannonsInfo_pargs args;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getCannonsInfo(std::vector<Cannon>& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getCannonsInfo") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getCannonsInfo_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getCannonsInfo failed: unknown result");
}

void EngineServerClient::getShipsInfo(std::vector<Ship>& _return)
{
	send_getShipsInfo();
	recv_getShipsInfo(_return);
}

void EngineServerClient::send_getShipsInfo()
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getShipsInfo", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getShipsInfo_pargs args;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getShipsInfo(std::vector<Ship>& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getShipsInfo") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getShipsInfo_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getShipsInfo failed: unknown result");
}

void EngineServerClient::addMessage(const Player_ID sender, const Player_ID recipient, const std::string& suject, const std::string& message)
{
	send_addMessage(sender, recipient, suject, message);
	recv_addMessage();
}

void EngineServerClient::send_addMessage(const Player_ID sender, const Player_ID recipient, const std::string& suject, const std::string& message)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("addMessage", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_addMessage_pargs args;
	args.sender = &sender;
	args.recipient = &recipient;
	args.suject = &suject;
	args.message = &message;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_addMessage()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("addMessage") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_addMessage_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::getMessages(std::vector<Message>& _return, const Player_ID recipient)
{
	send_getMessages(recipient);
	recv_getMessages(_return);
}

void EngineServerClient::send_getMessages(const Player_ID recipient)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getMessages", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getMessages_pargs args;
	args.recipient = &recipient;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getMessages(std::vector<Message>& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getMessages") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getMessages_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getMessages failed: unknown result");
}

void EngineServerClient::eraseMesage(const Message_ID mid)
{
	send_eraseMesage(mid);
	recv_eraseMesage();
}

void EngineServerClient::send_eraseMesage(const Message_ID mid)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("eraseMesage", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_eraseMesage_pargs args;
	args.mid = &mid;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_eraseMesage()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("eraseMesage") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_eraseMesage_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::addFriendshipRequest(const Player_ID playerA, const Player_ID playerB)
{
	send_addFriendshipRequest(playerA, playerB);
	recv_addFriendshipRequest();
}

void EngineServerClient::send_addFriendshipRequest(const Player_ID playerA, const Player_ID playerB)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("addFriendshipRequest", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_addFriendshipRequest_pargs args;
	args.playerA = &playerA;
	args.playerB = &playerB;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_addFriendshipRequest()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("addFriendshipRequest") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_addFriendshipRequest_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::acceptFriendshipRequest(const Player_ID playerA, const Player_ID playerB, const bool accept)
{
	send_acceptFriendshipRequest(playerA, playerB, accept);
	recv_acceptFriendshipRequest();
}

void EngineServerClient::send_acceptFriendshipRequest(const Player_ID playerA, const Player_ID playerB, const bool accept)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("acceptFriendshipRequest", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_acceptFriendshipRequest_pargs args;
	args.playerA = &playerA;
	args.playerB = &playerB;
	args.accept = &accept;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_acceptFriendshipRequest()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("acceptFriendshipRequest") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_acceptFriendshipRequest_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::closeFriendship(const Player_ID playerA, const Player_ID playerB)
{
	send_closeFriendship(playerA, playerB);
	recv_closeFriendship();
}

void EngineServerClient::send_closeFriendship(const Player_ID playerA, const Player_ID playerB)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("closeFriendship", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_closeFriendship_pargs args;
	args.playerA = &playerA;
	args.playerB = &playerB;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_closeFriendship()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("closeFriendship") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_closeFriendship_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::getFriends(std::vector<Player>& _return, const Player_ID player)
{
	send_getFriends(player);
	recv_getFriends(_return);
}

void EngineServerClient::send_getFriends(const Player_ID player)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getFriends", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getFriends_pargs args;
	args.player = &player;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getFriends(std::vector<Player>& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getFriends") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getFriends_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getFriends failed: unknown result");
}

void EngineServerClient::getFriendshipRequest(FriendshipRequests& _return, const Player_ID player)
{
	send_getFriendshipRequest(player);
	recv_getFriendshipRequest(_return);
}

void EngineServerClient::send_getFriendshipRequest(const Player_ID player)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getFriendshipRequest", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getFriendshipRequest_pargs args;
	args.player = &player;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getFriendshipRequest(FriendshipRequests& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getFriendshipRequest") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getFriendshipRequest_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getFriendshipRequest failed: unknown result");
}

Alliance_ID EngineServerClient::addAlliance(const Player_ID pid, const std::string& name, const std::string& description)
{
	send_addAlliance(pid, name, description);
	return recv_addAlliance();
}

void EngineServerClient::send_addAlliance(const Player_ID pid, const std::string& name, const std::string& description)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("addAlliance", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_addAlliance_pargs args;
	args.pid = &pid;
	args.name = &name;
	args.description = &description;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

Alliance_ID EngineServerClient::recv_addAlliance()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("addAlliance") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	Alliance_ID _return;
	EngineServer_addAlliance_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		return _return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "addAlliance failed: unknown result");
}

void EngineServerClient::getAlliance(Alliance& _return, const Alliance_ID aid)
{
	send_getAlliance(aid);
	recv_getAlliance(_return);
}

void EngineServerClient::send_getAlliance(const Alliance_ID aid)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("getAlliance", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_getAlliance_pargs args;
	args.aid = &aid;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_getAlliance(Alliance& _return)
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("getAlliance") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_getAlliance_presult result;
	result.success = &_return;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	if(result.__isset.success)
	{
		// _return pointer has now been filled
		return;
	}
	throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getAlliance failed: unknown result");
}

void EngineServerClient::updateAlliance(const Alliance& alliance)
{
	send_updateAlliance(alliance);
	recv_updateAlliance();
}

void EngineServerClient::send_updateAlliance(const Alliance& alliance)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("updateAlliance", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_updateAlliance_pargs args;
	args.alliance = &alliance;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_updateAlliance()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("updateAlliance") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_updateAlliance_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::transfertAlliance(const Alliance_ID aid, const Player_ID pid)
{
	send_transfertAlliance(aid, pid);
	recv_transfertAlliance();
}

void EngineServerClient::send_transfertAlliance(const Alliance_ID aid, const Player_ID pid)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("transfertAlliance", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_transfertAlliance_pargs args;
	args.aid = &aid;
	args.pid = &pid;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_transfertAlliance()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("transfertAlliance") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_transfertAlliance_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::eraseAlliance(const Alliance_ID aid)
{
	send_eraseAlliance(aid);
	recv_eraseAlliance();
}

void EngineServerClient::send_eraseAlliance(const Alliance_ID aid)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("eraseAlliance", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_eraseAlliance_pargs args;
	args.aid = &aid;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_eraseAlliance()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("eraseAlliance") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_eraseAlliance_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::joinAlliance(const Player_ID pid, const Alliance_ID aid)
{
	send_joinAlliance(pid, aid);
	recv_joinAlliance();
}

void EngineServerClient::send_joinAlliance(const Player_ID pid, const Alliance_ID aid)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("joinAlliance", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_joinAlliance_pargs args;
	args.pid = &pid;
	args.aid = &aid;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_joinAlliance()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("joinAlliance") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_joinAlliance_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

void EngineServerClient::quitAlliance(const Player_ID pid)
{
	send_quitAlliance(pid);
	recv_quitAlliance();
}

void EngineServerClient::send_quitAlliance(const Player_ID pid)
{
	int32_t cseqid = 0;
	oprot_->writeMessageBegin("quitAlliance", ::apache::thrift::protocol::T_CALL, cseqid);

	EngineServer_quitAlliance_pargs args;
	args.pid = &pid;
	args.write(oprot_);

	oprot_->writeMessageEnd();
	oprot_->getTransport()->writeEnd();
	oprot_->getTransport()->flush();
}

void EngineServerClient::recv_quitAlliance()
{

	int32_t rseqid = 0;
	std::string fname;
	::apache::thrift::protocol::TMessageType mtype;

	iprot_->readMessageBegin(fname, mtype, rseqid);
	if(mtype == ::apache::thrift::protocol::T_EXCEPTION)
	{
		::apache::thrift::TApplicationException x;
		x.read(iprot_);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
		throw x;
	}
	if(mtype != ::apache::thrift::protocol::T_REPLY)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	if(fname.compare("quitAlliance") != 0)
	{
		iprot_->skip(::apache::thrift::protocol::T_STRUCT);
		iprot_->readMessageEnd();
		iprot_->getTransport()->readEnd();
	}
	EngineServer_quitAlliance_presult result;
	result.read(iprot_);
	iprot_->readMessageEnd();
	iprot_->getTransport()->readEnd();

	return;
}

bool EngineServerProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext)
{
	ProcessMap::iterator pfn;
	pfn = processMap_.find(fname);
	if(pfn == processMap_.end())
	{
		iprot->skip(::apache::thrift::protocol::T_STRUCT);
		iprot->readMessageEnd();
		iprot->getTransport()->readEnd();
		::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '" + fname + "'");
		oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return true;
	}
	(this->*(pfn->second))(seqid, iprot, oprot, callContext);
	return true;
}

void EngineServerProcessor::process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.start", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.start");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.start");
	}

	EngineServer_start_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.start", bytes);
	}

	EngineServer_start_result result;
	try
	{
		iface_->start();
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.start");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("start", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.start");
	}

	oprot->writeMessageBegin("start", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.start", bytes);
	}
}

void EngineServerProcessor::process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.stop", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.stop");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.stop");
	}

	EngineServer_stop_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.stop", bytes);
	}

	EngineServer_stop_result result;
	try
	{
		iface_->stop();
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.stop");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("stop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.stop");
	}

	oprot->writeMessageBegin("stop", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.stop", bytes);
	}
}

void EngineServerProcessor::process_addPlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.addPlayer", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.addPlayer");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.addPlayer");
	}

	EngineServer_addPlayer_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.addPlayer", bytes);
	}

	EngineServer_addPlayer_result result;
	try
	{
		result.success = iface_->addPlayer(args.login, args.password);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.addPlayer");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("addPlayer", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.addPlayer");
	}

	oprot->writeMessageBegin("addPlayer", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.addPlayer", bytes);
	}
}

void EngineServerProcessor::process_getPlayerFleets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getPlayerFleets", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getPlayerFleets");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getPlayerFleets");
	}

	EngineServer_getPlayerFleets_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getPlayerFleets", bytes);
	}

	EngineServer_getPlayerFleets_result result;
	try
	{
		iface_->getPlayerFleets(result.success, args.pid, args.beginIndex, args.endIndex, args.sortType, args.asc, args.value);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getPlayerFleets");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getPlayerFleets", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getPlayerFleets");
	}

	oprot->writeMessageBegin("getPlayerFleets", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getPlayerFleets", bytes);
	}
}

void EngineServerProcessor::process_getPlayerPlanets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getPlayerPlanets", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getPlayerPlanets");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getPlayerPlanets");
	}

	EngineServer_getPlayerPlanets_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getPlayerPlanets", bytes);
	}

	EngineServer_getPlayerPlanets_result result;
	try
	{
		iface_->getPlayerPlanets(result.success, args.pid, args.beginIndex, args.endIndex, args.sortType, args.asc, args.value);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getPlayerPlanets");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getPlayerPlanets", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getPlayerPlanets");
	}

	oprot->writeMessageBegin("getPlayerPlanets", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getPlayerPlanets", bytes);
	}
}

void EngineServerProcessor::process_setPlayerFleetCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.setPlayerFleetCode", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.setPlayerFleetCode");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.setPlayerFleetCode");
	}

	EngineServer_setPlayerFleetCode_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.setPlayerFleetCode", bytes);
	}

	EngineServer_setPlayerFleetCode_result result;
	try
	{
		iface_->setPlayerFleetCode(args.pid, args.code);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.setPlayerFleetCode");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("setPlayerFleetCode", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.setPlayerFleetCode");
	}

	oprot->writeMessageBegin("setPlayerFleetCode", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.setPlayerFleetCode", bytes);
	}
}

void EngineServerProcessor::process_setPlayerPlanetCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.setPlayerPlanetCode", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.setPlayerPlanetCode");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.setPlayerPlanetCode");
	}

	EngineServer_setPlayerPlanetCode_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.setPlayerPlanetCode", bytes);
	}

	EngineServer_setPlayerPlanetCode_result result;
	try
	{
		iface_->setPlayerPlanetCode(args.pid, args.code);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.setPlayerPlanetCode");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("setPlayerPlanetCode", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.setPlayerPlanetCode");
	}

	oprot->writeMessageBegin("setPlayerPlanetCode", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.setPlayerPlanetCode", bytes);
	}
}

void EngineServerProcessor::process_setPlayerFleetBlocklyCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.setPlayerFleetBlocklyCode", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.setPlayerFleetBlocklyCode");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.setPlayerFleetBlocklyCode");
	}

	EngineServer_setPlayerFleetBlocklyCode_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.setPlayerFleetBlocklyCode", bytes);
	}

	EngineServer_setPlayerFleetBlocklyCode_result result;
	try
	{
		iface_->setPlayerFleetBlocklyCode(args.pid, args.code);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.setPlayerFleetBlocklyCode");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("setPlayerFleetBlocklyCode", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.setPlayerFleetBlocklyCode");
	}

	oprot->writeMessageBegin("setPlayerFleetBlocklyCode", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.setPlayerFleetBlocklyCode", bytes);
	}
}

void EngineServerProcessor::process_setPlayerPlanetBlocklyCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.setPlayerPlanetBlocklyCode", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.setPlayerPlanetBlocklyCode");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.setPlayerPlanetBlocklyCode");
	}

	EngineServer_setPlayerPlanetBlocklyCode_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.setPlayerPlanetBlocklyCode", bytes);
	}

	EngineServer_setPlayerPlanetBlocklyCode_result result;
	try
	{
		iface_->setPlayerPlanetBlocklyCode(args.pid, args.code);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.setPlayerPlanetBlocklyCode");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("setPlayerPlanetBlocklyCode", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.setPlayerPlanetBlocklyCode");
	}

	oprot->writeMessageBegin("setPlayerPlanetBlocklyCode", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.setPlayerPlanetBlocklyCode", bytes);
	}
}

void EngineServerProcessor::process_getPlayerFleetCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getPlayerFleetCode", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getPlayerFleetCode");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getPlayerFleetCode");
	}

	EngineServer_getPlayerFleetCode_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getPlayerFleetCode", bytes);
	}

	EngineServer_getPlayerFleetCode_result result;
	try
	{
		iface_->getPlayerFleetCode(result.success, args.pid);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getPlayerFleetCode");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getPlayerFleetCode", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getPlayerFleetCode");
	}

	oprot->writeMessageBegin("getPlayerFleetCode", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getPlayerFleetCode", bytes);
	}
}

void EngineServerProcessor::process_getPlayerPlanetCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getPlayerPlanetCode", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getPlayerPlanetCode");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getPlayerPlanetCode");
	}

	EngineServer_getPlayerPlanetCode_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getPlayerPlanetCode", bytes);
	}

	EngineServer_getPlayerPlanetCode_result result;
	try
	{
		iface_->getPlayerPlanetCode(result.success, args.pid);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getPlayerPlanetCode");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getPlayerPlanetCode", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getPlayerPlanetCode");
	}

	oprot->writeMessageBegin("getPlayerPlanetCode", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getPlayerPlanetCode", bytes);
	}
}

void EngineServerProcessor::process_getPlayers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getPlayers", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getPlayers");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getPlayers");
	}

	EngineServer_getPlayers_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getPlayers", bytes);
	}

	EngineServer_getPlayers_result result;
	try
	{
		iface_->getPlayers(result.success);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getPlayers");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getPlayers", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getPlayers");
	}

	oprot->writeMessageBegin("getPlayers", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getPlayers", bytes);
	}
}

void EngineServerProcessor::process_getPlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getPlayer", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getPlayer");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getPlayer");
	}

	EngineServer_getPlayer_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getPlayer", bytes);
	}

	EngineServer_getPlayer_result result;
	try
	{
		iface_->getPlayer(result.success, args.pid);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getPlayer");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getPlayer", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getPlayer");
	}

	oprot->writeMessageBegin("getPlayer", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getPlayer", bytes);
	}
}

void EngineServerProcessor::process_getPlanet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getPlanet", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getPlanet");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getPlanet");
	}

	EngineServer_getPlanet_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getPlanet", bytes);
	}

	EngineServer_getPlanet_result result;
	try
	{
		iface_->getPlanet(result.success, args.coord);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getPlanet");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getPlanet", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getPlanet");
	}

	oprot->writeMessageBegin("getPlanet", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getPlanet", bytes);
	}
}

void EngineServerProcessor::process_getFleet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getFleet", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getFleet");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getFleet");
	}

	EngineServer_getFleet_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getFleet", bytes);
	}

	EngineServer_getFleet_result result;
	try
	{
		iface_->getFleet(result.success, args.fid);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getFleet");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getFleet", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getFleet");
	}

	oprot->writeMessageBegin("getFleet", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getFleet", bytes);
	}
}

void EngineServerProcessor::process_logPlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.logPlayer", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.logPlayer");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.logPlayer");
	}

	EngineServer_logPlayer_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.logPlayer", bytes);
	}

	EngineServer_logPlayer_result result;
	try
	{
		iface_->logPlayer(result.success, args.login, args.password);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.logPlayer");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("logPlayer", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.logPlayer");
	}

	oprot->writeMessageBegin("logPlayer", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.logPlayer", bytes);
	}
}

void EngineServerProcessor::process_incrementTutoDisplayed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.incrementTutoDisplayed", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.incrementTutoDisplayed");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.incrementTutoDisplayed");
	}

	EngineServer_incrementTutoDisplayed_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.incrementTutoDisplayed", bytes);
	}

	EngineServer_incrementTutoDisplayed_result result;
	try
	{
		iface_->incrementTutoDisplayed(args.pid, args.tutoName);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.incrementTutoDisplayed");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("incrementTutoDisplayed", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.incrementTutoDisplayed");
	}

	oprot->writeMessageBegin("incrementTutoDisplayed", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.incrementTutoDisplayed", bytes);
	}
}

void EngineServerProcessor::process_getFightReport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getFightReport", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getFightReport");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getFightReport");
	}

	EngineServer_getFightReport_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getFightReport", bytes);
	}

	EngineServer_getFightReport_result result;
	try
	{
		iface_->getFightReport(result.success, args.id);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getFightReport");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getFightReport", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getFightReport");
	}

	oprot->writeMessageBegin("getFightReport", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getFightReport", bytes);
	}
}

void EngineServerProcessor::process_getTimeInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getTimeInfo", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getTimeInfo");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getTimeInfo");
	}

	EngineServer_getTimeInfo_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getTimeInfo", bytes);
	}

	EngineServer_getTimeInfo_result result;
	try
	{
		iface_->getTimeInfo(result.success);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getTimeInfo");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getTimeInfo", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getTimeInfo");
	}

	oprot->writeMessageBegin("getTimeInfo", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getTimeInfo", bytes);
	}
}

void EngineServerProcessor::process_eraseAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.eraseAccount", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.eraseAccount");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.eraseAccount");
	}

	EngineServer_eraseAccount_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.eraseAccount", bytes);
	}

	EngineServer_eraseAccount_result result;
	try
	{
		result.success = iface_->eraseAccount(args.pid, args.password);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.eraseAccount");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("eraseAccount", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.eraseAccount");
	}

	oprot->writeMessageBegin("eraseAccount", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.eraseAccount", bytes);
	}
}

void EngineServerProcessor::process_getPlayerEvents(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getPlayerEvents", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getPlayerEvents");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getPlayerEvents");
	}

	EngineServer_getPlayerEvents_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getPlayerEvents", bytes);
	}

	EngineServer_getPlayerEvents_result result;
	try
	{
		iface_->getPlayerEvents(result.success, args.pid);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getPlayerEvents");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getPlayerEvents", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getPlayerEvents");
	}

	oprot->writeMessageBegin("getPlayerEvents", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getPlayerEvents", bytes);
	}
}

void EngineServerProcessor::process_buySkill(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.buySkill", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.buySkill");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.buySkill");
	}

	EngineServer_buySkill_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.buySkill", bytes);
	}

	EngineServer_buySkill_result result;
	try
	{
		result.success = iface_->buySkill(args.pid, args.skillID);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.buySkill");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("buySkill", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.buySkill");
	}

	oprot->writeMessageBegin("buySkill", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.buySkill", bytes);
	}
}

void EngineServerProcessor::process_getBuildingsInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getBuildingsInfo", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getBuildingsInfo");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getBuildingsInfo");
	}

	EngineServer_getBuildingsInfo_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getBuildingsInfo", bytes);
	}

	EngineServer_getBuildingsInfo_result result;
	try
	{
		iface_->getBuildingsInfo(result.success);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getBuildingsInfo");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getBuildingsInfo", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getBuildingsInfo");
	}

	oprot->writeMessageBegin("getBuildingsInfo", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getBuildingsInfo", bytes);
	}
}

void EngineServerProcessor::process_getCannonsInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getCannonsInfo", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getCannonsInfo");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getCannonsInfo");
	}

	EngineServer_getCannonsInfo_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getCannonsInfo", bytes);
	}

	EngineServer_getCannonsInfo_result result;
	try
	{
		iface_->getCannonsInfo(result.success);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getCannonsInfo");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getCannonsInfo", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getCannonsInfo");
	}

	oprot->writeMessageBegin("getCannonsInfo", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getCannonsInfo", bytes);
	}
}

void EngineServerProcessor::process_getShipsInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getShipsInfo", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getShipsInfo");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getShipsInfo");
	}

	EngineServer_getShipsInfo_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getShipsInfo", bytes);
	}

	EngineServer_getShipsInfo_result result;
	try
	{
		iface_->getShipsInfo(result.success);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getShipsInfo");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getShipsInfo", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getShipsInfo");
	}

	oprot->writeMessageBegin("getShipsInfo", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getShipsInfo", bytes);
	}
}

void EngineServerProcessor::process_addMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.addMessage", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.addMessage");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.addMessage");
	}

	EngineServer_addMessage_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.addMessage", bytes);
	}

	EngineServer_addMessage_result result;
	try
	{
		iface_->addMessage(args.sender, args.recipient, args.suject, args.message);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.addMessage");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("addMessage", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.addMessage");
	}

	oprot->writeMessageBegin("addMessage", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.addMessage", bytes);
	}
}

void EngineServerProcessor::process_getMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getMessages", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getMessages");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getMessages");
	}

	EngineServer_getMessages_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getMessages", bytes);
	}

	EngineServer_getMessages_result result;
	try
	{
		iface_->getMessages(result.success, args.recipient);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getMessages");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getMessages", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getMessages");
	}

	oprot->writeMessageBegin("getMessages", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getMessages", bytes);
	}
}

void EngineServerProcessor::process_eraseMesage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.eraseMesage", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.eraseMesage");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.eraseMesage");
	}

	EngineServer_eraseMesage_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.eraseMesage", bytes);
	}

	EngineServer_eraseMesage_result result;
	try
	{
		iface_->eraseMesage(args.mid);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.eraseMesage");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("eraseMesage", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.eraseMesage");
	}

	oprot->writeMessageBegin("eraseMesage", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.eraseMesage", bytes);
	}
}

void EngineServerProcessor::process_addFriendshipRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.addFriendshipRequest", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.addFriendshipRequest");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.addFriendshipRequest");
	}

	EngineServer_addFriendshipRequest_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.addFriendshipRequest", bytes);
	}

	EngineServer_addFriendshipRequest_result result;
	try
	{
		iface_->addFriendshipRequest(args.playerA, args.playerB);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.addFriendshipRequest");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("addFriendshipRequest", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.addFriendshipRequest");
	}

	oprot->writeMessageBegin("addFriendshipRequest", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.addFriendshipRequest", bytes);
	}
}

void EngineServerProcessor::process_acceptFriendshipRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.acceptFriendshipRequest", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.acceptFriendshipRequest");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.acceptFriendshipRequest");
	}

	EngineServer_acceptFriendshipRequest_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.acceptFriendshipRequest", bytes);
	}

	EngineServer_acceptFriendshipRequest_result result;
	try
	{
		iface_->acceptFriendshipRequest(args.playerA, args.playerB, args.accept);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.acceptFriendshipRequest");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("acceptFriendshipRequest", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.acceptFriendshipRequest");
	}

	oprot->writeMessageBegin("acceptFriendshipRequest", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.acceptFriendshipRequest", bytes);
	}
}

void EngineServerProcessor::process_closeFriendship(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.closeFriendship", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.closeFriendship");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.closeFriendship");
	}

	EngineServer_closeFriendship_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.closeFriendship", bytes);
	}

	EngineServer_closeFriendship_result result;
	try
	{
		iface_->closeFriendship(args.playerA, args.playerB);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.closeFriendship");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("closeFriendship", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.closeFriendship");
	}

	oprot->writeMessageBegin("closeFriendship", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.closeFriendship", bytes);
	}
}

void EngineServerProcessor::process_getFriends(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getFriends", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getFriends");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getFriends");
	}

	EngineServer_getFriends_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getFriends", bytes);
	}

	EngineServer_getFriends_result result;
	try
	{
		iface_->getFriends(result.success, args.player);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getFriends");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getFriends", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getFriends");
	}

	oprot->writeMessageBegin("getFriends", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getFriends", bytes);
	}
}

void EngineServerProcessor::process_getFriendshipRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getFriendshipRequest", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getFriendshipRequest");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getFriendshipRequest");
	}

	EngineServer_getFriendshipRequest_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getFriendshipRequest", bytes);
	}

	EngineServer_getFriendshipRequest_result result;
	try
	{
		iface_->getFriendshipRequest(result.success, args.player);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getFriendshipRequest");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getFriendshipRequest", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getFriendshipRequest");
	}

	oprot->writeMessageBegin("getFriendshipRequest", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getFriendshipRequest", bytes);
	}
}

void EngineServerProcessor::process_addAlliance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.addAlliance", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.addAlliance");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.addAlliance");
	}

	EngineServer_addAlliance_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.addAlliance", bytes);
	}

	EngineServer_addAlliance_result result;
	try
	{
		result.success = iface_->addAlliance(args.pid, args.name, args.description);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.addAlliance");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("addAlliance", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.addAlliance");
	}

	oprot->writeMessageBegin("addAlliance", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.addAlliance", bytes);
	}
}

void EngineServerProcessor::process_getAlliance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.getAlliance", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.getAlliance");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.getAlliance");
	}

	EngineServer_getAlliance_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.getAlliance", bytes);
	}

	EngineServer_getAlliance_result result;
	try
	{
		iface_->getAlliance(result.success, args.aid);
		result.__isset.success = true;
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.getAlliance");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("getAlliance", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.getAlliance");
	}

	oprot->writeMessageBegin("getAlliance", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.getAlliance", bytes);
	}
}

void EngineServerProcessor::process_updateAlliance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.updateAlliance", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.updateAlliance");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.updateAlliance");
	}

	EngineServer_updateAlliance_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.updateAlliance", bytes);
	}

	EngineServer_updateAlliance_result result;
	try
	{
		iface_->updateAlliance(args.alliance);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.updateAlliance");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("updateAlliance", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.updateAlliance");
	}

	oprot->writeMessageBegin("updateAlliance", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.updateAlliance", bytes);
	}
}

void EngineServerProcessor::process_transfertAlliance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.transfertAlliance", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.transfertAlliance");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.transfertAlliance");
	}

	EngineServer_transfertAlliance_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.transfertAlliance", bytes);
	}

	EngineServer_transfertAlliance_result result;
	try
	{
		iface_->transfertAlliance(args.aid, args.pid);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.transfertAlliance");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("transfertAlliance", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.transfertAlliance");
	}

	oprot->writeMessageBegin("transfertAlliance", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.transfertAlliance", bytes);
	}
}

void EngineServerProcessor::process_eraseAlliance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.eraseAlliance", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.eraseAlliance");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.eraseAlliance");
	}

	EngineServer_eraseAlliance_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.eraseAlliance", bytes);
	}

	EngineServer_eraseAlliance_result result;
	try
	{
		iface_->eraseAlliance(args.aid);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.eraseAlliance");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("eraseAlliance", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.eraseAlliance");
	}

	oprot->writeMessageBegin("eraseAlliance", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.eraseAlliance", bytes);
	}
}

void EngineServerProcessor::process_joinAlliance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.joinAlliance", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.joinAlliance");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.joinAlliance");
	}

	EngineServer_joinAlliance_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.joinAlliance", bytes);
	}

	EngineServer_joinAlliance_result result;
	try
	{
		iface_->joinAlliance(args.pid, args.aid);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.joinAlliance");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("joinAlliance", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.joinAlliance");
	}

	oprot->writeMessageBegin("joinAlliance", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.joinAlliance", bytes);
	}
}

void EngineServerProcessor::process_quitAlliance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
	void* ctx = NULL;
	if(this->eventHandler_.get() != NULL)
	{
		ctx = this->eventHandler_->getContext("EngineServer.quitAlliance", callContext);
	}
	::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "EngineServer.quitAlliance");

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preRead(ctx, "EngineServer.quitAlliance");
	}

	EngineServer_quitAlliance_args args;
	args.read(iprot);
	iprot->readMessageEnd();
	uint32_t bytes = iprot->getTransport()->readEnd();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postRead(ctx, "EngineServer.quitAlliance", bytes);
	}

	EngineServer_quitAlliance_result result;
	try
	{
		iface_->quitAlliance(args.pid);
	}
	catch(const std::exception& e)
	{
		if(this->eventHandler_.get() != NULL)
		{
			this->eventHandler_->handlerError(ctx, "EngineServer.quitAlliance");
		}

		::apache::thrift::TApplicationException x(e.what());
		oprot->writeMessageBegin("quitAlliance", ::apache::thrift::protocol::T_EXCEPTION, seqid);
		x.write(oprot);
		oprot->writeMessageEnd();
		oprot->getTransport()->writeEnd();
		oprot->getTransport()->flush();
		return;
	}

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->preWrite(ctx, "EngineServer.quitAlliance");
	}

	oprot->writeMessageBegin("quitAlliance", ::apache::thrift::protocol::T_REPLY, seqid);
	result.write(oprot);
	oprot->writeMessageEnd();
	bytes = oprot->getTransport()->writeEnd();
	oprot->getTransport()->flush();

	if(this->eventHandler_.get() != NULL)
	{
		this->eventHandler_->postWrite(ctx, "EngineServer.quitAlliance", bytes);
	}
}

::boost::shared_ptr< ::apache::thrift::TProcessor > EngineServerProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo)
{
	::apache::thrift::ReleaseHandler< EngineServerIfFactory > cleanup(handlerFactory_);
	::boost::shared_ptr< EngineServerIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
	::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new EngineServerProcessor(handler));
	return processor;
}
} // namespace

